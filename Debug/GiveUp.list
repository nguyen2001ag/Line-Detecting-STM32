
GiveUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005154  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005214  08005214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800534c  0800534c  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  0800534c  0800534c  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800534c  0800534c  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005350  08005350  00015350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08005354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000048  0800539c  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  0800539c  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf88  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002124  00000000  00000000  0002bff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb0  00000000  00000000  0002e120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b68  00000000  00000000  0002edd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fb05  00000000  00000000  0002f938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b466  00000000  00000000  0003f43d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00058611  00000000  00000000  0004a8a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a2eb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dec  00000000  00000000  000a2f30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000048 	.word	0x20000048
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080051fc 	.word	0x080051fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000004c 	.word	0x2000004c
 8000104:	080051fc 	.word	0x080051fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fb6d 	bl	8000908 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 faef 	bl	800081c <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fb5f 	bl	8000908 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb55 	bl	8000908 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fafd 	bl	800086c <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 faf3 	bl	800086c <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	; 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fe75 	bl	8000f94 <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	; 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 fcab 	bl	8000c0c <__aeabi_fsub>
 80002b6:	f000 fe6d 	bl	8000f94 <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__aeabi_fadd>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	4647      	mov	r7, r8
 80002c8:	46ce      	mov	lr, r9
 80002ca:	0243      	lsls	r3, r0, #9
 80002cc:	0a5b      	lsrs	r3, r3, #9
 80002ce:	0044      	lsls	r4, r0, #1
 80002d0:	0fc2      	lsrs	r2, r0, #31
 80002d2:	469c      	mov	ip, r3
 80002d4:	0048      	lsls	r0, r1, #1
 80002d6:	00dd      	lsls	r5, r3, #3
 80002d8:	024b      	lsls	r3, r1, #9
 80002da:	0e24      	lsrs	r4, r4, #24
 80002dc:	0a5b      	lsrs	r3, r3, #9
 80002de:	0e00      	lsrs	r0, r0, #24
 80002e0:	b580      	push	{r7, lr}
 80002e2:	4698      	mov	r8, r3
 80002e4:	0026      	movs	r6, r4
 80002e6:	4691      	mov	r9, r2
 80002e8:	0fc9      	lsrs	r1, r1, #31
 80002ea:	00db      	lsls	r3, r3, #3
 80002ec:	1a27      	subs	r7, r4, r0
 80002ee:	428a      	cmp	r2, r1
 80002f0:	d029      	beq.n	8000346 <__aeabi_fadd+0x82>
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	dd15      	ble.n	8000322 <__aeabi_fadd+0x5e>
 80002f6:	2800      	cmp	r0, #0
 80002f8:	d14a      	bne.n	8000390 <__aeabi_fadd+0xcc>
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d000      	beq.n	8000300 <__aeabi_fadd+0x3c>
 80002fe:	e095      	b.n	800042c <__aeabi_fadd+0x168>
 8000300:	08ed      	lsrs	r5, r5, #3
 8000302:	2cff      	cmp	r4, #255	; 0xff
 8000304:	d100      	bne.n	8000308 <__aeabi_fadd+0x44>
 8000306:	e088      	b.n	800041a <__aeabi_fadd+0x156>
 8000308:	026b      	lsls	r3, r5, #9
 800030a:	0a5b      	lsrs	r3, r3, #9
 800030c:	b2e6      	uxtb	r6, r4
 800030e:	025b      	lsls	r3, r3, #9
 8000310:	05f6      	lsls	r6, r6, #23
 8000312:	0a58      	lsrs	r0, r3, #9
 8000314:	4330      	orrs	r0, r6
 8000316:	07d2      	lsls	r2, r2, #31
 8000318:	4310      	orrs	r0, r2
 800031a:	bc0c      	pop	{r2, r3}
 800031c:	4690      	mov	r8, r2
 800031e:	4699      	mov	r9, r3
 8000320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000322:	2f00      	cmp	r7, #0
 8000324:	d000      	beq.n	8000328 <__aeabi_fadd+0x64>
 8000326:	e087      	b.n	8000438 <__aeabi_fadd+0x174>
 8000328:	1c60      	adds	r0, r4, #1
 800032a:	b2c0      	uxtb	r0, r0
 800032c:	2801      	cmp	r0, #1
 800032e:	dc00      	bgt.n	8000332 <__aeabi_fadd+0x6e>
 8000330:	e0b6      	b.n	80004a0 <__aeabi_fadd+0x1dc>
 8000332:	1aee      	subs	r6, r5, r3
 8000334:	0172      	lsls	r2, r6, #5
 8000336:	d500      	bpl.n	800033a <__aeabi_fadd+0x76>
 8000338:	e0c5      	b.n	80004c6 <__aeabi_fadd+0x202>
 800033a:	2e00      	cmp	r6, #0
 800033c:	d13d      	bne.n	80003ba <__aeabi_fadd+0xf6>
 800033e:	2200      	movs	r2, #0
 8000340:	2600      	movs	r6, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e7e3      	b.n	800030e <__aeabi_fadd+0x4a>
 8000346:	2f00      	cmp	r7, #0
 8000348:	dc00      	bgt.n	800034c <__aeabi_fadd+0x88>
 800034a:	e096      	b.n	800047a <__aeabi_fadd+0x1b6>
 800034c:	2800      	cmp	r0, #0
 800034e:	d05d      	beq.n	800040c <__aeabi_fadd+0x148>
 8000350:	2cff      	cmp	r4, #255	; 0xff
 8000352:	d060      	beq.n	8000416 <__aeabi_fadd+0x152>
 8000354:	2280      	movs	r2, #128	; 0x80
 8000356:	04d2      	lsls	r2, r2, #19
 8000358:	4313      	orrs	r3, r2
 800035a:	2f1b      	cmp	r7, #27
 800035c:	dd00      	ble.n	8000360 <__aeabi_fadd+0x9c>
 800035e:	e0ec      	b.n	800053a <__aeabi_fadd+0x276>
 8000360:	2220      	movs	r2, #32
 8000362:	1bd2      	subs	r2, r2, r7
 8000364:	0018      	movs	r0, r3
 8000366:	4093      	lsls	r3, r2
 8000368:	40f8      	lsrs	r0, r7
 800036a:	1e5a      	subs	r2, r3, #1
 800036c:	4193      	sbcs	r3, r2
 800036e:	4303      	orrs	r3, r0
 8000370:	18ed      	adds	r5, r5, r3
 8000372:	016b      	lsls	r3, r5, #5
 8000374:	d57b      	bpl.n	800046e <__aeabi_fadd+0x1aa>
 8000376:	3401      	adds	r4, #1
 8000378:	2cff      	cmp	r4, #255	; 0xff
 800037a:	d100      	bne.n	800037e <__aeabi_fadd+0xba>
 800037c:	e0b7      	b.n	80004ee <__aeabi_fadd+0x22a>
 800037e:	2201      	movs	r2, #1
 8000380:	2607      	movs	r6, #7
 8000382:	402a      	ands	r2, r5
 8000384:	086b      	lsrs	r3, r5, #1
 8000386:	4d9a      	ldr	r5, [pc, #616]	; (80005f0 <__aeabi_fadd+0x32c>)
 8000388:	401d      	ands	r5, r3
 800038a:	4315      	orrs	r5, r2
 800038c:	402e      	ands	r6, r5
 800038e:	e029      	b.n	80003e4 <__aeabi_fadd+0x120>
 8000390:	2cff      	cmp	r4, #255	; 0xff
 8000392:	d0b5      	beq.n	8000300 <__aeabi_fadd+0x3c>
 8000394:	2280      	movs	r2, #128	; 0x80
 8000396:	04d2      	lsls	r2, r2, #19
 8000398:	4313      	orrs	r3, r2
 800039a:	2f1b      	cmp	r7, #27
 800039c:	dd00      	ble.n	80003a0 <__aeabi_fadd+0xdc>
 800039e:	e0b2      	b.n	8000506 <__aeabi_fadd+0x242>
 80003a0:	2220      	movs	r2, #32
 80003a2:	1bd2      	subs	r2, r2, r7
 80003a4:	0019      	movs	r1, r3
 80003a6:	4093      	lsls	r3, r2
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	1e5a      	subs	r2, r3, #1
 80003ac:	4193      	sbcs	r3, r2
 80003ae:	430b      	orrs	r3, r1
 80003b0:	1aed      	subs	r5, r5, r3
 80003b2:	016b      	lsls	r3, r5, #5
 80003b4:	d55b      	bpl.n	800046e <__aeabi_fadd+0x1aa>
 80003b6:	01ad      	lsls	r5, r5, #6
 80003b8:	09ae      	lsrs	r6, r5, #6
 80003ba:	0030      	movs	r0, r6
 80003bc:	f001 f952 	bl	8001664 <__clzsi2>
 80003c0:	3805      	subs	r0, #5
 80003c2:	4086      	lsls	r6, r0
 80003c4:	4284      	cmp	r4, r0
 80003c6:	dc65      	bgt.n	8000494 <__aeabi_fadd+0x1d0>
 80003c8:	1b04      	subs	r4, r0, r4
 80003ca:	0033      	movs	r3, r6
 80003cc:	2020      	movs	r0, #32
 80003ce:	3401      	adds	r4, #1
 80003d0:	40e3      	lsrs	r3, r4
 80003d2:	1b04      	subs	r4, r0, r4
 80003d4:	40a6      	lsls	r6, r4
 80003d6:	1e75      	subs	r5, r6, #1
 80003d8:	41ae      	sbcs	r6, r5
 80003da:	4333      	orrs	r3, r6
 80003dc:	2607      	movs	r6, #7
 80003de:	001d      	movs	r5, r3
 80003e0:	2400      	movs	r4, #0
 80003e2:	401e      	ands	r6, r3
 80003e4:	2201      	movs	r2, #1
 80003e6:	464b      	mov	r3, r9
 80003e8:	401a      	ands	r2, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d004      	beq.n	80003f8 <__aeabi_fadd+0x134>
 80003ee:	230f      	movs	r3, #15
 80003f0:	402b      	ands	r3, r5
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	d000      	beq.n	80003f8 <__aeabi_fadd+0x134>
 80003f6:	3504      	adds	r5, #4
 80003f8:	016b      	lsls	r3, r5, #5
 80003fa:	d400      	bmi.n	80003fe <__aeabi_fadd+0x13a>
 80003fc:	e780      	b.n	8000300 <__aeabi_fadd+0x3c>
 80003fe:	3401      	adds	r4, #1
 8000400:	b2e6      	uxtb	r6, r4
 8000402:	2cff      	cmp	r4, #255	; 0xff
 8000404:	d12f      	bne.n	8000466 <__aeabi_fadd+0x1a2>
 8000406:	26ff      	movs	r6, #255	; 0xff
 8000408:	2300      	movs	r3, #0
 800040a:	e780      	b.n	800030e <__aeabi_fadd+0x4a>
 800040c:	2b00      	cmp	r3, #0
 800040e:	d152      	bne.n	80004b6 <__aeabi_fadd+0x1f2>
 8000410:	2cff      	cmp	r4, #255	; 0xff
 8000412:	d000      	beq.n	8000416 <__aeabi_fadd+0x152>
 8000414:	e774      	b.n	8000300 <__aeabi_fadd+0x3c>
 8000416:	000a      	movs	r2, r1
 8000418:	08ed      	lsrs	r5, r5, #3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0f3      	beq.n	8000406 <__aeabi_fadd+0x142>
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	432b      	orrs	r3, r5
 8000424:	025b      	lsls	r3, r3, #9
 8000426:	0a5b      	lsrs	r3, r3, #9
 8000428:	26ff      	movs	r6, #255	; 0xff
 800042a:	e770      	b.n	800030e <__aeabi_fadd+0x4a>
 800042c:	3f01      	subs	r7, #1
 800042e:	2f00      	cmp	r7, #0
 8000430:	d0be      	beq.n	80003b0 <__aeabi_fadd+0xec>
 8000432:	2cff      	cmp	r4, #255	; 0xff
 8000434:	d1b1      	bne.n	800039a <__aeabi_fadd+0xd6>
 8000436:	e763      	b.n	8000300 <__aeabi_fadd+0x3c>
 8000438:	2c00      	cmp	r4, #0
 800043a:	d047      	beq.n	80004cc <__aeabi_fadd+0x208>
 800043c:	28ff      	cmp	r0, #255	; 0xff
 800043e:	d069      	beq.n	8000514 <__aeabi_fadd+0x250>
 8000440:	2480      	movs	r4, #128	; 0x80
 8000442:	04e4      	lsls	r4, r4, #19
 8000444:	427a      	negs	r2, r7
 8000446:	4325      	orrs	r5, r4
 8000448:	2a1b      	cmp	r2, #27
 800044a:	dd00      	ble.n	800044e <__aeabi_fadd+0x18a>
 800044c:	e0c5      	b.n	80005da <__aeabi_fadd+0x316>
 800044e:	002c      	movs	r4, r5
 8000450:	2620      	movs	r6, #32
 8000452:	40d4      	lsrs	r4, r2
 8000454:	1ab2      	subs	r2, r6, r2
 8000456:	4095      	lsls	r5, r2
 8000458:	1e6a      	subs	r2, r5, #1
 800045a:	4195      	sbcs	r5, r2
 800045c:	4325      	orrs	r5, r4
 800045e:	1b5d      	subs	r5, r3, r5
 8000460:	0004      	movs	r4, r0
 8000462:	4689      	mov	r9, r1
 8000464:	e7a5      	b.n	80003b2 <__aeabi_fadd+0xee>
 8000466:	01ab      	lsls	r3, r5, #6
 8000468:	0a5b      	lsrs	r3, r3, #9
 800046a:	e750      	b.n	800030e <__aeabi_fadd+0x4a>
 800046c:	2400      	movs	r4, #0
 800046e:	2201      	movs	r2, #1
 8000470:	464b      	mov	r3, r9
 8000472:	401a      	ands	r2, r3
 8000474:	076b      	lsls	r3, r5, #29
 8000476:	d1ba      	bne.n	80003ee <__aeabi_fadd+0x12a>
 8000478:	e742      	b.n	8000300 <__aeabi_fadd+0x3c>
 800047a:	2f00      	cmp	r7, #0
 800047c:	d13b      	bne.n	80004f6 <__aeabi_fadd+0x232>
 800047e:	3401      	adds	r4, #1
 8000480:	b2e0      	uxtb	r0, r4
 8000482:	2801      	cmp	r0, #1
 8000484:	dd4a      	ble.n	800051c <__aeabi_fadd+0x258>
 8000486:	2cff      	cmp	r4, #255	; 0xff
 8000488:	d0bd      	beq.n	8000406 <__aeabi_fadd+0x142>
 800048a:	2607      	movs	r6, #7
 800048c:	18ed      	adds	r5, r5, r3
 800048e:	086d      	lsrs	r5, r5, #1
 8000490:	402e      	ands	r6, r5
 8000492:	e7a7      	b.n	80003e4 <__aeabi_fadd+0x120>
 8000494:	2307      	movs	r3, #7
 8000496:	4d57      	ldr	r5, [pc, #348]	; (80005f4 <__aeabi_fadd+0x330>)
 8000498:	1a24      	subs	r4, r4, r0
 800049a:	4035      	ands	r5, r6
 800049c:	401e      	ands	r6, r3
 800049e:	e7a1      	b.n	80003e4 <__aeabi_fadd+0x120>
 80004a0:	2c00      	cmp	r4, #0
 80004a2:	d11b      	bne.n	80004dc <__aeabi_fadd+0x218>
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d16e      	bne.n	8000586 <__aeabi_fadd+0x2c2>
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d100      	bne.n	80004ae <__aeabi_fadd+0x1ea>
 80004ac:	e09a      	b.n	80005e4 <__aeabi_fadd+0x320>
 80004ae:	000a      	movs	r2, r1
 80004b0:	001d      	movs	r5, r3
 80004b2:	003c      	movs	r4, r7
 80004b4:	e724      	b.n	8000300 <__aeabi_fadd+0x3c>
 80004b6:	3f01      	subs	r7, #1
 80004b8:	2f00      	cmp	r7, #0
 80004ba:	d100      	bne.n	80004be <__aeabi_fadd+0x1fa>
 80004bc:	e758      	b.n	8000370 <__aeabi_fadd+0xac>
 80004be:	2cff      	cmp	r4, #255	; 0xff
 80004c0:	d000      	beq.n	80004c4 <__aeabi_fadd+0x200>
 80004c2:	e74a      	b.n	800035a <__aeabi_fadd+0x96>
 80004c4:	e7a7      	b.n	8000416 <__aeabi_fadd+0x152>
 80004c6:	1b5e      	subs	r6, r3, r5
 80004c8:	4689      	mov	r9, r1
 80004ca:	e776      	b.n	80003ba <__aeabi_fadd+0xf6>
 80004cc:	2d00      	cmp	r5, #0
 80004ce:	d11c      	bne.n	800050a <__aeabi_fadd+0x246>
 80004d0:	000a      	movs	r2, r1
 80004d2:	28ff      	cmp	r0, #255	; 0xff
 80004d4:	d01f      	beq.n	8000516 <__aeabi_fadd+0x252>
 80004d6:	0004      	movs	r4, r0
 80004d8:	001d      	movs	r5, r3
 80004da:	e711      	b.n	8000300 <__aeabi_fadd+0x3c>
 80004dc:	2d00      	cmp	r5, #0
 80004de:	d15d      	bne.n	800059c <__aeabi_fadd+0x2d8>
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d117      	bne.n	8000514 <__aeabi_fadd+0x250>
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	2200      	movs	r2, #0
 80004e8:	03db      	lsls	r3, r3, #15
 80004ea:	26ff      	movs	r6, #255	; 0xff
 80004ec:	e70f      	b.n	800030e <__aeabi_fadd+0x4a>
 80004ee:	000a      	movs	r2, r1
 80004f0:	26ff      	movs	r6, #255	; 0xff
 80004f2:	2300      	movs	r3, #0
 80004f4:	e70b      	b.n	800030e <__aeabi_fadd+0x4a>
 80004f6:	2c00      	cmp	r4, #0
 80004f8:	d121      	bne.n	800053e <__aeabi_fadd+0x27a>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d166      	bne.n	80005cc <__aeabi_fadd+0x308>
 80004fe:	28ff      	cmp	r0, #255	; 0xff
 8000500:	d1e9      	bne.n	80004d6 <__aeabi_fadd+0x212>
 8000502:	001d      	movs	r5, r3
 8000504:	e787      	b.n	8000416 <__aeabi_fadd+0x152>
 8000506:	2301      	movs	r3, #1
 8000508:	e752      	b.n	80003b0 <__aeabi_fadd+0xec>
 800050a:	1c7a      	adds	r2, r7, #1
 800050c:	d0a7      	beq.n	800045e <__aeabi_fadd+0x19a>
 800050e:	43fa      	mvns	r2, r7
 8000510:	28ff      	cmp	r0, #255	; 0xff
 8000512:	d199      	bne.n	8000448 <__aeabi_fadd+0x184>
 8000514:	000a      	movs	r2, r1
 8000516:	001d      	movs	r5, r3
 8000518:	24ff      	movs	r4, #255	; 0xff
 800051a:	e6f1      	b.n	8000300 <__aeabi_fadd+0x3c>
 800051c:	2e00      	cmp	r6, #0
 800051e:	d121      	bne.n	8000564 <__aeabi_fadd+0x2a0>
 8000520:	2d00      	cmp	r5, #0
 8000522:	d04f      	beq.n	80005c4 <__aeabi_fadd+0x300>
 8000524:	2b00      	cmp	r3, #0
 8000526:	d04c      	beq.n	80005c2 <__aeabi_fadd+0x2fe>
 8000528:	18ed      	adds	r5, r5, r3
 800052a:	016b      	lsls	r3, r5, #5
 800052c:	d59e      	bpl.n	800046c <__aeabi_fadd+0x1a8>
 800052e:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <__aeabi_fadd+0x330>)
 8000530:	3607      	adds	r6, #7
 8000532:	402e      	ands	r6, r5
 8000534:	2401      	movs	r4, #1
 8000536:	401d      	ands	r5, r3
 8000538:	e754      	b.n	80003e4 <__aeabi_fadd+0x120>
 800053a:	2301      	movs	r3, #1
 800053c:	e718      	b.n	8000370 <__aeabi_fadd+0xac>
 800053e:	28ff      	cmp	r0, #255	; 0xff
 8000540:	d0df      	beq.n	8000502 <__aeabi_fadd+0x23e>
 8000542:	2480      	movs	r4, #128	; 0x80
 8000544:	04e4      	lsls	r4, r4, #19
 8000546:	427f      	negs	r7, r7
 8000548:	4325      	orrs	r5, r4
 800054a:	2f1b      	cmp	r7, #27
 800054c:	dc4d      	bgt.n	80005ea <__aeabi_fadd+0x326>
 800054e:	2620      	movs	r6, #32
 8000550:	1bf6      	subs	r6, r6, r7
 8000552:	002c      	movs	r4, r5
 8000554:	40b5      	lsls	r5, r6
 8000556:	40fc      	lsrs	r4, r7
 8000558:	1e6a      	subs	r2, r5, #1
 800055a:	4195      	sbcs	r5, r2
 800055c:	4325      	orrs	r5, r4
 800055e:	18ed      	adds	r5, r5, r3
 8000560:	0004      	movs	r4, r0
 8000562:	e706      	b.n	8000372 <__aeabi_fadd+0xae>
 8000564:	2d00      	cmp	r5, #0
 8000566:	d0cc      	beq.n	8000502 <__aeabi_fadd+0x23e>
 8000568:	2b00      	cmp	r3, #0
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x2aa>
 800056c:	e753      	b.n	8000416 <__aeabi_fadd+0x152>
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	4660      	mov	r0, ip
 8000572:	03c9      	lsls	r1, r1, #15
 8000574:	4208      	tst	r0, r1
 8000576:	d003      	beq.n	8000580 <__aeabi_fadd+0x2bc>
 8000578:	4640      	mov	r0, r8
 800057a:	4208      	tst	r0, r1
 800057c:	d100      	bne.n	8000580 <__aeabi_fadd+0x2bc>
 800057e:	001d      	movs	r5, r3
 8000580:	2101      	movs	r1, #1
 8000582:	4011      	ands	r1, r2
 8000584:	e747      	b.n	8000416 <__aeabi_fadd+0x152>
 8000586:	2b00      	cmp	r3, #0
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x2c8>
 800058a:	e6b9      	b.n	8000300 <__aeabi_fadd+0x3c>
 800058c:	1aea      	subs	r2, r5, r3
 800058e:	0150      	lsls	r0, r2, #5
 8000590:	d525      	bpl.n	80005de <__aeabi_fadd+0x31a>
 8000592:	2607      	movs	r6, #7
 8000594:	1b5d      	subs	r5, r3, r5
 8000596:	402e      	ands	r6, r5
 8000598:	4689      	mov	r9, r1
 800059a:	e723      	b.n	80003e4 <__aeabi_fadd+0x120>
 800059c:	24ff      	movs	r4, #255	; 0xff
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d100      	bne.n	80005a4 <__aeabi_fadd+0x2e0>
 80005a2:	e6ad      	b.n	8000300 <__aeabi_fadd+0x3c>
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	4660      	mov	r0, ip
 80005a8:	03d2      	lsls	r2, r2, #15
 80005aa:	4210      	tst	r0, r2
 80005ac:	d004      	beq.n	80005b8 <__aeabi_fadd+0x2f4>
 80005ae:	4640      	mov	r0, r8
 80005b0:	4210      	tst	r0, r2
 80005b2:	d101      	bne.n	80005b8 <__aeabi_fadd+0x2f4>
 80005b4:	001d      	movs	r5, r3
 80005b6:	4689      	mov	r9, r1
 80005b8:	2201      	movs	r2, #1
 80005ba:	464b      	mov	r3, r9
 80005bc:	24ff      	movs	r4, #255	; 0xff
 80005be:	401a      	ands	r2, r3
 80005c0:	e69e      	b.n	8000300 <__aeabi_fadd+0x3c>
 80005c2:	002b      	movs	r3, r5
 80005c4:	08dd      	lsrs	r5, r3, #3
 80005c6:	000a      	movs	r2, r1
 80005c8:	2400      	movs	r4, #0
 80005ca:	e69d      	b.n	8000308 <__aeabi_fadd+0x44>
 80005cc:	1c7a      	adds	r2, r7, #1
 80005ce:	d0c6      	beq.n	800055e <__aeabi_fadd+0x29a>
 80005d0:	43ff      	mvns	r7, r7
 80005d2:	28ff      	cmp	r0, #255	; 0xff
 80005d4:	d1b9      	bne.n	800054a <__aeabi_fadd+0x286>
 80005d6:	001d      	movs	r5, r3
 80005d8:	e71d      	b.n	8000416 <__aeabi_fadd+0x152>
 80005da:	2501      	movs	r5, #1
 80005dc:	e73f      	b.n	800045e <__aeabi_fadd+0x19a>
 80005de:	1e15      	subs	r5, r2, #0
 80005e0:	d000      	beq.n	80005e4 <__aeabi_fadd+0x320>
 80005e2:	e744      	b.n	800046e <__aeabi_fadd+0x1aa>
 80005e4:	2200      	movs	r2, #0
 80005e6:	2300      	movs	r3, #0
 80005e8:	e691      	b.n	800030e <__aeabi_fadd+0x4a>
 80005ea:	2501      	movs	r5, #1
 80005ec:	e7b7      	b.n	800055e <__aeabi_fadd+0x29a>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	7dffffff 	.word	0x7dffffff
 80005f4:	fbffffff 	.word	0xfbffffff

080005f8 <__aeabi_fdiv>:
 80005f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fa:	4657      	mov	r7, sl
 80005fc:	464e      	mov	r6, r9
 80005fe:	4645      	mov	r5, r8
 8000600:	46de      	mov	lr, fp
 8000602:	0244      	lsls	r4, r0, #9
 8000604:	b5e0      	push	{r5, r6, r7, lr}
 8000606:	0046      	lsls	r6, r0, #1
 8000608:	4688      	mov	r8, r1
 800060a:	0a64      	lsrs	r4, r4, #9
 800060c:	0e36      	lsrs	r6, r6, #24
 800060e:	0fc7      	lsrs	r7, r0, #31
 8000610:	2e00      	cmp	r6, #0
 8000612:	d063      	beq.n	80006dc <__aeabi_fdiv+0xe4>
 8000614:	2eff      	cmp	r6, #255	; 0xff
 8000616:	d024      	beq.n	8000662 <__aeabi_fdiv+0x6a>
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	00e4      	lsls	r4, r4, #3
 800061c:	04db      	lsls	r3, r3, #19
 800061e:	431c      	orrs	r4, r3
 8000620:	2300      	movs	r3, #0
 8000622:	4699      	mov	r9, r3
 8000624:	469b      	mov	fp, r3
 8000626:	3e7f      	subs	r6, #127	; 0x7f
 8000628:	4643      	mov	r3, r8
 800062a:	4642      	mov	r2, r8
 800062c:	025d      	lsls	r5, r3, #9
 800062e:	0fd2      	lsrs	r2, r2, #31
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	0a6d      	lsrs	r5, r5, #9
 8000634:	0e1b      	lsrs	r3, r3, #24
 8000636:	4690      	mov	r8, r2
 8000638:	4692      	mov	sl, r2
 800063a:	d065      	beq.n	8000708 <__aeabi_fdiv+0x110>
 800063c:	2bff      	cmp	r3, #255	; 0xff
 800063e:	d055      	beq.n	80006ec <__aeabi_fdiv+0xf4>
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	2100      	movs	r1, #0
 8000644:	00ed      	lsls	r5, r5, #3
 8000646:	04d2      	lsls	r2, r2, #19
 8000648:	3b7f      	subs	r3, #127	; 0x7f
 800064a:	4315      	orrs	r5, r2
 800064c:	1af6      	subs	r6, r6, r3
 800064e:	4643      	mov	r3, r8
 8000650:	464a      	mov	r2, r9
 8000652:	407b      	eors	r3, r7
 8000654:	2a0f      	cmp	r2, #15
 8000656:	d900      	bls.n	800065a <__aeabi_fdiv+0x62>
 8000658:	e08d      	b.n	8000776 <__aeabi_fdiv+0x17e>
 800065a:	486d      	ldr	r0, [pc, #436]	; (8000810 <__aeabi_fdiv+0x218>)
 800065c:	0092      	lsls	r2, r2, #2
 800065e:	5882      	ldr	r2, [r0, r2]
 8000660:	4697      	mov	pc, r2
 8000662:	2c00      	cmp	r4, #0
 8000664:	d154      	bne.n	8000710 <__aeabi_fdiv+0x118>
 8000666:	2308      	movs	r3, #8
 8000668:	4699      	mov	r9, r3
 800066a:	3b06      	subs	r3, #6
 800066c:	26ff      	movs	r6, #255	; 0xff
 800066e:	469b      	mov	fp, r3
 8000670:	e7da      	b.n	8000628 <__aeabi_fdiv+0x30>
 8000672:	2500      	movs	r5, #0
 8000674:	4653      	mov	r3, sl
 8000676:	2902      	cmp	r1, #2
 8000678:	d01b      	beq.n	80006b2 <__aeabi_fdiv+0xba>
 800067a:	2903      	cmp	r1, #3
 800067c:	d100      	bne.n	8000680 <__aeabi_fdiv+0x88>
 800067e:	e0bf      	b.n	8000800 <__aeabi_fdiv+0x208>
 8000680:	2901      	cmp	r1, #1
 8000682:	d028      	beq.n	80006d6 <__aeabi_fdiv+0xde>
 8000684:	0030      	movs	r0, r6
 8000686:	307f      	adds	r0, #127	; 0x7f
 8000688:	2800      	cmp	r0, #0
 800068a:	dd20      	ble.n	80006ce <__aeabi_fdiv+0xd6>
 800068c:	076a      	lsls	r2, r5, #29
 800068e:	d004      	beq.n	800069a <__aeabi_fdiv+0xa2>
 8000690:	220f      	movs	r2, #15
 8000692:	402a      	ands	r2, r5
 8000694:	2a04      	cmp	r2, #4
 8000696:	d000      	beq.n	800069a <__aeabi_fdiv+0xa2>
 8000698:	3504      	adds	r5, #4
 800069a:	012a      	lsls	r2, r5, #4
 800069c:	d503      	bpl.n	80006a6 <__aeabi_fdiv+0xae>
 800069e:	0030      	movs	r0, r6
 80006a0:	4a5c      	ldr	r2, [pc, #368]	; (8000814 <__aeabi_fdiv+0x21c>)
 80006a2:	3080      	adds	r0, #128	; 0x80
 80006a4:	4015      	ands	r5, r2
 80006a6:	28fe      	cmp	r0, #254	; 0xfe
 80006a8:	dc03      	bgt.n	80006b2 <__aeabi_fdiv+0xba>
 80006aa:	01ac      	lsls	r4, r5, #6
 80006ac:	0a64      	lsrs	r4, r4, #9
 80006ae:	b2c2      	uxtb	r2, r0
 80006b0:	e001      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 80006b2:	22ff      	movs	r2, #255	; 0xff
 80006b4:	2400      	movs	r4, #0
 80006b6:	0264      	lsls	r4, r4, #9
 80006b8:	05d2      	lsls	r2, r2, #23
 80006ba:	0a60      	lsrs	r0, r4, #9
 80006bc:	07db      	lsls	r3, r3, #31
 80006be:	4310      	orrs	r0, r2
 80006c0:	4318      	orrs	r0, r3
 80006c2:	bc3c      	pop	{r2, r3, r4, r5}
 80006c4:	4690      	mov	r8, r2
 80006c6:	4699      	mov	r9, r3
 80006c8:	46a2      	mov	sl, r4
 80006ca:	46ab      	mov	fp, r5
 80006cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006ce:	2201      	movs	r2, #1
 80006d0:	1a10      	subs	r0, r2, r0
 80006d2:	281b      	cmp	r0, #27
 80006d4:	dd7c      	ble.n	80007d0 <__aeabi_fdiv+0x1d8>
 80006d6:	2200      	movs	r2, #0
 80006d8:	2400      	movs	r4, #0
 80006da:	e7ec      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 80006dc:	2c00      	cmp	r4, #0
 80006de:	d11d      	bne.n	800071c <__aeabi_fdiv+0x124>
 80006e0:	2304      	movs	r3, #4
 80006e2:	4699      	mov	r9, r3
 80006e4:	3b03      	subs	r3, #3
 80006e6:	2600      	movs	r6, #0
 80006e8:	469b      	mov	fp, r3
 80006ea:	e79d      	b.n	8000628 <__aeabi_fdiv+0x30>
 80006ec:	3eff      	subs	r6, #255	; 0xff
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d120      	bne.n	8000734 <__aeabi_fdiv+0x13c>
 80006f2:	2102      	movs	r1, #2
 80006f4:	4643      	mov	r3, r8
 80006f6:	464a      	mov	r2, r9
 80006f8:	407b      	eors	r3, r7
 80006fa:	430a      	orrs	r2, r1
 80006fc:	2a0f      	cmp	r2, #15
 80006fe:	d8d8      	bhi.n	80006b2 <__aeabi_fdiv+0xba>
 8000700:	4845      	ldr	r0, [pc, #276]	; (8000818 <__aeabi_fdiv+0x220>)
 8000702:	0092      	lsls	r2, r2, #2
 8000704:	5882      	ldr	r2, [r0, r2]
 8000706:	4697      	mov	pc, r2
 8000708:	2d00      	cmp	r5, #0
 800070a:	d119      	bne.n	8000740 <__aeabi_fdiv+0x148>
 800070c:	2101      	movs	r1, #1
 800070e:	e7f1      	b.n	80006f4 <__aeabi_fdiv+0xfc>
 8000710:	230c      	movs	r3, #12
 8000712:	4699      	mov	r9, r3
 8000714:	3b09      	subs	r3, #9
 8000716:	26ff      	movs	r6, #255	; 0xff
 8000718:	469b      	mov	fp, r3
 800071a:	e785      	b.n	8000628 <__aeabi_fdiv+0x30>
 800071c:	0020      	movs	r0, r4
 800071e:	f000 ffa1 	bl	8001664 <__clzsi2>
 8000722:	2676      	movs	r6, #118	; 0x76
 8000724:	1f43      	subs	r3, r0, #5
 8000726:	409c      	lsls	r4, r3
 8000728:	2300      	movs	r3, #0
 800072a:	4276      	negs	r6, r6
 800072c:	1a36      	subs	r6, r6, r0
 800072e:	4699      	mov	r9, r3
 8000730:	469b      	mov	fp, r3
 8000732:	e779      	b.n	8000628 <__aeabi_fdiv+0x30>
 8000734:	464a      	mov	r2, r9
 8000736:	2303      	movs	r3, #3
 8000738:	431a      	orrs	r2, r3
 800073a:	4691      	mov	r9, r2
 800073c:	2103      	movs	r1, #3
 800073e:	e786      	b.n	800064e <__aeabi_fdiv+0x56>
 8000740:	0028      	movs	r0, r5
 8000742:	f000 ff8f 	bl	8001664 <__clzsi2>
 8000746:	1f43      	subs	r3, r0, #5
 8000748:	1836      	adds	r6, r6, r0
 800074a:	409d      	lsls	r5, r3
 800074c:	3676      	adds	r6, #118	; 0x76
 800074e:	2100      	movs	r1, #0
 8000750:	e77d      	b.n	800064e <__aeabi_fdiv+0x56>
 8000752:	2480      	movs	r4, #128	; 0x80
 8000754:	2300      	movs	r3, #0
 8000756:	03e4      	lsls	r4, r4, #15
 8000758:	22ff      	movs	r2, #255	; 0xff
 800075a:	e7ac      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 800075c:	2500      	movs	r5, #0
 800075e:	2380      	movs	r3, #128	; 0x80
 8000760:	03db      	lsls	r3, r3, #15
 8000762:	421c      	tst	r4, r3
 8000764:	d028      	beq.n	80007b8 <__aeabi_fdiv+0x1c0>
 8000766:	421d      	tst	r5, r3
 8000768:	d126      	bne.n	80007b8 <__aeabi_fdiv+0x1c0>
 800076a:	432b      	orrs	r3, r5
 800076c:	025c      	lsls	r4, r3, #9
 800076e:	0a64      	lsrs	r4, r4, #9
 8000770:	4643      	mov	r3, r8
 8000772:	22ff      	movs	r2, #255	; 0xff
 8000774:	e79f      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 8000776:	0162      	lsls	r2, r4, #5
 8000778:	016c      	lsls	r4, r5, #5
 800077a:	42a2      	cmp	r2, r4
 800077c:	d224      	bcs.n	80007c8 <__aeabi_fdiv+0x1d0>
 800077e:	211b      	movs	r1, #27
 8000780:	2500      	movs	r5, #0
 8000782:	3e01      	subs	r6, #1
 8000784:	2701      	movs	r7, #1
 8000786:	0010      	movs	r0, r2
 8000788:	006d      	lsls	r5, r5, #1
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	2800      	cmp	r0, #0
 800078e:	db01      	blt.n	8000794 <__aeabi_fdiv+0x19c>
 8000790:	4294      	cmp	r4, r2
 8000792:	d801      	bhi.n	8000798 <__aeabi_fdiv+0x1a0>
 8000794:	1b12      	subs	r2, r2, r4
 8000796:	433d      	orrs	r5, r7
 8000798:	3901      	subs	r1, #1
 800079a:	2900      	cmp	r1, #0
 800079c:	d1f3      	bne.n	8000786 <__aeabi_fdiv+0x18e>
 800079e:	0014      	movs	r4, r2
 80007a0:	1e62      	subs	r2, r4, #1
 80007a2:	4194      	sbcs	r4, r2
 80007a4:	4325      	orrs	r5, r4
 80007a6:	e76d      	b.n	8000684 <__aeabi_fdiv+0x8c>
 80007a8:	46ba      	mov	sl, r7
 80007aa:	4659      	mov	r1, fp
 80007ac:	0025      	movs	r5, r4
 80007ae:	4653      	mov	r3, sl
 80007b0:	2902      	cmp	r1, #2
 80007b2:	d000      	beq.n	80007b6 <__aeabi_fdiv+0x1be>
 80007b4:	e761      	b.n	800067a <__aeabi_fdiv+0x82>
 80007b6:	e77c      	b.n	80006b2 <__aeabi_fdiv+0xba>
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	03db      	lsls	r3, r3, #15
 80007bc:	431c      	orrs	r4, r3
 80007be:	0264      	lsls	r4, r4, #9
 80007c0:	0a64      	lsrs	r4, r4, #9
 80007c2:	003b      	movs	r3, r7
 80007c4:	22ff      	movs	r2, #255	; 0xff
 80007c6:	e776      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 80007c8:	1b12      	subs	r2, r2, r4
 80007ca:	211a      	movs	r1, #26
 80007cc:	2501      	movs	r5, #1
 80007ce:	e7d9      	b.n	8000784 <__aeabi_fdiv+0x18c>
 80007d0:	369e      	adds	r6, #158	; 0x9e
 80007d2:	002a      	movs	r2, r5
 80007d4:	40b5      	lsls	r5, r6
 80007d6:	002c      	movs	r4, r5
 80007d8:	40c2      	lsrs	r2, r0
 80007da:	1e65      	subs	r5, r4, #1
 80007dc:	41ac      	sbcs	r4, r5
 80007de:	4314      	orrs	r4, r2
 80007e0:	0762      	lsls	r2, r4, #29
 80007e2:	d004      	beq.n	80007ee <__aeabi_fdiv+0x1f6>
 80007e4:	220f      	movs	r2, #15
 80007e6:	4022      	ands	r2, r4
 80007e8:	2a04      	cmp	r2, #4
 80007ea:	d000      	beq.n	80007ee <__aeabi_fdiv+0x1f6>
 80007ec:	3404      	adds	r4, #4
 80007ee:	0162      	lsls	r2, r4, #5
 80007f0:	d403      	bmi.n	80007fa <__aeabi_fdiv+0x202>
 80007f2:	01a4      	lsls	r4, r4, #6
 80007f4:	0a64      	lsrs	r4, r4, #9
 80007f6:	2200      	movs	r2, #0
 80007f8:	e75d      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 80007fa:	2201      	movs	r2, #1
 80007fc:	2400      	movs	r4, #0
 80007fe:	e75a      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 8000800:	2480      	movs	r4, #128	; 0x80
 8000802:	03e4      	lsls	r4, r4, #15
 8000804:	432c      	orrs	r4, r5
 8000806:	0264      	lsls	r4, r4, #9
 8000808:	0a64      	lsrs	r4, r4, #9
 800080a:	22ff      	movs	r2, #255	; 0xff
 800080c:	e753      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	08005234 	.word	0x08005234
 8000814:	f7ffffff 	.word	0xf7ffffff
 8000818:	08005274 	.word	0x08005274

0800081c <__eqsf2>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	0042      	lsls	r2, r0, #1
 8000820:	024e      	lsls	r6, r1, #9
 8000822:	004c      	lsls	r4, r1, #1
 8000824:	0245      	lsls	r5, r0, #9
 8000826:	0a6d      	lsrs	r5, r5, #9
 8000828:	0e12      	lsrs	r2, r2, #24
 800082a:	0fc3      	lsrs	r3, r0, #31
 800082c:	0a76      	lsrs	r6, r6, #9
 800082e:	0e24      	lsrs	r4, r4, #24
 8000830:	0fc9      	lsrs	r1, r1, #31
 8000832:	2aff      	cmp	r2, #255	; 0xff
 8000834:	d00f      	beq.n	8000856 <__eqsf2+0x3a>
 8000836:	2cff      	cmp	r4, #255	; 0xff
 8000838:	d011      	beq.n	800085e <__eqsf2+0x42>
 800083a:	2001      	movs	r0, #1
 800083c:	42a2      	cmp	r2, r4
 800083e:	d000      	beq.n	8000842 <__eqsf2+0x26>
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	42b5      	cmp	r5, r6
 8000844:	d1fc      	bne.n	8000840 <__eqsf2+0x24>
 8000846:	428b      	cmp	r3, r1
 8000848:	d00d      	beq.n	8000866 <__eqsf2+0x4a>
 800084a:	2a00      	cmp	r2, #0
 800084c:	d1f8      	bne.n	8000840 <__eqsf2+0x24>
 800084e:	0028      	movs	r0, r5
 8000850:	1e45      	subs	r5, r0, #1
 8000852:	41a8      	sbcs	r0, r5
 8000854:	e7f4      	b.n	8000840 <__eqsf2+0x24>
 8000856:	2001      	movs	r0, #1
 8000858:	2d00      	cmp	r5, #0
 800085a:	d1f1      	bne.n	8000840 <__eqsf2+0x24>
 800085c:	e7eb      	b.n	8000836 <__eqsf2+0x1a>
 800085e:	2001      	movs	r0, #1
 8000860:	2e00      	cmp	r6, #0
 8000862:	d1ed      	bne.n	8000840 <__eqsf2+0x24>
 8000864:	e7e9      	b.n	800083a <__eqsf2+0x1e>
 8000866:	2000      	movs	r0, #0
 8000868:	e7ea      	b.n	8000840 <__eqsf2+0x24>
 800086a:	46c0      	nop			; (mov r8, r8)

0800086c <__gesf2>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	004a      	lsls	r2, r1, #1
 8000870:	024e      	lsls	r6, r1, #9
 8000872:	0245      	lsls	r5, r0, #9
 8000874:	0044      	lsls	r4, r0, #1
 8000876:	0a6d      	lsrs	r5, r5, #9
 8000878:	0e24      	lsrs	r4, r4, #24
 800087a:	0fc3      	lsrs	r3, r0, #31
 800087c:	0a76      	lsrs	r6, r6, #9
 800087e:	0e12      	lsrs	r2, r2, #24
 8000880:	0fc9      	lsrs	r1, r1, #31
 8000882:	2cff      	cmp	r4, #255	; 0xff
 8000884:	d015      	beq.n	80008b2 <__gesf2+0x46>
 8000886:	2aff      	cmp	r2, #255	; 0xff
 8000888:	d00e      	beq.n	80008a8 <__gesf2+0x3c>
 800088a:	2c00      	cmp	r4, #0
 800088c:	d115      	bne.n	80008ba <__gesf2+0x4e>
 800088e:	2a00      	cmp	r2, #0
 8000890:	d101      	bne.n	8000896 <__gesf2+0x2a>
 8000892:	2e00      	cmp	r6, #0
 8000894:	d01c      	beq.n	80008d0 <__gesf2+0x64>
 8000896:	2d00      	cmp	r5, #0
 8000898:	d014      	beq.n	80008c4 <__gesf2+0x58>
 800089a:	428b      	cmp	r3, r1
 800089c:	d027      	beq.n	80008ee <__gesf2+0x82>
 800089e:	2002      	movs	r0, #2
 80008a0:	3b01      	subs	r3, #1
 80008a2:	4018      	ands	r0, r3
 80008a4:	3801      	subs	r0, #1
 80008a6:	bd70      	pop	{r4, r5, r6, pc}
 80008a8:	2e00      	cmp	r6, #0
 80008aa:	d0ee      	beq.n	800088a <__gesf2+0x1e>
 80008ac:	2002      	movs	r0, #2
 80008ae:	4240      	negs	r0, r0
 80008b0:	e7f9      	b.n	80008a6 <__gesf2+0x3a>
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	d1fa      	bne.n	80008ac <__gesf2+0x40>
 80008b6:	2aff      	cmp	r2, #255	; 0xff
 80008b8:	d00e      	beq.n	80008d8 <__gesf2+0x6c>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d10e      	bne.n	80008dc <__gesf2+0x70>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d0ed      	beq.n	800089e <__gesf2+0x32>
 80008c2:	e00b      	b.n	80008dc <__gesf2+0x70>
 80008c4:	2301      	movs	r3, #1
 80008c6:	3901      	subs	r1, #1
 80008c8:	4399      	bics	r1, r3
 80008ca:	0008      	movs	r0, r1
 80008cc:	3001      	adds	r0, #1
 80008ce:	e7ea      	b.n	80008a6 <__gesf2+0x3a>
 80008d0:	2000      	movs	r0, #0
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	d0e7      	beq.n	80008a6 <__gesf2+0x3a>
 80008d6:	e7e2      	b.n	800089e <__gesf2+0x32>
 80008d8:	2e00      	cmp	r6, #0
 80008da:	d1e7      	bne.n	80008ac <__gesf2+0x40>
 80008dc:	428b      	cmp	r3, r1
 80008de:	d1de      	bne.n	800089e <__gesf2+0x32>
 80008e0:	4294      	cmp	r4, r2
 80008e2:	dd05      	ble.n	80008f0 <__gesf2+0x84>
 80008e4:	2102      	movs	r1, #2
 80008e6:	1e58      	subs	r0, r3, #1
 80008e8:	4008      	ands	r0, r1
 80008ea:	3801      	subs	r0, #1
 80008ec:	e7db      	b.n	80008a6 <__gesf2+0x3a>
 80008ee:	2400      	movs	r4, #0
 80008f0:	42a2      	cmp	r2, r4
 80008f2:	dc04      	bgt.n	80008fe <__gesf2+0x92>
 80008f4:	42b5      	cmp	r5, r6
 80008f6:	d8d2      	bhi.n	800089e <__gesf2+0x32>
 80008f8:	2000      	movs	r0, #0
 80008fa:	42b5      	cmp	r5, r6
 80008fc:	d2d3      	bcs.n	80008a6 <__gesf2+0x3a>
 80008fe:	1e58      	subs	r0, r3, #1
 8000900:	2301      	movs	r3, #1
 8000902:	4398      	bics	r0, r3
 8000904:	3001      	adds	r0, #1
 8000906:	e7ce      	b.n	80008a6 <__gesf2+0x3a>

08000908 <__lesf2>:
 8000908:	b530      	push	{r4, r5, lr}
 800090a:	0042      	lsls	r2, r0, #1
 800090c:	0244      	lsls	r4, r0, #9
 800090e:	024d      	lsls	r5, r1, #9
 8000910:	0fc3      	lsrs	r3, r0, #31
 8000912:	0048      	lsls	r0, r1, #1
 8000914:	0a64      	lsrs	r4, r4, #9
 8000916:	0e12      	lsrs	r2, r2, #24
 8000918:	0a6d      	lsrs	r5, r5, #9
 800091a:	0e00      	lsrs	r0, r0, #24
 800091c:	0fc9      	lsrs	r1, r1, #31
 800091e:	2aff      	cmp	r2, #255	; 0xff
 8000920:	d012      	beq.n	8000948 <__lesf2+0x40>
 8000922:	28ff      	cmp	r0, #255	; 0xff
 8000924:	d00c      	beq.n	8000940 <__lesf2+0x38>
 8000926:	2a00      	cmp	r2, #0
 8000928:	d112      	bne.n	8000950 <__lesf2+0x48>
 800092a:	2800      	cmp	r0, #0
 800092c:	d119      	bne.n	8000962 <__lesf2+0x5a>
 800092e:	2d00      	cmp	r5, #0
 8000930:	d117      	bne.n	8000962 <__lesf2+0x5a>
 8000932:	2c00      	cmp	r4, #0
 8000934:	d02b      	beq.n	800098e <__lesf2+0x86>
 8000936:	2002      	movs	r0, #2
 8000938:	3b01      	subs	r3, #1
 800093a:	4018      	ands	r0, r3
 800093c:	3801      	subs	r0, #1
 800093e:	e026      	b.n	800098e <__lesf2+0x86>
 8000940:	2d00      	cmp	r5, #0
 8000942:	d0f0      	beq.n	8000926 <__lesf2+0x1e>
 8000944:	2002      	movs	r0, #2
 8000946:	e022      	b.n	800098e <__lesf2+0x86>
 8000948:	2c00      	cmp	r4, #0
 800094a:	d1fb      	bne.n	8000944 <__lesf2+0x3c>
 800094c:	28ff      	cmp	r0, #255	; 0xff
 800094e:	d01f      	beq.n	8000990 <__lesf2+0x88>
 8000950:	2800      	cmp	r0, #0
 8000952:	d11f      	bne.n	8000994 <__lesf2+0x8c>
 8000954:	2d00      	cmp	r5, #0
 8000956:	d11d      	bne.n	8000994 <__lesf2+0x8c>
 8000958:	2002      	movs	r0, #2
 800095a:	3b01      	subs	r3, #1
 800095c:	4018      	ands	r0, r3
 800095e:	3801      	subs	r0, #1
 8000960:	e015      	b.n	800098e <__lesf2+0x86>
 8000962:	2c00      	cmp	r4, #0
 8000964:	d00e      	beq.n	8000984 <__lesf2+0x7c>
 8000966:	428b      	cmp	r3, r1
 8000968:	d1e5      	bne.n	8000936 <__lesf2+0x2e>
 800096a:	2200      	movs	r2, #0
 800096c:	4290      	cmp	r0, r2
 800096e:	dc04      	bgt.n	800097a <__lesf2+0x72>
 8000970:	42ac      	cmp	r4, r5
 8000972:	d8e0      	bhi.n	8000936 <__lesf2+0x2e>
 8000974:	2000      	movs	r0, #0
 8000976:	42ac      	cmp	r4, r5
 8000978:	d209      	bcs.n	800098e <__lesf2+0x86>
 800097a:	1e58      	subs	r0, r3, #1
 800097c:	2301      	movs	r3, #1
 800097e:	4398      	bics	r0, r3
 8000980:	3001      	adds	r0, #1
 8000982:	e004      	b.n	800098e <__lesf2+0x86>
 8000984:	2301      	movs	r3, #1
 8000986:	3901      	subs	r1, #1
 8000988:	4399      	bics	r1, r3
 800098a:	0008      	movs	r0, r1
 800098c:	3001      	adds	r0, #1
 800098e:	bd30      	pop	{r4, r5, pc}
 8000990:	2d00      	cmp	r5, #0
 8000992:	d1d7      	bne.n	8000944 <__lesf2+0x3c>
 8000994:	428b      	cmp	r3, r1
 8000996:	d1ce      	bne.n	8000936 <__lesf2+0x2e>
 8000998:	4282      	cmp	r2, r0
 800099a:	dde7      	ble.n	800096c <__lesf2+0x64>
 800099c:	2102      	movs	r1, #2
 800099e:	1e58      	subs	r0, r3, #1
 80009a0:	4008      	ands	r0, r1
 80009a2:	3801      	subs	r0, #1
 80009a4:	e7f3      	b.n	800098e <__lesf2+0x86>
 80009a6:	46c0      	nop			; (mov r8, r8)

080009a8 <__aeabi_fmul>:
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009aa:	464e      	mov	r6, r9
 80009ac:	4657      	mov	r7, sl
 80009ae:	4645      	mov	r5, r8
 80009b0:	46de      	mov	lr, fp
 80009b2:	b5e0      	push	{r5, r6, r7, lr}
 80009b4:	0243      	lsls	r3, r0, #9
 80009b6:	0a5b      	lsrs	r3, r3, #9
 80009b8:	0045      	lsls	r5, r0, #1
 80009ba:	b083      	sub	sp, #12
 80009bc:	1c0f      	adds	r7, r1, #0
 80009be:	4699      	mov	r9, r3
 80009c0:	0e2d      	lsrs	r5, r5, #24
 80009c2:	0fc6      	lsrs	r6, r0, #31
 80009c4:	2d00      	cmp	r5, #0
 80009c6:	d057      	beq.n	8000a78 <__aeabi_fmul+0xd0>
 80009c8:	2dff      	cmp	r5, #255	; 0xff
 80009ca:	d024      	beq.n	8000a16 <__aeabi_fmul+0x6e>
 80009cc:	2080      	movs	r0, #128	; 0x80
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	04c0      	lsls	r0, r0, #19
 80009d2:	4318      	orrs	r0, r3
 80009d4:	2300      	movs	r3, #0
 80009d6:	4681      	mov	r9, r0
 80009d8:	469a      	mov	sl, r3
 80009da:	469b      	mov	fp, r3
 80009dc:	3d7f      	subs	r5, #127	; 0x7f
 80009de:	027c      	lsls	r4, r7, #9
 80009e0:	007a      	lsls	r2, r7, #1
 80009e2:	0ffb      	lsrs	r3, r7, #31
 80009e4:	0a64      	lsrs	r4, r4, #9
 80009e6:	0e12      	lsrs	r2, r2, #24
 80009e8:	4698      	mov	r8, r3
 80009ea:	d023      	beq.n	8000a34 <__aeabi_fmul+0x8c>
 80009ec:	2aff      	cmp	r2, #255	; 0xff
 80009ee:	d04b      	beq.n	8000a88 <__aeabi_fmul+0xe0>
 80009f0:	00e3      	lsls	r3, r4, #3
 80009f2:	2480      	movs	r4, #128	; 0x80
 80009f4:	2000      	movs	r0, #0
 80009f6:	04e4      	lsls	r4, r4, #19
 80009f8:	3a7f      	subs	r2, #127	; 0x7f
 80009fa:	431c      	orrs	r4, r3
 80009fc:	18ad      	adds	r5, r5, r2
 80009fe:	1c6b      	adds	r3, r5, #1
 8000a00:	4647      	mov	r7, r8
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	4653      	mov	r3, sl
 8000a06:	4077      	eors	r7, r6
 8000a08:	003a      	movs	r2, r7
 8000a0a:	2b0f      	cmp	r3, #15
 8000a0c:	d848      	bhi.n	8000aa0 <__aeabi_fmul+0xf8>
 8000a0e:	497d      	ldr	r1, [pc, #500]	; (8000c04 <__aeabi_fmul+0x25c>)
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	58cb      	ldr	r3, [r1, r3]
 8000a14:	469f      	mov	pc, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fmul+0x74>
 8000a1a:	e085      	b.n	8000b28 <__aeabi_fmul+0x180>
 8000a1c:	3308      	adds	r3, #8
 8000a1e:	469a      	mov	sl, r3
 8000a20:	3b06      	subs	r3, #6
 8000a22:	469b      	mov	fp, r3
 8000a24:	027c      	lsls	r4, r7, #9
 8000a26:	007a      	lsls	r2, r7, #1
 8000a28:	0ffb      	lsrs	r3, r7, #31
 8000a2a:	25ff      	movs	r5, #255	; 0xff
 8000a2c:	0a64      	lsrs	r4, r4, #9
 8000a2e:	0e12      	lsrs	r2, r2, #24
 8000a30:	4698      	mov	r8, r3
 8000a32:	d1db      	bne.n	80009ec <__aeabi_fmul+0x44>
 8000a34:	2c00      	cmp	r4, #0
 8000a36:	d000      	beq.n	8000a3a <__aeabi_fmul+0x92>
 8000a38:	e090      	b.n	8000b5c <__aeabi_fmul+0x1b4>
 8000a3a:	4652      	mov	r2, sl
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	431a      	orrs	r2, r3
 8000a40:	4692      	mov	sl, r2
 8000a42:	2001      	movs	r0, #1
 8000a44:	e7db      	b.n	80009fe <__aeabi_fmul+0x56>
 8000a46:	464c      	mov	r4, r9
 8000a48:	4658      	mov	r0, fp
 8000a4a:	0017      	movs	r7, r2
 8000a4c:	2802      	cmp	r0, #2
 8000a4e:	d024      	beq.n	8000a9a <__aeabi_fmul+0xf2>
 8000a50:	2803      	cmp	r0, #3
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fmul+0xae>
 8000a54:	e0cf      	b.n	8000bf6 <__aeabi_fmul+0x24e>
 8000a56:	2200      	movs	r2, #0
 8000a58:	2300      	movs	r3, #0
 8000a5a:	2801      	cmp	r0, #1
 8000a5c:	d14d      	bne.n	8000afa <__aeabi_fmul+0x152>
 8000a5e:	0258      	lsls	r0, r3, #9
 8000a60:	05d2      	lsls	r2, r2, #23
 8000a62:	0a40      	lsrs	r0, r0, #9
 8000a64:	07ff      	lsls	r7, r7, #31
 8000a66:	4310      	orrs	r0, r2
 8000a68:	4338      	orrs	r0, r7
 8000a6a:	b003      	add	sp, #12
 8000a6c:	bc3c      	pop	{r2, r3, r4, r5}
 8000a6e:	4690      	mov	r8, r2
 8000a70:	4699      	mov	r9, r3
 8000a72:	46a2      	mov	sl, r4
 8000a74:	46ab      	mov	fp, r5
 8000a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d15b      	bne.n	8000b34 <__aeabi_fmul+0x18c>
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	469a      	mov	sl, r3
 8000a80:	3b03      	subs	r3, #3
 8000a82:	2500      	movs	r5, #0
 8000a84:	469b      	mov	fp, r3
 8000a86:	e7aa      	b.n	80009de <__aeabi_fmul+0x36>
 8000a88:	35ff      	adds	r5, #255	; 0xff
 8000a8a:	2c00      	cmp	r4, #0
 8000a8c:	d160      	bne.n	8000b50 <__aeabi_fmul+0x1a8>
 8000a8e:	4652      	mov	r2, sl
 8000a90:	2302      	movs	r3, #2
 8000a92:	431a      	orrs	r2, r3
 8000a94:	4692      	mov	sl, r2
 8000a96:	2002      	movs	r0, #2
 8000a98:	e7b1      	b.n	80009fe <__aeabi_fmul+0x56>
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e7de      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	0c1b      	lsrs	r3, r3, #16
 8000aa4:	469c      	mov	ip, r3
 8000aa6:	464b      	mov	r3, r9
 8000aa8:	0426      	lsls	r6, r4, #16
 8000aaa:	0c36      	lsrs	r6, r6, #16
 8000aac:	0418      	lsls	r0, r3, #16
 8000aae:	4661      	mov	r1, ip
 8000ab0:	0033      	movs	r3, r6
 8000ab2:	0c22      	lsrs	r2, r4, #16
 8000ab4:	4664      	mov	r4, ip
 8000ab6:	0c00      	lsrs	r0, r0, #16
 8000ab8:	4343      	muls	r3, r0
 8000aba:	434e      	muls	r6, r1
 8000abc:	4350      	muls	r0, r2
 8000abe:	4354      	muls	r4, r2
 8000ac0:	1980      	adds	r0, r0, r6
 8000ac2:	0c1a      	lsrs	r2, r3, #16
 8000ac4:	1812      	adds	r2, r2, r0
 8000ac6:	4296      	cmp	r6, r2
 8000ac8:	d903      	bls.n	8000ad2 <__aeabi_fmul+0x12a>
 8000aca:	2180      	movs	r1, #128	; 0x80
 8000acc:	0249      	lsls	r1, r1, #9
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4464      	add	r4, ip
 8000ad2:	041b      	lsls	r3, r3, #16
 8000ad4:	0c1b      	lsrs	r3, r3, #16
 8000ad6:	0410      	lsls	r0, r2, #16
 8000ad8:	18c0      	adds	r0, r0, r3
 8000ada:	0183      	lsls	r3, r0, #6
 8000adc:	1e5e      	subs	r6, r3, #1
 8000ade:	41b3      	sbcs	r3, r6
 8000ae0:	0e80      	lsrs	r0, r0, #26
 8000ae2:	4318      	orrs	r0, r3
 8000ae4:	0c13      	lsrs	r3, r2, #16
 8000ae6:	191b      	adds	r3, r3, r4
 8000ae8:	019b      	lsls	r3, r3, #6
 8000aea:	4303      	orrs	r3, r0
 8000aec:	001c      	movs	r4, r3
 8000aee:	0123      	lsls	r3, r4, #4
 8000af0:	d579      	bpl.n	8000be6 <__aeabi_fmul+0x23e>
 8000af2:	2301      	movs	r3, #1
 8000af4:	0862      	lsrs	r2, r4, #1
 8000af6:	401c      	ands	r4, r3
 8000af8:	4314      	orrs	r4, r2
 8000afa:	9a01      	ldr	r2, [sp, #4]
 8000afc:	327f      	adds	r2, #127	; 0x7f
 8000afe:	2a00      	cmp	r2, #0
 8000b00:	dd4d      	ble.n	8000b9e <__aeabi_fmul+0x1f6>
 8000b02:	0763      	lsls	r3, r4, #29
 8000b04:	d004      	beq.n	8000b10 <__aeabi_fmul+0x168>
 8000b06:	230f      	movs	r3, #15
 8000b08:	4023      	ands	r3, r4
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fmul+0x168>
 8000b0e:	3404      	adds	r4, #4
 8000b10:	0123      	lsls	r3, r4, #4
 8000b12:	d503      	bpl.n	8000b1c <__aeabi_fmul+0x174>
 8000b14:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <__aeabi_fmul+0x260>)
 8000b16:	9a01      	ldr	r2, [sp, #4]
 8000b18:	401c      	ands	r4, r3
 8000b1a:	3280      	adds	r2, #128	; 0x80
 8000b1c:	2afe      	cmp	r2, #254	; 0xfe
 8000b1e:	dcbc      	bgt.n	8000a9a <__aeabi_fmul+0xf2>
 8000b20:	01a3      	lsls	r3, r4, #6
 8000b22:	0a5b      	lsrs	r3, r3, #9
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	e79a      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000b28:	230c      	movs	r3, #12
 8000b2a:	469a      	mov	sl, r3
 8000b2c:	3b09      	subs	r3, #9
 8000b2e:	25ff      	movs	r5, #255	; 0xff
 8000b30:	469b      	mov	fp, r3
 8000b32:	e754      	b.n	80009de <__aeabi_fmul+0x36>
 8000b34:	0018      	movs	r0, r3
 8000b36:	f000 fd95 	bl	8001664 <__clzsi2>
 8000b3a:	464a      	mov	r2, r9
 8000b3c:	1f43      	subs	r3, r0, #5
 8000b3e:	2576      	movs	r5, #118	; 0x76
 8000b40:	409a      	lsls	r2, r3
 8000b42:	2300      	movs	r3, #0
 8000b44:	426d      	negs	r5, r5
 8000b46:	4691      	mov	r9, r2
 8000b48:	1a2d      	subs	r5, r5, r0
 8000b4a:	469a      	mov	sl, r3
 8000b4c:	469b      	mov	fp, r3
 8000b4e:	e746      	b.n	80009de <__aeabi_fmul+0x36>
 8000b50:	4652      	mov	r2, sl
 8000b52:	2303      	movs	r3, #3
 8000b54:	431a      	orrs	r2, r3
 8000b56:	4692      	mov	sl, r2
 8000b58:	2003      	movs	r0, #3
 8000b5a:	e750      	b.n	80009fe <__aeabi_fmul+0x56>
 8000b5c:	0020      	movs	r0, r4
 8000b5e:	f000 fd81 	bl	8001664 <__clzsi2>
 8000b62:	1f43      	subs	r3, r0, #5
 8000b64:	1a2d      	subs	r5, r5, r0
 8000b66:	409c      	lsls	r4, r3
 8000b68:	3d76      	subs	r5, #118	; 0x76
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	e747      	b.n	80009fe <__aeabi_fmul+0x56>
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	2700      	movs	r7, #0
 8000b72:	03db      	lsls	r3, r3, #15
 8000b74:	22ff      	movs	r2, #255	; 0xff
 8000b76:	e772      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000b78:	4642      	mov	r2, r8
 8000b7a:	e766      	b.n	8000a4a <__aeabi_fmul+0xa2>
 8000b7c:	464c      	mov	r4, r9
 8000b7e:	0032      	movs	r2, r6
 8000b80:	4658      	mov	r0, fp
 8000b82:	e762      	b.n	8000a4a <__aeabi_fmul+0xa2>
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	464a      	mov	r2, r9
 8000b88:	03db      	lsls	r3, r3, #15
 8000b8a:	421a      	tst	r2, r3
 8000b8c:	d022      	beq.n	8000bd4 <__aeabi_fmul+0x22c>
 8000b8e:	421c      	tst	r4, r3
 8000b90:	d120      	bne.n	8000bd4 <__aeabi_fmul+0x22c>
 8000b92:	4323      	orrs	r3, r4
 8000b94:	025b      	lsls	r3, r3, #9
 8000b96:	0a5b      	lsrs	r3, r3, #9
 8000b98:	4647      	mov	r7, r8
 8000b9a:	22ff      	movs	r2, #255	; 0xff
 8000b9c:	e75f      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	1a9a      	subs	r2, r3, r2
 8000ba2:	2a1b      	cmp	r2, #27
 8000ba4:	dc21      	bgt.n	8000bea <__aeabi_fmul+0x242>
 8000ba6:	0023      	movs	r3, r4
 8000ba8:	9901      	ldr	r1, [sp, #4]
 8000baa:	40d3      	lsrs	r3, r2
 8000bac:	319e      	adds	r1, #158	; 0x9e
 8000bae:	408c      	lsls	r4, r1
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	0023      	movs	r3, r4
 8000bb4:	1e5c      	subs	r4, r3, #1
 8000bb6:	41a3      	sbcs	r3, r4
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	075a      	lsls	r2, r3, #29
 8000bbc:	d004      	beq.n	8000bc8 <__aeabi_fmul+0x220>
 8000bbe:	220f      	movs	r2, #15
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	2a04      	cmp	r2, #4
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_fmul+0x220>
 8000bc6:	3304      	adds	r3, #4
 8000bc8:	015a      	lsls	r2, r3, #5
 8000bca:	d411      	bmi.n	8000bf0 <__aeabi_fmul+0x248>
 8000bcc:	019b      	lsls	r3, r3, #6
 8000bce:	0a5b      	lsrs	r3, r3, #9
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	e744      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	464a      	mov	r2, r9
 8000bd8:	03db      	lsls	r3, r3, #15
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	025b      	lsls	r3, r3, #9
 8000bde:	0a5b      	lsrs	r3, r3, #9
 8000be0:	0037      	movs	r7, r6
 8000be2:	22ff      	movs	r2, #255	; 0xff
 8000be4:	e73b      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000be6:	9501      	str	r5, [sp, #4]
 8000be8:	e787      	b.n	8000afa <__aeabi_fmul+0x152>
 8000bea:	2200      	movs	r2, #0
 8000bec:	2300      	movs	r3, #0
 8000bee:	e736      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e733      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	03db      	lsls	r3, r3, #15
 8000bfa:	4323      	orrs	r3, r4
 8000bfc:	025b      	lsls	r3, r3, #9
 8000bfe:	0a5b      	lsrs	r3, r3, #9
 8000c00:	22ff      	movs	r2, #255	; 0xff
 8000c02:	e72c      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000c04:	080052b4 	.word	0x080052b4
 8000c08:	f7ffffff 	.word	0xf7ffffff

08000c0c <__aeabi_fsub>:
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	4647      	mov	r7, r8
 8000c10:	46ce      	mov	lr, r9
 8000c12:	0044      	lsls	r4, r0, #1
 8000c14:	0fc2      	lsrs	r2, r0, #31
 8000c16:	b580      	push	{r7, lr}
 8000c18:	0247      	lsls	r7, r0, #9
 8000c1a:	0248      	lsls	r0, r1, #9
 8000c1c:	0a40      	lsrs	r0, r0, #9
 8000c1e:	4684      	mov	ip, r0
 8000c20:	4666      	mov	r6, ip
 8000c22:	0048      	lsls	r0, r1, #1
 8000c24:	0a7f      	lsrs	r7, r7, #9
 8000c26:	0e24      	lsrs	r4, r4, #24
 8000c28:	00f6      	lsls	r6, r6, #3
 8000c2a:	0025      	movs	r5, r4
 8000c2c:	4690      	mov	r8, r2
 8000c2e:	00fb      	lsls	r3, r7, #3
 8000c30:	0e00      	lsrs	r0, r0, #24
 8000c32:	0fc9      	lsrs	r1, r1, #31
 8000c34:	46b1      	mov	r9, r6
 8000c36:	28ff      	cmp	r0, #255	; 0xff
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fsub+0x30>
 8000c3a:	e085      	b.n	8000d48 <__aeabi_fsub+0x13c>
 8000c3c:	2601      	movs	r6, #1
 8000c3e:	4071      	eors	r1, r6
 8000c40:	1a26      	subs	r6, r4, r0
 8000c42:	4291      	cmp	r1, r2
 8000c44:	d057      	beq.n	8000cf6 <__aeabi_fsub+0xea>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	dd43      	ble.n	8000cd2 <__aeabi_fsub+0xc6>
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	d000      	beq.n	8000c50 <__aeabi_fsub+0x44>
 8000c4e:	e07f      	b.n	8000d50 <__aeabi_fsub+0x144>
 8000c50:	4649      	mov	r1, r9
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fsub+0x4c>
 8000c56:	e0aa      	b.n	8000dae <__aeabi_fsub+0x1a2>
 8000c58:	3e01      	subs	r6, #1
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_fsub+0x54>
 8000c5e:	e0f7      	b.n	8000e50 <__aeabi_fsub+0x244>
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	015a      	lsls	r2, r3, #5
 8000c64:	d400      	bmi.n	8000c68 <__aeabi_fsub+0x5c>
 8000c66:	e08b      	b.n	8000d80 <__aeabi_fsub+0x174>
 8000c68:	019b      	lsls	r3, r3, #6
 8000c6a:	099c      	lsrs	r4, r3, #6
 8000c6c:	0020      	movs	r0, r4
 8000c6e:	f000 fcf9 	bl	8001664 <__clzsi2>
 8000c72:	3805      	subs	r0, #5
 8000c74:	4084      	lsls	r4, r0
 8000c76:	4285      	cmp	r5, r0
 8000c78:	dd00      	ble.n	8000c7c <__aeabi_fsub+0x70>
 8000c7a:	e0d3      	b.n	8000e24 <__aeabi_fsub+0x218>
 8000c7c:	1b45      	subs	r5, r0, r5
 8000c7e:	0023      	movs	r3, r4
 8000c80:	2020      	movs	r0, #32
 8000c82:	3501      	adds	r5, #1
 8000c84:	40eb      	lsrs	r3, r5
 8000c86:	1b45      	subs	r5, r0, r5
 8000c88:	40ac      	lsls	r4, r5
 8000c8a:	1e62      	subs	r2, r4, #1
 8000c8c:	4194      	sbcs	r4, r2
 8000c8e:	4323      	orrs	r3, r4
 8000c90:	2407      	movs	r4, #7
 8000c92:	2500      	movs	r5, #0
 8000c94:	401c      	ands	r4, r3
 8000c96:	2201      	movs	r2, #1
 8000c98:	4641      	mov	r1, r8
 8000c9a:	400a      	ands	r2, r1
 8000c9c:	2c00      	cmp	r4, #0
 8000c9e:	d004      	beq.n	8000caa <__aeabi_fsub+0x9e>
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	4019      	ands	r1, r3
 8000ca4:	2904      	cmp	r1, #4
 8000ca6:	d000      	beq.n	8000caa <__aeabi_fsub+0x9e>
 8000ca8:	3304      	adds	r3, #4
 8000caa:	0159      	lsls	r1, r3, #5
 8000cac:	d400      	bmi.n	8000cb0 <__aeabi_fsub+0xa4>
 8000cae:	e080      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000cb0:	3501      	adds	r5, #1
 8000cb2:	b2ec      	uxtb	r4, r5
 8000cb4:	2dff      	cmp	r5, #255	; 0xff
 8000cb6:	d000      	beq.n	8000cba <__aeabi_fsub+0xae>
 8000cb8:	e0a3      	b.n	8000e02 <__aeabi_fsub+0x1f6>
 8000cba:	24ff      	movs	r4, #255	; 0xff
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	025b      	lsls	r3, r3, #9
 8000cc0:	05e4      	lsls	r4, r4, #23
 8000cc2:	0a58      	lsrs	r0, r3, #9
 8000cc4:	07d2      	lsls	r2, r2, #31
 8000cc6:	4320      	orrs	r0, r4
 8000cc8:	4310      	orrs	r0, r2
 8000cca:	bc0c      	pop	{r2, r3}
 8000ccc:	4690      	mov	r8, r2
 8000cce:	4699      	mov	r9, r3
 8000cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d174      	bne.n	8000dc0 <__aeabi_fsub+0x1b4>
 8000cd6:	1c60      	adds	r0, r4, #1
 8000cd8:	b2c0      	uxtb	r0, r0
 8000cda:	2801      	cmp	r0, #1
 8000cdc:	dc00      	bgt.n	8000ce0 <__aeabi_fsub+0xd4>
 8000cde:	e0a7      	b.n	8000e30 <__aeabi_fsub+0x224>
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	1a9c      	subs	r4, r3, r2
 8000ce4:	0162      	lsls	r2, r4, #5
 8000ce6:	d500      	bpl.n	8000cea <__aeabi_fsub+0xde>
 8000ce8:	e0b6      	b.n	8000e58 <__aeabi_fsub+0x24c>
 8000cea:	2c00      	cmp	r4, #0
 8000cec:	d1be      	bne.n	8000c6c <__aeabi_fsub+0x60>
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2400      	movs	r4, #0
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e7e3      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	dc00      	bgt.n	8000cfc <__aeabi_fsub+0xf0>
 8000cfa:	e085      	b.n	8000e08 <__aeabi_fsub+0x1fc>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d046      	beq.n	8000d8e <__aeabi_fsub+0x182>
 8000d00:	2cff      	cmp	r4, #255	; 0xff
 8000d02:	d049      	beq.n	8000d98 <__aeabi_fsub+0x18c>
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	4648      	mov	r0, r9
 8000d08:	04d2      	lsls	r2, r2, #19
 8000d0a:	4310      	orrs	r0, r2
 8000d0c:	4681      	mov	r9, r0
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2e1b      	cmp	r6, #27
 8000d12:	dc09      	bgt.n	8000d28 <__aeabi_fsub+0x11c>
 8000d14:	2020      	movs	r0, #32
 8000d16:	464c      	mov	r4, r9
 8000d18:	1b80      	subs	r0, r0, r6
 8000d1a:	4084      	lsls	r4, r0
 8000d1c:	464a      	mov	r2, r9
 8000d1e:	0020      	movs	r0, r4
 8000d20:	40f2      	lsrs	r2, r6
 8000d22:	1e44      	subs	r4, r0, #1
 8000d24:	41a0      	sbcs	r0, r4
 8000d26:	4302      	orrs	r2, r0
 8000d28:	189b      	adds	r3, r3, r2
 8000d2a:	015a      	lsls	r2, r3, #5
 8000d2c:	d528      	bpl.n	8000d80 <__aeabi_fsub+0x174>
 8000d2e:	3501      	adds	r5, #1
 8000d30:	2dff      	cmp	r5, #255	; 0xff
 8000d32:	d100      	bne.n	8000d36 <__aeabi_fsub+0x12a>
 8000d34:	e0a8      	b.n	8000e88 <__aeabi_fsub+0x27c>
 8000d36:	2201      	movs	r2, #1
 8000d38:	2407      	movs	r4, #7
 8000d3a:	4994      	ldr	r1, [pc, #592]	; (8000f8c <__aeabi_fsub+0x380>)
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	085b      	lsrs	r3, r3, #1
 8000d40:	400b      	ands	r3, r1
 8000d42:	4313      	orrs	r3, r2
 8000d44:	401c      	ands	r4, r3
 8000d46:	e7a6      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000d48:	2e00      	cmp	r6, #0
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_fsub+0x142>
 8000d4c:	e778      	b.n	8000c40 <__aeabi_fsub+0x34>
 8000d4e:	e775      	b.n	8000c3c <__aeabi_fsub+0x30>
 8000d50:	2cff      	cmp	r4, #255	; 0xff
 8000d52:	d054      	beq.n	8000dfe <__aeabi_fsub+0x1f2>
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	4649      	mov	r1, r9
 8000d58:	04d2      	lsls	r2, r2, #19
 8000d5a:	4311      	orrs	r1, r2
 8000d5c:	4689      	mov	r9, r1
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2e1b      	cmp	r6, #27
 8000d62:	dc09      	bgt.n	8000d78 <__aeabi_fsub+0x16c>
 8000d64:	2120      	movs	r1, #32
 8000d66:	4648      	mov	r0, r9
 8000d68:	1b89      	subs	r1, r1, r6
 8000d6a:	4088      	lsls	r0, r1
 8000d6c:	464a      	mov	r2, r9
 8000d6e:	0001      	movs	r1, r0
 8000d70:	40f2      	lsrs	r2, r6
 8000d72:	1e48      	subs	r0, r1, #1
 8000d74:	4181      	sbcs	r1, r0
 8000d76:	430a      	orrs	r2, r1
 8000d78:	1a9b      	subs	r3, r3, r2
 8000d7a:	015a      	lsls	r2, r3, #5
 8000d7c:	d500      	bpl.n	8000d80 <__aeabi_fsub+0x174>
 8000d7e:	e773      	b.n	8000c68 <__aeabi_fsub+0x5c>
 8000d80:	2201      	movs	r2, #1
 8000d82:	4641      	mov	r1, r8
 8000d84:	400a      	ands	r2, r1
 8000d86:	0759      	lsls	r1, r3, #29
 8000d88:	d000      	beq.n	8000d8c <__aeabi_fsub+0x180>
 8000d8a:	e789      	b.n	8000ca0 <__aeabi_fsub+0x94>
 8000d8c:	e011      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000d8e:	4648      	mov	r0, r9
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d158      	bne.n	8000e46 <__aeabi_fsub+0x23a>
 8000d94:	2cff      	cmp	r4, #255	; 0xff
 8000d96:	d10c      	bne.n	8000db2 <__aeabi_fsub+0x1a6>
 8000d98:	08db      	lsrs	r3, r3, #3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_fsub+0x194>
 8000d9e:	e78c      	b.n	8000cba <__aeabi_fsub+0xae>
 8000da0:	2080      	movs	r0, #128	; 0x80
 8000da2:	03c0      	lsls	r0, r0, #15
 8000da4:	4303      	orrs	r3, r0
 8000da6:	025b      	lsls	r3, r3, #9
 8000da8:	0a5b      	lsrs	r3, r3, #9
 8000daa:	24ff      	movs	r4, #255	; 0xff
 8000dac:	e787      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000dae:	2cff      	cmp	r4, #255	; 0xff
 8000db0:	d025      	beq.n	8000dfe <__aeabi_fsub+0x1f2>
 8000db2:	08db      	lsrs	r3, r3, #3
 8000db4:	2dff      	cmp	r5, #255	; 0xff
 8000db6:	d0f0      	beq.n	8000d9a <__aeabi_fsub+0x18e>
 8000db8:	025b      	lsls	r3, r3, #9
 8000dba:	0a5b      	lsrs	r3, r3, #9
 8000dbc:	b2ec      	uxtb	r4, r5
 8000dbe:	e77e      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000dc0:	2c00      	cmp	r4, #0
 8000dc2:	d04d      	beq.n	8000e60 <__aeabi_fsub+0x254>
 8000dc4:	28ff      	cmp	r0, #255	; 0xff
 8000dc6:	d018      	beq.n	8000dfa <__aeabi_fsub+0x1ee>
 8000dc8:	2480      	movs	r4, #128	; 0x80
 8000dca:	04e4      	lsls	r4, r4, #19
 8000dcc:	4272      	negs	r2, r6
 8000dce:	4323      	orrs	r3, r4
 8000dd0:	2a1b      	cmp	r2, #27
 8000dd2:	dd00      	ble.n	8000dd6 <__aeabi_fsub+0x1ca>
 8000dd4:	e0c4      	b.n	8000f60 <__aeabi_fsub+0x354>
 8000dd6:	001c      	movs	r4, r3
 8000dd8:	2520      	movs	r5, #32
 8000dda:	40d4      	lsrs	r4, r2
 8000ddc:	1aaa      	subs	r2, r5, r2
 8000dde:	4093      	lsls	r3, r2
 8000de0:	1e5a      	subs	r2, r3, #1
 8000de2:	4193      	sbcs	r3, r2
 8000de4:	4323      	orrs	r3, r4
 8000de6:	464a      	mov	r2, r9
 8000de8:	0005      	movs	r5, r0
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	4688      	mov	r8, r1
 8000dee:	e738      	b.n	8000c62 <__aeabi_fsub+0x56>
 8000df0:	1c72      	adds	r2, r6, #1
 8000df2:	d0f8      	beq.n	8000de6 <__aeabi_fsub+0x1da>
 8000df4:	43f2      	mvns	r2, r6
 8000df6:	28ff      	cmp	r0, #255	; 0xff
 8000df8:	d1ea      	bne.n	8000dd0 <__aeabi_fsub+0x1c4>
 8000dfa:	000a      	movs	r2, r1
 8000dfc:	464b      	mov	r3, r9
 8000dfe:	25ff      	movs	r5, #255	; 0xff
 8000e00:	e7d7      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e02:	019b      	lsls	r3, r3, #6
 8000e04:	0a5b      	lsrs	r3, r3, #9
 8000e06:	e75a      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d141      	bne.n	8000e90 <__aeabi_fsub+0x284>
 8000e0c:	1c65      	adds	r5, r4, #1
 8000e0e:	b2e9      	uxtb	r1, r5
 8000e10:	2901      	cmp	r1, #1
 8000e12:	dd45      	ble.n	8000ea0 <__aeabi_fsub+0x294>
 8000e14:	2dff      	cmp	r5, #255	; 0xff
 8000e16:	d100      	bne.n	8000e1a <__aeabi_fsub+0x20e>
 8000e18:	e74f      	b.n	8000cba <__aeabi_fsub+0xae>
 8000e1a:	2407      	movs	r4, #7
 8000e1c:	444b      	add	r3, r9
 8000e1e:	085b      	lsrs	r3, r3, #1
 8000e20:	401c      	ands	r4, r3
 8000e22:	e738      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000e24:	2207      	movs	r2, #7
 8000e26:	4b5a      	ldr	r3, [pc, #360]	; (8000f90 <__aeabi_fsub+0x384>)
 8000e28:	1a2d      	subs	r5, r5, r0
 8000e2a:	4023      	ands	r3, r4
 8000e2c:	4014      	ands	r4, r2
 8000e2e:	e732      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000e30:	2c00      	cmp	r4, #0
 8000e32:	d11d      	bne.n	8000e70 <__aeabi_fsub+0x264>
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d17a      	bne.n	8000f2e <__aeabi_fsub+0x322>
 8000e38:	464b      	mov	r3, r9
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_fsub+0x234>
 8000e3e:	e091      	b.n	8000f64 <__aeabi_fsub+0x358>
 8000e40:	000a      	movs	r2, r1
 8000e42:	2500      	movs	r5, #0
 8000e44:	e7b5      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e46:	3e01      	subs	r6, #1
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d119      	bne.n	8000e80 <__aeabi_fsub+0x274>
 8000e4c:	444b      	add	r3, r9
 8000e4e:	e76c      	b.n	8000d2a <__aeabi_fsub+0x11e>
 8000e50:	2cff      	cmp	r4, #255	; 0xff
 8000e52:	d184      	bne.n	8000d5e <__aeabi_fsub+0x152>
 8000e54:	25ff      	movs	r5, #255	; 0xff
 8000e56:	e7ac      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e58:	464a      	mov	r2, r9
 8000e5a:	4688      	mov	r8, r1
 8000e5c:	1ad4      	subs	r4, r2, r3
 8000e5e:	e705      	b.n	8000c6c <__aeabi_fsub+0x60>
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1c5      	bne.n	8000df0 <__aeabi_fsub+0x1e4>
 8000e64:	000a      	movs	r2, r1
 8000e66:	28ff      	cmp	r0, #255	; 0xff
 8000e68:	d0c8      	beq.n	8000dfc <__aeabi_fsub+0x1f0>
 8000e6a:	0005      	movs	r5, r0
 8000e6c:	464b      	mov	r3, r9
 8000e6e:	e7a0      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d149      	bne.n	8000f08 <__aeabi_fsub+0x2fc>
 8000e74:	464b      	mov	r3, r9
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d077      	beq.n	8000f6a <__aeabi_fsub+0x35e>
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	25ff      	movs	r5, #255	; 0xff
 8000e7e:	e798      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e80:	2cff      	cmp	r4, #255	; 0xff
 8000e82:	d000      	beq.n	8000e86 <__aeabi_fsub+0x27a>
 8000e84:	e743      	b.n	8000d0e <__aeabi_fsub+0x102>
 8000e86:	e787      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000e88:	000a      	movs	r2, r1
 8000e8a:	24ff      	movs	r4, #255	; 0xff
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e716      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000e90:	2c00      	cmp	r4, #0
 8000e92:	d115      	bne.n	8000ec0 <__aeabi_fsub+0x2b4>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d157      	bne.n	8000f48 <__aeabi_fsub+0x33c>
 8000e98:	28ff      	cmp	r0, #255	; 0xff
 8000e9a:	d1e6      	bne.n	8000e6a <__aeabi_fsub+0x25e>
 8000e9c:	464b      	mov	r3, r9
 8000e9e:	e77b      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000ea0:	2c00      	cmp	r4, #0
 8000ea2:	d120      	bne.n	8000ee6 <__aeabi_fsub+0x2da>
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d057      	beq.n	8000f58 <__aeabi_fsub+0x34c>
 8000ea8:	4649      	mov	r1, r9
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d053      	beq.n	8000f56 <__aeabi_fsub+0x34a>
 8000eae:	444b      	add	r3, r9
 8000eb0:	015a      	lsls	r2, r3, #5
 8000eb2:	d568      	bpl.n	8000f86 <__aeabi_fsub+0x37a>
 8000eb4:	2407      	movs	r4, #7
 8000eb6:	4a36      	ldr	r2, [pc, #216]	; (8000f90 <__aeabi_fsub+0x384>)
 8000eb8:	401c      	ands	r4, r3
 8000eba:	2501      	movs	r5, #1
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	e6ea      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000ec0:	28ff      	cmp	r0, #255	; 0xff
 8000ec2:	d0eb      	beq.n	8000e9c <__aeabi_fsub+0x290>
 8000ec4:	2280      	movs	r2, #128	; 0x80
 8000ec6:	04d2      	lsls	r2, r2, #19
 8000ec8:	4276      	negs	r6, r6
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	2e1b      	cmp	r6, #27
 8000ece:	dc53      	bgt.n	8000f78 <__aeabi_fsub+0x36c>
 8000ed0:	2520      	movs	r5, #32
 8000ed2:	1bad      	subs	r5, r5, r6
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	40ab      	lsls	r3, r5
 8000ed8:	40f2      	lsrs	r2, r6
 8000eda:	1e5c      	subs	r4, r3, #1
 8000edc:	41a3      	sbcs	r3, r4
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	444b      	add	r3, r9
 8000ee2:	0005      	movs	r5, r0
 8000ee4:	e721      	b.n	8000d2a <__aeabi_fsub+0x11e>
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0d8      	beq.n	8000e9c <__aeabi_fsub+0x290>
 8000eea:	4649      	mov	r1, r9
 8000eec:	2900      	cmp	r1, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_fsub+0x2e6>
 8000ef0:	e752      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	03c9      	lsls	r1, r1, #15
 8000ef6:	420f      	tst	r7, r1
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fsub+0x2f0>
 8000efa:	e74d      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000efc:	4660      	mov	r0, ip
 8000efe:	4208      	tst	r0, r1
 8000f00:	d000      	beq.n	8000f04 <__aeabi_fsub+0x2f8>
 8000f02:	e749      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000f04:	464b      	mov	r3, r9
 8000f06:	e747      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000f08:	4648      	mov	r0, r9
 8000f0a:	25ff      	movs	r5, #255	; 0xff
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x306>
 8000f10:	e74f      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	03d2      	lsls	r2, r2, #15
 8000f16:	4217      	tst	r7, r2
 8000f18:	d004      	beq.n	8000f24 <__aeabi_fsub+0x318>
 8000f1a:	4660      	mov	r0, ip
 8000f1c:	4210      	tst	r0, r2
 8000f1e:	d101      	bne.n	8000f24 <__aeabi_fsub+0x318>
 8000f20:	464b      	mov	r3, r9
 8000f22:	4688      	mov	r8, r1
 8000f24:	2201      	movs	r2, #1
 8000f26:	4641      	mov	r1, r8
 8000f28:	25ff      	movs	r5, #255	; 0xff
 8000f2a:	400a      	ands	r2, r1
 8000f2c:	e741      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000f2e:	4648      	mov	r0, r9
 8000f30:	2800      	cmp	r0, #0
 8000f32:	d01f      	beq.n	8000f74 <__aeabi_fsub+0x368>
 8000f34:	1a1a      	subs	r2, r3, r0
 8000f36:	0150      	lsls	r0, r2, #5
 8000f38:	d520      	bpl.n	8000f7c <__aeabi_fsub+0x370>
 8000f3a:	464a      	mov	r2, r9
 8000f3c:	2407      	movs	r4, #7
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	401c      	ands	r4, r3
 8000f42:	4688      	mov	r8, r1
 8000f44:	2500      	movs	r5, #0
 8000f46:	e6a6      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000f48:	1c74      	adds	r4, r6, #1
 8000f4a:	d0c9      	beq.n	8000ee0 <__aeabi_fsub+0x2d4>
 8000f4c:	43f6      	mvns	r6, r6
 8000f4e:	28ff      	cmp	r0, #255	; 0xff
 8000f50:	d1bc      	bne.n	8000ecc <__aeabi_fsub+0x2c0>
 8000f52:	464b      	mov	r3, r9
 8000f54:	e720      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000f56:	4699      	mov	r9, r3
 8000f58:	464b      	mov	r3, r9
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	08db      	lsrs	r3, r3, #3
 8000f5e:	e72b      	b.n	8000db8 <__aeabi_fsub+0x1ac>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e740      	b.n	8000de6 <__aeabi_fsub+0x1da>
 8000f64:	2200      	movs	r2, #0
 8000f66:	2300      	movs	r3, #0
 8000f68:	e6a9      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	03db      	lsls	r3, r3, #15
 8000f70:	24ff      	movs	r4, #255	; 0xff
 8000f72:	e6a4      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000f74:	2500      	movs	r5, #0
 8000f76:	e71c      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e7b1      	b.n	8000ee0 <__aeabi_fsub+0x2d4>
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	d0f1      	beq.n	8000f64 <__aeabi_fsub+0x358>
 8000f80:	0013      	movs	r3, r2
 8000f82:	2500      	movs	r5, #0
 8000f84:	e6fc      	b.n	8000d80 <__aeabi_fsub+0x174>
 8000f86:	2500      	movs	r5, #0
 8000f88:	e6fa      	b.n	8000d80 <__aeabi_fsub+0x174>
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	7dffffff 	.word	0x7dffffff
 8000f90:	fbffffff 	.word	0xfbffffff

08000f94 <__aeabi_f2iz>:
 8000f94:	0241      	lsls	r1, r0, #9
 8000f96:	0042      	lsls	r2, r0, #1
 8000f98:	0fc3      	lsrs	r3, r0, #31
 8000f9a:	0a49      	lsrs	r1, r1, #9
 8000f9c:	0e12      	lsrs	r2, r2, #24
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	2a7e      	cmp	r2, #126	; 0x7e
 8000fa2:	d90d      	bls.n	8000fc0 <__aeabi_f2iz+0x2c>
 8000fa4:	2a9d      	cmp	r2, #157	; 0x9d
 8000fa6:	d80c      	bhi.n	8000fc2 <__aeabi_f2iz+0x2e>
 8000fa8:	2080      	movs	r0, #128	; 0x80
 8000faa:	0400      	lsls	r0, r0, #16
 8000fac:	4301      	orrs	r1, r0
 8000fae:	2a95      	cmp	r2, #149	; 0x95
 8000fb0:	dc0a      	bgt.n	8000fc8 <__aeabi_f2iz+0x34>
 8000fb2:	2096      	movs	r0, #150	; 0x96
 8000fb4:	1a82      	subs	r2, r0, r2
 8000fb6:	40d1      	lsrs	r1, r2
 8000fb8:	4248      	negs	r0, r1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_f2iz+0x2c>
 8000fbe:	0008      	movs	r0, r1
 8000fc0:	4770      	bx	lr
 8000fc2:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <__aeabi_f2iz+0x3c>)
 8000fc4:	1898      	adds	r0, r3, r2
 8000fc6:	e7fb      	b.n	8000fc0 <__aeabi_f2iz+0x2c>
 8000fc8:	3a96      	subs	r2, #150	; 0x96
 8000fca:	4091      	lsls	r1, r2
 8000fcc:	e7f4      	b.n	8000fb8 <__aeabi_f2iz+0x24>
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	7fffffff 	.word	0x7fffffff

08000fd4 <__aeabi_dmul>:
 8000fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd6:	4657      	mov	r7, sl
 8000fd8:	46de      	mov	lr, fp
 8000fda:	464e      	mov	r6, r9
 8000fdc:	4645      	mov	r5, r8
 8000fde:	b5e0      	push	{r5, r6, r7, lr}
 8000fe0:	4683      	mov	fp, r0
 8000fe2:	0006      	movs	r6, r0
 8000fe4:	030f      	lsls	r7, r1, #12
 8000fe6:	0048      	lsls	r0, r1, #1
 8000fe8:	b087      	sub	sp, #28
 8000fea:	4692      	mov	sl, r2
 8000fec:	001d      	movs	r5, r3
 8000fee:	0b3f      	lsrs	r7, r7, #12
 8000ff0:	0d40      	lsrs	r0, r0, #21
 8000ff2:	0fcc      	lsrs	r4, r1, #31
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_dmul+0x26>
 8000ff8:	e06f      	b.n	80010da <__aeabi_dmul+0x106>
 8000ffa:	4bde      	ldr	r3, [pc, #888]	; (8001374 <__aeabi_dmul+0x3a0>)
 8000ffc:	4298      	cmp	r0, r3
 8000ffe:	d038      	beq.n	8001072 <__aeabi_dmul+0x9e>
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	00ff      	lsls	r7, r7, #3
 8001004:	041b      	lsls	r3, r3, #16
 8001006:	431f      	orrs	r7, r3
 8001008:	0f73      	lsrs	r3, r6, #29
 800100a:	433b      	orrs	r3, r7
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	4bda      	ldr	r3, [pc, #872]	; (8001378 <__aeabi_dmul+0x3a4>)
 8001010:	2700      	movs	r7, #0
 8001012:	4699      	mov	r9, r3
 8001014:	2300      	movs	r3, #0
 8001016:	469b      	mov	fp, r3
 8001018:	00f6      	lsls	r6, r6, #3
 800101a:	4481      	add	r9, r0
 800101c:	032b      	lsls	r3, r5, #12
 800101e:	0069      	lsls	r1, r5, #1
 8001020:	0b1b      	lsrs	r3, r3, #12
 8001022:	4652      	mov	r2, sl
 8001024:	4698      	mov	r8, r3
 8001026:	0d49      	lsrs	r1, r1, #21
 8001028:	0fed      	lsrs	r5, r5, #31
 800102a:	2900      	cmp	r1, #0
 800102c:	d100      	bne.n	8001030 <__aeabi_dmul+0x5c>
 800102e:	e085      	b.n	800113c <__aeabi_dmul+0x168>
 8001030:	4bd0      	ldr	r3, [pc, #832]	; (8001374 <__aeabi_dmul+0x3a0>)
 8001032:	4299      	cmp	r1, r3
 8001034:	d100      	bne.n	8001038 <__aeabi_dmul+0x64>
 8001036:	e073      	b.n	8001120 <__aeabi_dmul+0x14c>
 8001038:	4643      	mov	r3, r8
 800103a:	00da      	lsls	r2, r3, #3
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	041b      	lsls	r3, r3, #16
 8001040:	4313      	orrs	r3, r2
 8001042:	4652      	mov	r2, sl
 8001044:	48cc      	ldr	r0, [pc, #816]	; (8001378 <__aeabi_dmul+0x3a4>)
 8001046:	0f52      	lsrs	r2, r2, #29
 8001048:	4684      	mov	ip, r0
 800104a:	4313      	orrs	r3, r2
 800104c:	4652      	mov	r2, sl
 800104e:	2000      	movs	r0, #0
 8001050:	4461      	add	r1, ip
 8001052:	00d2      	lsls	r2, r2, #3
 8001054:	4489      	add	r9, r1
 8001056:	0021      	movs	r1, r4
 8001058:	4069      	eors	r1, r5
 800105a:	9100      	str	r1, [sp, #0]
 800105c:	468c      	mov	ip, r1
 800105e:	2101      	movs	r1, #1
 8001060:	4449      	add	r1, r9
 8001062:	468a      	mov	sl, r1
 8001064:	2f0f      	cmp	r7, #15
 8001066:	d900      	bls.n	800106a <__aeabi_dmul+0x96>
 8001068:	e090      	b.n	800118c <__aeabi_dmul+0x1b8>
 800106a:	49c4      	ldr	r1, [pc, #784]	; (800137c <__aeabi_dmul+0x3a8>)
 800106c:	00bf      	lsls	r7, r7, #2
 800106e:	59cf      	ldr	r7, [r1, r7]
 8001070:	46bf      	mov	pc, r7
 8001072:	465b      	mov	r3, fp
 8001074:	433b      	orrs	r3, r7
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	d000      	beq.n	800107c <__aeabi_dmul+0xa8>
 800107a:	e16a      	b.n	8001352 <__aeabi_dmul+0x37e>
 800107c:	2302      	movs	r3, #2
 800107e:	2708      	movs	r7, #8
 8001080:	2600      	movs	r6, #0
 8001082:	4681      	mov	r9, r0
 8001084:	469b      	mov	fp, r3
 8001086:	e7c9      	b.n	800101c <__aeabi_dmul+0x48>
 8001088:	0032      	movs	r2, r6
 800108a:	4658      	mov	r0, fp
 800108c:	9b01      	ldr	r3, [sp, #4]
 800108e:	4661      	mov	r1, ip
 8001090:	9100      	str	r1, [sp, #0]
 8001092:	2802      	cmp	r0, #2
 8001094:	d100      	bne.n	8001098 <__aeabi_dmul+0xc4>
 8001096:	e075      	b.n	8001184 <__aeabi_dmul+0x1b0>
 8001098:	2803      	cmp	r0, #3
 800109a:	d100      	bne.n	800109e <__aeabi_dmul+0xca>
 800109c:	e1fe      	b.n	800149c <__aeabi_dmul+0x4c8>
 800109e:	2801      	cmp	r0, #1
 80010a0:	d000      	beq.n	80010a4 <__aeabi_dmul+0xd0>
 80010a2:	e12c      	b.n	80012fe <__aeabi_dmul+0x32a>
 80010a4:	2300      	movs	r3, #0
 80010a6:	2700      	movs	r7, #0
 80010a8:	2600      	movs	r6, #0
 80010aa:	2500      	movs	r5, #0
 80010ac:	033f      	lsls	r7, r7, #12
 80010ae:	0d2a      	lsrs	r2, r5, #20
 80010b0:	0b3f      	lsrs	r7, r7, #12
 80010b2:	48b3      	ldr	r0, [pc, #716]	; (8001380 <__aeabi_dmul+0x3ac>)
 80010b4:	0512      	lsls	r2, r2, #20
 80010b6:	433a      	orrs	r2, r7
 80010b8:	4002      	ands	r2, r0
 80010ba:	051b      	lsls	r3, r3, #20
 80010bc:	4313      	orrs	r3, r2
 80010be:	9a00      	ldr	r2, [sp, #0]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	07d1      	lsls	r1, r2, #31
 80010c4:	085b      	lsrs	r3, r3, #1
 80010c6:	430b      	orrs	r3, r1
 80010c8:	0030      	movs	r0, r6
 80010ca:	0019      	movs	r1, r3
 80010cc:	b007      	add	sp, #28
 80010ce:	bc3c      	pop	{r2, r3, r4, r5}
 80010d0:	4690      	mov	r8, r2
 80010d2:	4699      	mov	r9, r3
 80010d4:	46a2      	mov	sl, r4
 80010d6:	46ab      	mov	fp, r5
 80010d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010da:	465b      	mov	r3, fp
 80010dc:	433b      	orrs	r3, r7
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	d100      	bne.n	80010e4 <__aeabi_dmul+0x110>
 80010e2:	e12f      	b.n	8001344 <__aeabi_dmul+0x370>
 80010e4:	2f00      	cmp	r7, #0
 80010e6:	d100      	bne.n	80010ea <__aeabi_dmul+0x116>
 80010e8:	e1a5      	b.n	8001436 <__aeabi_dmul+0x462>
 80010ea:	0038      	movs	r0, r7
 80010ec:	f000 faba 	bl	8001664 <__clzsi2>
 80010f0:	0003      	movs	r3, r0
 80010f2:	3b0b      	subs	r3, #11
 80010f4:	2b1c      	cmp	r3, #28
 80010f6:	dd00      	ble.n	80010fa <__aeabi_dmul+0x126>
 80010f8:	e196      	b.n	8001428 <__aeabi_dmul+0x454>
 80010fa:	221d      	movs	r2, #29
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	465a      	mov	r2, fp
 8001100:	0001      	movs	r1, r0
 8001102:	40da      	lsrs	r2, r3
 8001104:	465e      	mov	r6, fp
 8001106:	3908      	subs	r1, #8
 8001108:	408f      	lsls	r7, r1
 800110a:	0013      	movs	r3, r2
 800110c:	408e      	lsls	r6, r1
 800110e:	433b      	orrs	r3, r7
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	4b9c      	ldr	r3, [pc, #624]	; (8001384 <__aeabi_dmul+0x3b0>)
 8001114:	2700      	movs	r7, #0
 8001116:	1a1b      	subs	r3, r3, r0
 8001118:	4699      	mov	r9, r3
 800111a:	2300      	movs	r3, #0
 800111c:	469b      	mov	fp, r3
 800111e:	e77d      	b.n	800101c <__aeabi_dmul+0x48>
 8001120:	4641      	mov	r1, r8
 8001122:	4653      	mov	r3, sl
 8001124:	430b      	orrs	r3, r1
 8001126:	4993      	ldr	r1, [pc, #588]	; (8001374 <__aeabi_dmul+0x3a0>)
 8001128:	468c      	mov	ip, r1
 800112a:	44e1      	add	r9, ip
 800112c:	2b00      	cmp	r3, #0
 800112e:	d000      	beq.n	8001132 <__aeabi_dmul+0x15e>
 8001130:	e11a      	b.n	8001368 <__aeabi_dmul+0x394>
 8001132:	2202      	movs	r2, #2
 8001134:	2002      	movs	r0, #2
 8001136:	4317      	orrs	r7, r2
 8001138:	2200      	movs	r2, #0
 800113a:	e78c      	b.n	8001056 <__aeabi_dmul+0x82>
 800113c:	4313      	orrs	r3, r2
 800113e:	d100      	bne.n	8001142 <__aeabi_dmul+0x16e>
 8001140:	e10d      	b.n	800135e <__aeabi_dmul+0x38a>
 8001142:	4643      	mov	r3, r8
 8001144:	2b00      	cmp	r3, #0
 8001146:	d100      	bne.n	800114a <__aeabi_dmul+0x176>
 8001148:	e181      	b.n	800144e <__aeabi_dmul+0x47a>
 800114a:	4640      	mov	r0, r8
 800114c:	f000 fa8a 	bl	8001664 <__clzsi2>
 8001150:	0002      	movs	r2, r0
 8001152:	3a0b      	subs	r2, #11
 8001154:	2a1c      	cmp	r2, #28
 8001156:	dd00      	ble.n	800115a <__aeabi_dmul+0x186>
 8001158:	e172      	b.n	8001440 <__aeabi_dmul+0x46c>
 800115a:	0001      	movs	r1, r0
 800115c:	4643      	mov	r3, r8
 800115e:	3908      	subs	r1, #8
 8001160:	408b      	lsls	r3, r1
 8001162:	4698      	mov	r8, r3
 8001164:	231d      	movs	r3, #29
 8001166:	1a9a      	subs	r2, r3, r2
 8001168:	4653      	mov	r3, sl
 800116a:	40d3      	lsrs	r3, r2
 800116c:	001a      	movs	r2, r3
 800116e:	4643      	mov	r3, r8
 8001170:	4313      	orrs	r3, r2
 8001172:	4652      	mov	r2, sl
 8001174:	408a      	lsls	r2, r1
 8001176:	4649      	mov	r1, r9
 8001178:	1a08      	subs	r0, r1, r0
 800117a:	4982      	ldr	r1, [pc, #520]	; (8001384 <__aeabi_dmul+0x3b0>)
 800117c:	4689      	mov	r9, r1
 800117e:	4481      	add	r9, r0
 8001180:	2000      	movs	r0, #0
 8001182:	e768      	b.n	8001056 <__aeabi_dmul+0x82>
 8001184:	4b7b      	ldr	r3, [pc, #492]	; (8001374 <__aeabi_dmul+0x3a0>)
 8001186:	2700      	movs	r7, #0
 8001188:	2600      	movs	r6, #0
 800118a:	e78e      	b.n	80010aa <__aeabi_dmul+0xd6>
 800118c:	0c14      	lsrs	r4, r2, #16
 800118e:	0412      	lsls	r2, r2, #16
 8001190:	0c12      	lsrs	r2, r2, #16
 8001192:	0011      	movs	r1, r2
 8001194:	0c37      	lsrs	r7, r6, #16
 8001196:	0436      	lsls	r6, r6, #16
 8001198:	0c35      	lsrs	r5, r6, #16
 800119a:	4379      	muls	r1, r7
 800119c:	0028      	movs	r0, r5
 800119e:	468c      	mov	ip, r1
 80011a0:	002e      	movs	r6, r5
 80011a2:	4360      	muls	r0, r4
 80011a4:	4460      	add	r0, ip
 80011a6:	4683      	mov	fp, r0
 80011a8:	4356      	muls	r6, r2
 80011aa:	0021      	movs	r1, r4
 80011ac:	0c30      	lsrs	r0, r6, #16
 80011ae:	4680      	mov	r8, r0
 80011b0:	4658      	mov	r0, fp
 80011b2:	4379      	muls	r1, r7
 80011b4:	4440      	add	r0, r8
 80011b6:	9102      	str	r1, [sp, #8]
 80011b8:	4584      	cmp	ip, r0
 80011ba:	d906      	bls.n	80011ca <__aeabi_dmul+0x1f6>
 80011bc:	4688      	mov	r8, r1
 80011be:	2180      	movs	r1, #128	; 0x80
 80011c0:	0249      	lsls	r1, r1, #9
 80011c2:	468c      	mov	ip, r1
 80011c4:	44e0      	add	r8, ip
 80011c6:	4641      	mov	r1, r8
 80011c8:	9102      	str	r1, [sp, #8]
 80011ca:	0436      	lsls	r6, r6, #16
 80011cc:	0c01      	lsrs	r1, r0, #16
 80011ce:	0c36      	lsrs	r6, r6, #16
 80011d0:	0400      	lsls	r0, r0, #16
 80011d2:	468b      	mov	fp, r1
 80011d4:	1981      	adds	r1, r0, r6
 80011d6:	0c1e      	lsrs	r6, r3, #16
 80011d8:	041b      	lsls	r3, r3, #16
 80011da:	0c1b      	lsrs	r3, r3, #16
 80011dc:	9103      	str	r1, [sp, #12]
 80011de:	0019      	movs	r1, r3
 80011e0:	4379      	muls	r1, r7
 80011e2:	468c      	mov	ip, r1
 80011e4:	0028      	movs	r0, r5
 80011e6:	4375      	muls	r5, r6
 80011e8:	4465      	add	r5, ip
 80011ea:	46a8      	mov	r8, r5
 80011ec:	4358      	muls	r0, r3
 80011ee:	0c05      	lsrs	r5, r0, #16
 80011f0:	4445      	add	r5, r8
 80011f2:	4377      	muls	r7, r6
 80011f4:	42a9      	cmp	r1, r5
 80011f6:	d903      	bls.n	8001200 <__aeabi_dmul+0x22c>
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	0249      	lsls	r1, r1, #9
 80011fc:	468c      	mov	ip, r1
 80011fe:	4467      	add	r7, ip
 8001200:	0c29      	lsrs	r1, r5, #16
 8001202:	468c      	mov	ip, r1
 8001204:	0039      	movs	r1, r7
 8001206:	0400      	lsls	r0, r0, #16
 8001208:	0c00      	lsrs	r0, r0, #16
 800120a:	042d      	lsls	r5, r5, #16
 800120c:	182d      	adds	r5, r5, r0
 800120e:	4461      	add	r1, ip
 8001210:	44ab      	add	fp, r5
 8001212:	9105      	str	r1, [sp, #20]
 8001214:	4659      	mov	r1, fp
 8001216:	9104      	str	r1, [sp, #16]
 8001218:	9901      	ldr	r1, [sp, #4]
 800121a:	040f      	lsls	r7, r1, #16
 800121c:	0c3f      	lsrs	r7, r7, #16
 800121e:	0c08      	lsrs	r0, r1, #16
 8001220:	0039      	movs	r1, r7
 8001222:	4351      	muls	r1, r2
 8001224:	4342      	muls	r2, r0
 8001226:	4690      	mov	r8, r2
 8001228:	0002      	movs	r2, r0
 800122a:	468c      	mov	ip, r1
 800122c:	0c09      	lsrs	r1, r1, #16
 800122e:	468b      	mov	fp, r1
 8001230:	4362      	muls	r2, r4
 8001232:	437c      	muls	r4, r7
 8001234:	4444      	add	r4, r8
 8001236:	445c      	add	r4, fp
 8001238:	45a0      	cmp	r8, r4
 800123a:	d903      	bls.n	8001244 <__aeabi_dmul+0x270>
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	0249      	lsls	r1, r1, #9
 8001240:	4688      	mov	r8, r1
 8001242:	4442      	add	r2, r8
 8001244:	0c21      	lsrs	r1, r4, #16
 8001246:	4688      	mov	r8, r1
 8001248:	4661      	mov	r1, ip
 800124a:	0409      	lsls	r1, r1, #16
 800124c:	0c09      	lsrs	r1, r1, #16
 800124e:	468c      	mov	ip, r1
 8001250:	0039      	movs	r1, r7
 8001252:	4359      	muls	r1, r3
 8001254:	4343      	muls	r3, r0
 8001256:	4370      	muls	r0, r6
 8001258:	437e      	muls	r6, r7
 800125a:	0c0f      	lsrs	r7, r1, #16
 800125c:	18f6      	adds	r6, r6, r3
 800125e:	0424      	lsls	r4, r4, #16
 8001260:	19be      	adds	r6, r7, r6
 8001262:	4464      	add	r4, ip
 8001264:	4442      	add	r2, r8
 8001266:	468c      	mov	ip, r1
 8001268:	42b3      	cmp	r3, r6
 800126a:	d903      	bls.n	8001274 <__aeabi_dmul+0x2a0>
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	025b      	lsls	r3, r3, #9
 8001270:	4698      	mov	r8, r3
 8001272:	4440      	add	r0, r8
 8001274:	9b02      	ldr	r3, [sp, #8]
 8001276:	4661      	mov	r1, ip
 8001278:	4698      	mov	r8, r3
 800127a:	9b04      	ldr	r3, [sp, #16]
 800127c:	0437      	lsls	r7, r6, #16
 800127e:	4443      	add	r3, r8
 8001280:	469b      	mov	fp, r3
 8001282:	45ab      	cmp	fp, r5
 8001284:	41ad      	sbcs	r5, r5
 8001286:	426b      	negs	r3, r5
 8001288:	040d      	lsls	r5, r1, #16
 800128a:	9905      	ldr	r1, [sp, #20]
 800128c:	0c2d      	lsrs	r5, r5, #16
 800128e:	468c      	mov	ip, r1
 8001290:	197f      	adds	r7, r7, r5
 8001292:	4467      	add	r7, ip
 8001294:	18fd      	adds	r5, r7, r3
 8001296:	46a8      	mov	r8, r5
 8001298:	465d      	mov	r5, fp
 800129a:	192d      	adds	r5, r5, r4
 800129c:	42a5      	cmp	r5, r4
 800129e:	41a4      	sbcs	r4, r4
 80012a0:	4693      	mov	fp, r2
 80012a2:	4264      	negs	r4, r4
 80012a4:	46a4      	mov	ip, r4
 80012a6:	44c3      	add	fp, r8
 80012a8:	44dc      	add	ip, fp
 80012aa:	428f      	cmp	r7, r1
 80012ac:	41bf      	sbcs	r7, r7
 80012ae:	4598      	cmp	r8, r3
 80012b0:	419b      	sbcs	r3, r3
 80012b2:	4593      	cmp	fp, r2
 80012b4:	4192      	sbcs	r2, r2
 80012b6:	45a4      	cmp	ip, r4
 80012b8:	41a4      	sbcs	r4, r4
 80012ba:	425b      	negs	r3, r3
 80012bc:	427f      	negs	r7, r7
 80012be:	431f      	orrs	r7, r3
 80012c0:	0c36      	lsrs	r6, r6, #16
 80012c2:	4252      	negs	r2, r2
 80012c4:	4264      	negs	r4, r4
 80012c6:	19bf      	adds	r7, r7, r6
 80012c8:	4322      	orrs	r2, r4
 80012ca:	18bf      	adds	r7, r7, r2
 80012cc:	4662      	mov	r2, ip
 80012ce:	1838      	adds	r0, r7, r0
 80012d0:	0243      	lsls	r3, r0, #9
 80012d2:	0dd2      	lsrs	r2, r2, #23
 80012d4:	9903      	ldr	r1, [sp, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	026a      	lsls	r2, r5, #9
 80012da:	430a      	orrs	r2, r1
 80012dc:	1e50      	subs	r0, r2, #1
 80012de:	4182      	sbcs	r2, r0
 80012e0:	4661      	mov	r1, ip
 80012e2:	0ded      	lsrs	r5, r5, #23
 80012e4:	432a      	orrs	r2, r5
 80012e6:	024e      	lsls	r6, r1, #9
 80012e8:	4332      	orrs	r2, r6
 80012ea:	01d9      	lsls	r1, r3, #7
 80012ec:	d400      	bmi.n	80012f0 <__aeabi_dmul+0x31c>
 80012ee:	e0b3      	b.n	8001458 <__aeabi_dmul+0x484>
 80012f0:	2601      	movs	r6, #1
 80012f2:	0850      	lsrs	r0, r2, #1
 80012f4:	4032      	ands	r2, r6
 80012f6:	4302      	orrs	r2, r0
 80012f8:	07de      	lsls	r6, r3, #31
 80012fa:	4332      	orrs	r2, r6
 80012fc:	085b      	lsrs	r3, r3, #1
 80012fe:	4c22      	ldr	r4, [pc, #136]	; (8001388 <__aeabi_dmul+0x3b4>)
 8001300:	4454      	add	r4, sl
 8001302:	2c00      	cmp	r4, #0
 8001304:	dd62      	ble.n	80013cc <__aeabi_dmul+0x3f8>
 8001306:	0751      	lsls	r1, r2, #29
 8001308:	d009      	beq.n	800131e <__aeabi_dmul+0x34a>
 800130a:	200f      	movs	r0, #15
 800130c:	4010      	ands	r0, r2
 800130e:	2804      	cmp	r0, #4
 8001310:	d005      	beq.n	800131e <__aeabi_dmul+0x34a>
 8001312:	1d10      	adds	r0, r2, #4
 8001314:	4290      	cmp	r0, r2
 8001316:	4192      	sbcs	r2, r2
 8001318:	4252      	negs	r2, r2
 800131a:	189b      	adds	r3, r3, r2
 800131c:	0002      	movs	r2, r0
 800131e:	01d9      	lsls	r1, r3, #7
 8001320:	d504      	bpl.n	800132c <__aeabi_dmul+0x358>
 8001322:	2480      	movs	r4, #128	; 0x80
 8001324:	4819      	ldr	r0, [pc, #100]	; (800138c <__aeabi_dmul+0x3b8>)
 8001326:	00e4      	lsls	r4, r4, #3
 8001328:	4003      	ands	r3, r0
 800132a:	4454      	add	r4, sl
 800132c:	4818      	ldr	r0, [pc, #96]	; (8001390 <__aeabi_dmul+0x3bc>)
 800132e:	4284      	cmp	r4, r0
 8001330:	dd00      	ble.n	8001334 <__aeabi_dmul+0x360>
 8001332:	e727      	b.n	8001184 <__aeabi_dmul+0x1b0>
 8001334:	075e      	lsls	r6, r3, #29
 8001336:	025b      	lsls	r3, r3, #9
 8001338:	08d2      	lsrs	r2, r2, #3
 800133a:	0b1f      	lsrs	r7, r3, #12
 800133c:	0563      	lsls	r3, r4, #21
 800133e:	4316      	orrs	r6, r2
 8001340:	0d5b      	lsrs	r3, r3, #21
 8001342:	e6b2      	b.n	80010aa <__aeabi_dmul+0xd6>
 8001344:	2300      	movs	r3, #0
 8001346:	4699      	mov	r9, r3
 8001348:	3301      	adds	r3, #1
 800134a:	2704      	movs	r7, #4
 800134c:	2600      	movs	r6, #0
 800134e:	469b      	mov	fp, r3
 8001350:	e664      	b.n	800101c <__aeabi_dmul+0x48>
 8001352:	2303      	movs	r3, #3
 8001354:	9701      	str	r7, [sp, #4]
 8001356:	4681      	mov	r9, r0
 8001358:	270c      	movs	r7, #12
 800135a:	469b      	mov	fp, r3
 800135c:	e65e      	b.n	800101c <__aeabi_dmul+0x48>
 800135e:	2201      	movs	r2, #1
 8001360:	2001      	movs	r0, #1
 8001362:	4317      	orrs	r7, r2
 8001364:	2200      	movs	r2, #0
 8001366:	e676      	b.n	8001056 <__aeabi_dmul+0x82>
 8001368:	2303      	movs	r3, #3
 800136a:	2003      	movs	r0, #3
 800136c:	431f      	orrs	r7, r3
 800136e:	4643      	mov	r3, r8
 8001370:	e671      	b.n	8001056 <__aeabi_dmul+0x82>
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	000007ff 	.word	0x000007ff
 8001378:	fffffc01 	.word	0xfffffc01
 800137c:	080052f4 	.word	0x080052f4
 8001380:	800fffff 	.word	0x800fffff
 8001384:	fffffc0d 	.word	0xfffffc0d
 8001388:	000003ff 	.word	0x000003ff
 800138c:	feffffff 	.word	0xfeffffff
 8001390:	000007fe 	.word	0x000007fe
 8001394:	2300      	movs	r3, #0
 8001396:	2780      	movs	r7, #128	; 0x80
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	033f      	lsls	r7, r7, #12
 800139c:	2600      	movs	r6, #0
 800139e:	4b43      	ldr	r3, [pc, #268]	; (80014ac <__aeabi_dmul+0x4d8>)
 80013a0:	e683      	b.n	80010aa <__aeabi_dmul+0xd6>
 80013a2:	9b01      	ldr	r3, [sp, #4]
 80013a4:	0032      	movs	r2, r6
 80013a6:	46a4      	mov	ip, r4
 80013a8:	4658      	mov	r0, fp
 80013aa:	e670      	b.n	800108e <__aeabi_dmul+0xba>
 80013ac:	46ac      	mov	ip, r5
 80013ae:	e66e      	b.n	800108e <__aeabi_dmul+0xba>
 80013b0:	2780      	movs	r7, #128	; 0x80
 80013b2:	9901      	ldr	r1, [sp, #4]
 80013b4:	033f      	lsls	r7, r7, #12
 80013b6:	4239      	tst	r1, r7
 80013b8:	d02d      	beq.n	8001416 <__aeabi_dmul+0x442>
 80013ba:	423b      	tst	r3, r7
 80013bc:	d12b      	bne.n	8001416 <__aeabi_dmul+0x442>
 80013be:	431f      	orrs	r7, r3
 80013c0:	033f      	lsls	r7, r7, #12
 80013c2:	0b3f      	lsrs	r7, r7, #12
 80013c4:	9500      	str	r5, [sp, #0]
 80013c6:	0016      	movs	r6, r2
 80013c8:	4b38      	ldr	r3, [pc, #224]	; (80014ac <__aeabi_dmul+0x4d8>)
 80013ca:	e66e      	b.n	80010aa <__aeabi_dmul+0xd6>
 80013cc:	2501      	movs	r5, #1
 80013ce:	1b2d      	subs	r5, r5, r4
 80013d0:	2d38      	cmp	r5, #56	; 0x38
 80013d2:	dd00      	ble.n	80013d6 <__aeabi_dmul+0x402>
 80013d4:	e666      	b.n	80010a4 <__aeabi_dmul+0xd0>
 80013d6:	2d1f      	cmp	r5, #31
 80013d8:	dc40      	bgt.n	800145c <__aeabi_dmul+0x488>
 80013da:	4835      	ldr	r0, [pc, #212]	; (80014b0 <__aeabi_dmul+0x4dc>)
 80013dc:	001c      	movs	r4, r3
 80013de:	4450      	add	r0, sl
 80013e0:	0016      	movs	r6, r2
 80013e2:	4082      	lsls	r2, r0
 80013e4:	4084      	lsls	r4, r0
 80013e6:	40ee      	lsrs	r6, r5
 80013e8:	1e50      	subs	r0, r2, #1
 80013ea:	4182      	sbcs	r2, r0
 80013ec:	4334      	orrs	r4, r6
 80013ee:	4314      	orrs	r4, r2
 80013f0:	40eb      	lsrs	r3, r5
 80013f2:	0762      	lsls	r2, r4, #29
 80013f4:	d009      	beq.n	800140a <__aeabi_dmul+0x436>
 80013f6:	220f      	movs	r2, #15
 80013f8:	4022      	ands	r2, r4
 80013fa:	2a04      	cmp	r2, #4
 80013fc:	d005      	beq.n	800140a <__aeabi_dmul+0x436>
 80013fe:	0022      	movs	r2, r4
 8001400:	1d14      	adds	r4, r2, #4
 8001402:	4294      	cmp	r4, r2
 8001404:	4180      	sbcs	r0, r0
 8001406:	4240      	negs	r0, r0
 8001408:	181b      	adds	r3, r3, r0
 800140a:	021a      	lsls	r2, r3, #8
 800140c:	d53e      	bpl.n	800148c <__aeabi_dmul+0x4b8>
 800140e:	2301      	movs	r3, #1
 8001410:	2700      	movs	r7, #0
 8001412:	2600      	movs	r6, #0
 8001414:	e649      	b.n	80010aa <__aeabi_dmul+0xd6>
 8001416:	2780      	movs	r7, #128	; 0x80
 8001418:	9b01      	ldr	r3, [sp, #4]
 800141a:	033f      	lsls	r7, r7, #12
 800141c:	431f      	orrs	r7, r3
 800141e:	033f      	lsls	r7, r7, #12
 8001420:	0b3f      	lsrs	r7, r7, #12
 8001422:	9400      	str	r4, [sp, #0]
 8001424:	4b21      	ldr	r3, [pc, #132]	; (80014ac <__aeabi_dmul+0x4d8>)
 8001426:	e640      	b.n	80010aa <__aeabi_dmul+0xd6>
 8001428:	0003      	movs	r3, r0
 800142a:	465a      	mov	r2, fp
 800142c:	3b28      	subs	r3, #40	; 0x28
 800142e:	409a      	lsls	r2, r3
 8001430:	2600      	movs	r6, #0
 8001432:	9201      	str	r2, [sp, #4]
 8001434:	e66d      	b.n	8001112 <__aeabi_dmul+0x13e>
 8001436:	4658      	mov	r0, fp
 8001438:	f000 f914 	bl	8001664 <__clzsi2>
 800143c:	3020      	adds	r0, #32
 800143e:	e657      	b.n	80010f0 <__aeabi_dmul+0x11c>
 8001440:	0003      	movs	r3, r0
 8001442:	4652      	mov	r2, sl
 8001444:	3b28      	subs	r3, #40	; 0x28
 8001446:	409a      	lsls	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	2200      	movs	r2, #0
 800144c:	e693      	b.n	8001176 <__aeabi_dmul+0x1a2>
 800144e:	4650      	mov	r0, sl
 8001450:	f000 f908 	bl	8001664 <__clzsi2>
 8001454:	3020      	adds	r0, #32
 8001456:	e67b      	b.n	8001150 <__aeabi_dmul+0x17c>
 8001458:	46ca      	mov	sl, r9
 800145a:	e750      	b.n	80012fe <__aeabi_dmul+0x32a>
 800145c:	201f      	movs	r0, #31
 800145e:	001e      	movs	r6, r3
 8001460:	4240      	negs	r0, r0
 8001462:	1b04      	subs	r4, r0, r4
 8001464:	40e6      	lsrs	r6, r4
 8001466:	2d20      	cmp	r5, #32
 8001468:	d003      	beq.n	8001472 <__aeabi_dmul+0x49e>
 800146a:	4c12      	ldr	r4, [pc, #72]	; (80014b4 <__aeabi_dmul+0x4e0>)
 800146c:	4454      	add	r4, sl
 800146e:	40a3      	lsls	r3, r4
 8001470:	431a      	orrs	r2, r3
 8001472:	1e50      	subs	r0, r2, #1
 8001474:	4182      	sbcs	r2, r0
 8001476:	4332      	orrs	r2, r6
 8001478:	2607      	movs	r6, #7
 800147a:	2700      	movs	r7, #0
 800147c:	4016      	ands	r6, r2
 800147e:	d009      	beq.n	8001494 <__aeabi_dmul+0x4c0>
 8001480:	200f      	movs	r0, #15
 8001482:	2300      	movs	r3, #0
 8001484:	4010      	ands	r0, r2
 8001486:	0014      	movs	r4, r2
 8001488:	2804      	cmp	r0, #4
 800148a:	d1b9      	bne.n	8001400 <__aeabi_dmul+0x42c>
 800148c:	0022      	movs	r2, r4
 800148e:	075e      	lsls	r6, r3, #29
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	0b1f      	lsrs	r7, r3, #12
 8001494:	08d2      	lsrs	r2, r2, #3
 8001496:	4316      	orrs	r6, r2
 8001498:	2300      	movs	r3, #0
 800149a:	e606      	b.n	80010aa <__aeabi_dmul+0xd6>
 800149c:	2780      	movs	r7, #128	; 0x80
 800149e:	033f      	lsls	r7, r7, #12
 80014a0:	431f      	orrs	r7, r3
 80014a2:	033f      	lsls	r7, r7, #12
 80014a4:	0b3f      	lsrs	r7, r7, #12
 80014a6:	0016      	movs	r6, r2
 80014a8:	4b00      	ldr	r3, [pc, #0]	; (80014ac <__aeabi_dmul+0x4d8>)
 80014aa:	e5fe      	b.n	80010aa <__aeabi_dmul+0xd6>
 80014ac:	000007ff 	.word	0x000007ff
 80014b0:	0000041e 	.word	0x0000041e
 80014b4:	0000043e 	.word	0x0000043e

080014b8 <__aeabi_f2d>:
 80014b8:	0041      	lsls	r1, r0, #1
 80014ba:	0e09      	lsrs	r1, r1, #24
 80014bc:	1c4b      	adds	r3, r1, #1
 80014be:	b570      	push	{r4, r5, r6, lr}
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	0246      	lsls	r6, r0, #9
 80014c4:	0a75      	lsrs	r5, r6, #9
 80014c6:	0fc4      	lsrs	r4, r0, #31
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	dd14      	ble.n	80014f6 <__aeabi_f2d+0x3e>
 80014cc:	23e0      	movs	r3, #224	; 0xe0
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	076d      	lsls	r5, r5, #29
 80014d2:	0b36      	lsrs	r6, r6, #12
 80014d4:	18cb      	adds	r3, r1, r3
 80014d6:	2100      	movs	r1, #0
 80014d8:	0d0a      	lsrs	r2, r1, #20
 80014da:	0028      	movs	r0, r5
 80014dc:	0512      	lsls	r2, r2, #20
 80014de:	4d1c      	ldr	r5, [pc, #112]	; (8001550 <__aeabi_f2d+0x98>)
 80014e0:	4332      	orrs	r2, r6
 80014e2:	055b      	lsls	r3, r3, #21
 80014e4:	402a      	ands	r2, r5
 80014e6:	085b      	lsrs	r3, r3, #1
 80014e8:	4313      	orrs	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	07e4      	lsls	r4, r4, #31
 80014ee:	085b      	lsrs	r3, r3, #1
 80014f0:	4323      	orrs	r3, r4
 80014f2:	0019      	movs	r1, r3
 80014f4:	bd70      	pop	{r4, r5, r6, pc}
 80014f6:	2900      	cmp	r1, #0
 80014f8:	d114      	bne.n	8001524 <__aeabi_f2d+0x6c>
 80014fa:	2d00      	cmp	r5, #0
 80014fc:	d01e      	beq.n	800153c <__aeabi_f2d+0x84>
 80014fe:	0028      	movs	r0, r5
 8001500:	f000 f8b0 	bl	8001664 <__clzsi2>
 8001504:	280a      	cmp	r0, #10
 8001506:	dc1c      	bgt.n	8001542 <__aeabi_f2d+0x8a>
 8001508:	230b      	movs	r3, #11
 800150a:	002a      	movs	r2, r5
 800150c:	1a1b      	subs	r3, r3, r0
 800150e:	40da      	lsrs	r2, r3
 8001510:	0003      	movs	r3, r0
 8001512:	3315      	adds	r3, #21
 8001514:	409d      	lsls	r5, r3
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <__aeabi_f2d+0x9c>)
 8001518:	0312      	lsls	r2, r2, #12
 800151a:	1a1b      	subs	r3, r3, r0
 800151c:	055b      	lsls	r3, r3, #21
 800151e:	0b16      	lsrs	r6, r2, #12
 8001520:	0d5b      	lsrs	r3, r3, #21
 8001522:	e7d8      	b.n	80014d6 <__aeabi_f2d+0x1e>
 8001524:	2d00      	cmp	r5, #0
 8001526:	d006      	beq.n	8001536 <__aeabi_f2d+0x7e>
 8001528:	0b32      	lsrs	r2, r6, #12
 800152a:	2680      	movs	r6, #128	; 0x80
 800152c:	0336      	lsls	r6, r6, #12
 800152e:	076d      	lsls	r5, r5, #29
 8001530:	4316      	orrs	r6, r2
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <__aeabi_f2d+0xa0>)
 8001534:	e7cf      	b.n	80014d6 <__aeabi_f2d+0x1e>
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <__aeabi_f2d+0xa0>)
 8001538:	2600      	movs	r6, #0
 800153a:	e7cc      	b.n	80014d6 <__aeabi_f2d+0x1e>
 800153c:	2300      	movs	r3, #0
 800153e:	2600      	movs	r6, #0
 8001540:	e7c9      	b.n	80014d6 <__aeabi_f2d+0x1e>
 8001542:	0003      	movs	r3, r0
 8001544:	002a      	movs	r2, r5
 8001546:	3b0b      	subs	r3, #11
 8001548:	409a      	lsls	r2, r3
 800154a:	2500      	movs	r5, #0
 800154c:	e7e3      	b.n	8001516 <__aeabi_f2d+0x5e>
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	800fffff 	.word	0x800fffff
 8001554:	00000389 	.word	0x00000389
 8001558:	000007ff 	.word	0x000007ff

0800155c <__aeabi_d2f>:
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155e:	004c      	lsls	r4, r1, #1
 8001560:	0d64      	lsrs	r4, r4, #21
 8001562:	030b      	lsls	r3, r1, #12
 8001564:	1c62      	adds	r2, r4, #1
 8001566:	0a5b      	lsrs	r3, r3, #9
 8001568:	0f46      	lsrs	r6, r0, #29
 800156a:	0552      	lsls	r2, r2, #21
 800156c:	0fc9      	lsrs	r1, r1, #31
 800156e:	431e      	orrs	r6, r3
 8001570:	00c5      	lsls	r5, r0, #3
 8001572:	0d52      	lsrs	r2, r2, #21
 8001574:	2a01      	cmp	r2, #1
 8001576:	dd29      	ble.n	80015cc <__aeabi_d2f+0x70>
 8001578:	4b37      	ldr	r3, [pc, #220]	; (8001658 <__aeabi_d2f+0xfc>)
 800157a:	18e7      	adds	r7, r4, r3
 800157c:	2ffe      	cmp	r7, #254	; 0xfe
 800157e:	dc1c      	bgt.n	80015ba <__aeabi_d2f+0x5e>
 8001580:	2f00      	cmp	r7, #0
 8001582:	dd3b      	ble.n	80015fc <__aeabi_d2f+0xa0>
 8001584:	0180      	lsls	r0, r0, #6
 8001586:	1e43      	subs	r3, r0, #1
 8001588:	4198      	sbcs	r0, r3
 800158a:	2207      	movs	r2, #7
 800158c:	00f3      	lsls	r3, r6, #3
 800158e:	0f6d      	lsrs	r5, r5, #29
 8001590:	4303      	orrs	r3, r0
 8001592:	432b      	orrs	r3, r5
 8001594:	401a      	ands	r2, r3
 8001596:	2a00      	cmp	r2, #0
 8001598:	d004      	beq.n	80015a4 <__aeabi_d2f+0x48>
 800159a:	220f      	movs	r2, #15
 800159c:	401a      	ands	r2, r3
 800159e:	2a04      	cmp	r2, #4
 80015a0:	d000      	beq.n	80015a4 <__aeabi_d2f+0x48>
 80015a2:	3304      	adds	r3, #4
 80015a4:	2280      	movs	r2, #128	; 0x80
 80015a6:	04d2      	lsls	r2, r2, #19
 80015a8:	401a      	ands	r2, r3
 80015aa:	d024      	beq.n	80015f6 <__aeabi_d2f+0x9a>
 80015ac:	3701      	adds	r7, #1
 80015ae:	b2fa      	uxtb	r2, r7
 80015b0:	2fff      	cmp	r7, #255	; 0xff
 80015b2:	d002      	beq.n	80015ba <__aeabi_d2f+0x5e>
 80015b4:	019b      	lsls	r3, r3, #6
 80015b6:	0a58      	lsrs	r0, r3, #9
 80015b8:	e001      	b.n	80015be <__aeabi_d2f+0x62>
 80015ba:	22ff      	movs	r2, #255	; 0xff
 80015bc:	2000      	movs	r0, #0
 80015be:	0240      	lsls	r0, r0, #9
 80015c0:	05d2      	lsls	r2, r2, #23
 80015c2:	0a40      	lsrs	r0, r0, #9
 80015c4:	07c9      	lsls	r1, r1, #31
 80015c6:	4310      	orrs	r0, r2
 80015c8:	4308      	orrs	r0, r1
 80015ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015cc:	4335      	orrs	r5, r6
 80015ce:	2c00      	cmp	r4, #0
 80015d0:	d104      	bne.n	80015dc <__aeabi_d2f+0x80>
 80015d2:	2d00      	cmp	r5, #0
 80015d4:	d10a      	bne.n	80015ec <__aeabi_d2f+0x90>
 80015d6:	2200      	movs	r2, #0
 80015d8:	2000      	movs	r0, #0
 80015da:	e7f0      	b.n	80015be <__aeabi_d2f+0x62>
 80015dc:	2d00      	cmp	r5, #0
 80015de:	d0ec      	beq.n	80015ba <__aeabi_d2f+0x5e>
 80015e0:	2080      	movs	r0, #128	; 0x80
 80015e2:	03c0      	lsls	r0, r0, #15
 80015e4:	4330      	orrs	r0, r6
 80015e6:	22ff      	movs	r2, #255	; 0xff
 80015e8:	e7e9      	b.n	80015be <__aeabi_d2f+0x62>
 80015ea:	2400      	movs	r4, #0
 80015ec:	2300      	movs	r3, #0
 80015ee:	025b      	lsls	r3, r3, #9
 80015f0:	0a58      	lsrs	r0, r3, #9
 80015f2:	b2e2      	uxtb	r2, r4
 80015f4:	e7e3      	b.n	80015be <__aeabi_d2f+0x62>
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	003c      	movs	r4, r7
 80015fa:	e7f8      	b.n	80015ee <__aeabi_d2f+0x92>
 80015fc:	003b      	movs	r3, r7
 80015fe:	3317      	adds	r3, #23
 8001600:	dbf3      	blt.n	80015ea <__aeabi_d2f+0x8e>
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	041b      	lsls	r3, r3, #16
 8001606:	4333      	orrs	r3, r6
 8001608:	261e      	movs	r6, #30
 800160a:	1bf6      	subs	r6, r6, r7
 800160c:	2e1f      	cmp	r6, #31
 800160e:	dd14      	ble.n	800163a <__aeabi_d2f+0xde>
 8001610:	2202      	movs	r2, #2
 8001612:	4252      	negs	r2, r2
 8001614:	1bd7      	subs	r7, r2, r7
 8001616:	001a      	movs	r2, r3
 8001618:	40fa      	lsrs	r2, r7
 800161a:	0017      	movs	r7, r2
 800161c:	2e20      	cmp	r6, #32
 800161e:	d004      	beq.n	800162a <__aeabi_d2f+0xce>
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <__aeabi_d2f+0x100>)
 8001622:	4694      	mov	ip, r2
 8001624:	4464      	add	r4, ip
 8001626:	40a3      	lsls	r3, r4
 8001628:	431d      	orrs	r5, r3
 800162a:	002b      	movs	r3, r5
 800162c:	1e5d      	subs	r5, r3, #1
 800162e:	41ab      	sbcs	r3, r5
 8001630:	2207      	movs	r2, #7
 8001632:	433b      	orrs	r3, r7
 8001634:	401a      	ands	r2, r3
 8001636:	2700      	movs	r7, #0
 8001638:	e7ad      	b.n	8001596 <__aeabi_d2f+0x3a>
 800163a:	4a09      	ldr	r2, [pc, #36]	; (8001660 <__aeabi_d2f+0x104>)
 800163c:	0028      	movs	r0, r5
 800163e:	18a2      	adds	r2, r4, r2
 8001640:	4095      	lsls	r5, r2
 8001642:	4093      	lsls	r3, r2
 8001644:	1e6c      	subs	r4, r5, #1
 8001646:	41a5      	sbcs	r5, r4
 8001648:	40f0      	lsrs	r0, r6
 800164a:	2207      	movs	r2, #7
 800164c:	432b      	orrs	r3, r5
 800164e:	4303      	orrs	r3, r0
 8001650:	401a      	ands	r2, r3
 8001652:	2700      	movs	r7, #0
 8001654:	e79f      	b.n	8001596 <__aeabi_d2f+0x3a>
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	fffffc80 	.word	0xfffffc80
 800165c:	fffffca2 	.word	0xfffffca2
 8001660:	fffffc82 	.word	0xfffffc82

08001664 <__clzsi2>:
 8001664:	211c      	movs	r1, #28
 8001666:	2301      	movs	r3, #1
 8001668:	041b      	lsls	r3, r3, #16
 800166a:	4298      	cmp	r0, r3
 800166c:	d301      	bcc.n	8001672 <__clzsi2+0xe>
 800166e:	0c00      	lsrs	r0, r0, #16
 8001670:	3910      	subs	r1, #16
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	4298      	cmp	r0, r3
 8001676:	d301      	bcc.n	800167c <__clzsi2+0x18>
 8001678:	0a00      	lsrs	r0, r0, #8
 800167a:	3908      	subs	r1, #8
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	4298      	cmp	r0, r3
 8001680:	d301      	bcc.n	8001686 <__clzsi2+0x22>
 8001682:	0900      	lsrs	r0, r0, #4
 8001684:	3904      	subs	r1, #4
 8001686:	a202      	add	r2, pc, #8	; (adr r2, 8001690 <__clzsi2+0x2c>)
 8001688:	5c10      	ldrb	r0, [r2, r0]
 800168a:	1840      	adds	r0, r0, r1
 800168c:	4770      	bx	lr
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	02020304 	.word	0x02020304
 8001694:	01010101 	.word	0x01010101
	...

080016a0 <forward>:
#include <FB.h>

void forward(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, RESET);
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	480d      	ldr	r0, [pc, #52]	; (80016e0 <forward+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	0019      	movs	r1, r3
 80016ae:	f001 fb28 	bl	8002d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, SET);
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	480a      	ldr	r0, [pc, #40]	; (80016e0 <forward+0x40>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	0019      	movs	r1, r3
 80016bc:	f001 fb21 	bl	8002d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, RESET);
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <forward+0x40>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	2102      	movs	r1, #2
 80016c6:	0018      	movs	r0, r3
 80016c8:	f001 fb1b 	bl	8002d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, SET);
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <forward+0x40>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	2101      	movs	r1, #1
 80016d2:	0018      	movs	r0, r3
 80016d4:	f001 fb15 	bl	8002d02 <HAL_GPIO_WritePin>
}
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	48000400 	.word	0x48000400

080016e4 <backward>:

void backward(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, SET);
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	480d      	ldr	r0, [pc, #52]	; (8001724 <backward+0x40>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	0019      	movs	r1, r3
 80016f2:	f001 fb06 	bl	8002d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, RESET);
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	480a      	ldr	r0, [pc, #40]	; (8001724 <backward+0x40>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	0019      	movs	r1, r3
 8001700:	f001 faff 	bl	8002d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, SET);
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <backward+0x40>)
 8001706:	2201      	movs	r2, #1
 8001708:	2102      	movs	r1, #2
 800170a:	0018      	movs	r0, r3
 800170c:	f001 faf9 	bl	8002d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, RESET);
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <backward+0x40>)
 8001712:	2200      	movs	r2, #0
 8001714:	2101      	movs	r1, #1
 8001716:	0018      	movs	r0, r3
 8001718:	f001 faf3 	bl	8002d02 <HAL_GPIO_WritePin>
}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	48000400 	.word	0x48000400

08001728 <PID_PROCESS>:
    pid_parameters->Kp = Kp;
    pid_parameters->Ki = Ki;
    pid_parameters->Kd = Kd;
}
void PID_PROCESS(PID_parameter* pid_parameter, float vitri,float setpoint)   //setpoint = 0;
{
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
    pid_parameter->error =  vitri - setpoint;
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	68b8      	ldr	r0, [r7, #8]
 8001738:	f7ff fa68 	bl	8000c0c <__aeabi_fsub>
 800173c:	1c03      	adds	r3, r0, #0
 800173e:	1c1a      	adds	r2, r3, #0
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	60da      	str	r2, [r3, #12]

    pid_parameter->KP_part = pid_parameter->Kp * (pid_parameter->error - pid_parameter->pre_error);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681c      	ldr	r4, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	1c19      	adds	r1, r3, #0
 8001752:	1c10      	adds	r0, r2, #0
 8001754:	f7ff fa5a 	bl	8000c0c <__aeabi_fsub>
 8001758:	1c03      	adds	r3, r0, #0
 800175a:	1c19      	adds	r1, r3, #0
 800175c:	1c20      	adds	r0, r4, #0
 800175e:	f7ff f923 	bl	80009a8 <__aeabi_fmul>
 8001762:	1c03      	adds	r3, r0, #0
 8001764:	1c1a      	adds	r2, r3, #0
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	61da      	str	r2, [r3, #28]
    pid_parameter->KI_part = 0.5* pid_parameter->Ki * pid_parameter->Ts * (pid_parameter->error + pid_parameter->pre_error);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	1c18      	adds	r0, r3, #0
 8001770:	f7ff fea2 	bl	80014b8 <__aeabi_f2d>
 8001774:	2200      	movs	r2, #0
 8001776:	4b74      	ldr	r3, [pc, #464]	; (8001948 <PID_PROCESS+0x220>)
 8001778:	f7ff fc2c 	bl	8000fd4 <__aeabi_dmul>
 800177c:	0003      	movs	r3, r0
 800177e:	000c      	movs	r4, r1
 8001780:	0025      	movs	r5, r4
 8001782:	001c      	movs	r4, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	1c18      	adds	r0, r3, #0
 800178a:	f7ff fe95 	bl	80014b8 <__aeabi_f2d>
 800178e:	0002      	movs	r2, r0
 8001790:	000b      	movs	r3, r1
 8001792:	0020      	movs	r0, r4
 8001794:	0029      	movs	r1, r5
 8001796:	f7ff fc1d 	bl	8000fd4 <__aeabi_dmul>
 800179a:	0003      	movs	r3, r0
 800179c:	000c      	movs	r4, r1
 800179e:	0025      	movs	r5, r4
 80017a0:	001c      	movs	r4, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	1c19      	adds	r1, r3, #0
 80017ac:	1c10      	adds	r0, r2, #0
 80017ae:	f7fe fd89 	bl	80002c4 <__aeabi_fadd>
 80017b2:	1c03      	adds	r3, r0, #0
 80017b4:	1c18      	adds	r0, r3, #0
 80017b6:	f7ff fe7f 	bl	80014b8 <__aeabi_f2d>
 80017ba:	0002      	movs	r2, r0
 80017bc:	000b      	movs	r3, r1
 80017be:	0020      	movs	r0, r4
 80017c0:	0029      	movs	r1, r5
 80017c2:	f7ff fc07 	bl	8000fd4 <__aeabi_dmul>
 80017c6:	0003      	movs	r3, r0
 80017c8:	000c      	movs	r4, r1
 80017ca:	0018      	movs	r0, r3
 80017cc:	0021      	movs	r1, r4
 80017ce:	f7ff fec5 	bl	800155c <__aeabi_d2f>
 80017d2:	1c02      	adds	r2, r0, #0
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	621a      	str	r2, [r3, #32]
    pid_parameter->KD_part =(pid_parameter->Kd / pid_parameter->Ts) * (pid_parameter->error - 2*pid_parameter->pre_error +pid_parameter->pre2_error);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	1c19      	adds	r1, r3, #0
 80017e2:	1c10      	adds	r0, r2, #0
 80017e4:	f7fe ff08 	bl	80005f8 <__aeabi_fdiv>
 80017e8:	1c03      	adds	r3, r0, #0
 80017ea:	1c1d      	adds	r5, r3, #0
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	68dc      	ldr	r4, [r3, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	1c19      	adds	r1, r3, #0
 80017f6:	1c18      	adds	r0, r3, #0
 80017f8:	f7fe fd64 	bl	80002c4 <__aeabi_fadd>
 80017fc:	1c03      	adds	r3, r0, #0
 80017fe:	1c19      	adds	r1, r3, #0
 8001800:	1c20      	adds	r0, r4, #0
 8001802:	f7ff fa03 	bl	8000c0c <__aeabi_fsub>
 8001806:	1c03      	adds	r3, r0, #0
 8001808:	1c1a      	adds	r2, r3, #0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	1c19      	adds	r1, r3, #0
 8001810:	1c10      	adds	r0, r2, #0
 8001812:	f7fe fd57 	bl	80002c4 <__aeabi_fadd>
 8001816:	1c03      	adds	r3, r0, #0
 8001818:	1c19      	adds	r1, r3, #0
 800181a:	1c28      	adds	r0, r5, #0
 800181c:	f7ff f8c4 	bl	80009a8 <__aeabi_fmul>
 8001820:	1c03      	adds	r3, r0, #0
 8001822:	1c1a      	adds	r2, r3, #0
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	625a      	str	r2, [r3, #36]	; 0x24

    pid_parameter->Out_right = pid_parameter->pre_Out_right- pid_parameter->KP_part - pid_parameter->KI_part -pid_parameter->KD_part;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	1c19      	adds	r1, r3, #0
 8001832:	1c10      	adds	r0, r2, #0
 8001834:	f7ff f9ea 	bl	8000c0c <__aeabi_fsub>
 8001838:	1c03      	adds	r3, r0, #0
 800183a:	1c1a      	adds	r2, r3, #0
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	1c19      	adds	r1, r3, #0
 8001842:	1c10      	adds	r0, r2, #0
 8001844:	f7ff f9e2 	bl	8000c0c <__aeabi_fsub>
 8001848:	1c03      	adds	r3, r0, #0
 800184a:	1c1a      	adds	r2, r3, #0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	1c19      	adds	r1, r3, #0
 8001852:	1c10      	adds	r0, r2, #0
 8001854:	f7ff f9da 	bl	8000c0c <__aeabi_fsub>
 8001858:	1c03      	adds	r3, r0, #0
 800185a:	1c1a      	adds	r2, r3, #0
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	631a      	str	r2, [r3, #48]	; 0x30
    pid_parameter->Out_left = pid_parameter->pre_Out_left+ pid_parameter->KP_part + pid_parameter->KI_part +pid_parameter->KD_part;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	1c19      	adds	r1, r3, #0
 800186a:	1c10      	adds	r0, r2, #0
 800186c:	f7fe fd2a 	bl	80002c4 <__aeabi_fadd>
 8001870:	1c03      	adds	r3, r0, #0
 8001872:	1c1a      	adds	r2, r3, #0
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	1c19      	adds	r1, r3, #0
 800187a:	1c10      	adds	r0, r2, #0
 800187c:	f7fe fd22 	bl	80002c4 <__aeabi_fadd>
 8001880:	1c03      	adds	r3, r0, #0
 8001882:	1c1a      	adds	r2, r3, #0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	1c19      	adds	r1, r3, #0
 800188a:	1c10      	adds	r0, r2, #0
 800188c:	f7fe fd1a 	bl	80002c4 <__aeabi_fadd>
 8001890:	1c03      	adds	r3, r0, #0
 8001892:	1c1a      	adds	r2, r3, #0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28

    if (pid_parameter->Out_left > pid_parameter->PID_Saturation)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a0:	1c19      	adds	r1, r3, #0
 80018a2:	1c10      	adds	r0, r2, #0
 80018a4:	f7fe fce2 	bl	800026c <__aeabi_fcmpgt>
 80018a8:	1e03      	subs	r3, r0, #0
 80018aa:	d004      	beq.n	80018b6 <PID_PROCESS+0x18e>
      {
            pid_parameter->Out_left = pid_parameter->PID_Saturation;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
 80018b4:	e012      	b.n	80018dc <PID_PROCESS+0x1b4>
       }
      else if (pid_parameter->Out_left < (-pid_parameter->PID_Saturation))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018be:	2280      	movs	r2, #128	; 0x80
 80018c0:	0612      	lsls	r2, r2, #24
 80018c2:	4053      	eors	r3, r2
 80018c4:	1c19      	adds	r1, r3, #0
 80018c6:	f7fe fcbd 	bl	8000244 <__aeabi_fcmplt>
 80018ca:	1e03      	subs	r3, r0, #0
 80018cc:	d006      	beq.n	80018dc <PID_PROCESS+0x1b4>
      {
            pid_parameter->Out_left = -pid_parameter->PID_Saturation;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d2:	2280      	movs	r2, #128	; 0x80
 80018d4:	0612      	lsls	r2, r2, #24
 80018d6:	405a      	eors	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	629a      	str	r2, [r3, #40]	; 0x28
      }

    if (pid_parameter->Out_right > pid_parameter->PID_Saturation)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e4:	1c19      	adds	r1, r3, #0
 80018e6:	1c10      	adds	r0, r2, #0
 80018e8:	f7fe fcc0 	bl	800026c <__aeabi_fcmpgt>
 80018ec:	1e03      	subs	r3, r0, #0
 80018ee:	d004      	beq.n	80018fa <PID_PROCESS+0x1d2>
          {
                pid_parameter->Out_right = pid_parameter->PID_Saturation;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
 80018f8:	e012      	b.n	8001920 <PID_PROCESS+0x1f8>
           }
          else if (pid_parameter->Out_right < (-pid_parameter->PID_Saturation))
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	0612      	lsls	r2, r2, #24
 8001906:	4053      	eors	r3, r2
 8001908:	1c19      	adds	r1, r3, #0
 800190a:	f7fe fc9b 	bl	8000244 <__aeabi_fcmplt>
 800190e:	1e03      	subs	r3, r0, #0
 8001910:	d006      	beq.n	8001920 <PID_PROCESS+0x1f8>
          {
                pid_parameter->Out_right = -pid_parameter->PID_Saturation;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	2280      	movs	r2, #128	; 0x80
 8001918:	0612      	lsls	r2, r2, #24
 800191a:	405a      	eors	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	631a      	str	r2, [r3, #48]	; 0x30
          }
    pid_parameter->pre2_error = pid_parameter->pre_error;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	691a      	ldr	r2, [r3, #16]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	615a      	str	r2, [r3, #20]
    pid_parameter->pre_error = pid_parameter->error;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	611a      	str	r2, [r3, #16]
    pid_parameter->pre_Out_right = pid_parameter->Out_right;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	635a      	str	r2, [r3, #52]	; 0x34
    pid_parameter->pre_Out_left = pid_parameter->Out_left;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	b004      	add	sp, #16
 8001946:	bdb0      	pop	{r4, r5, r7, pc}
 8001948:	3fe00000 	.word	0x3fe00000

0800194c <PID_ReadValue_left>:

float PID_ReadValue_left (PID_parameter* pid_parameter){
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
    return pid_parameter->Out_left;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8001958:	1c18      	adds	r0, r3, #0
 800195a:	46bd      	mov	sp, r7
 800195c:	b002      	add	sp, #8
 800195e:	bd80      	pop	{r7, pc}

08001960 <PID_ReadValue_right>:

float PID_ReadValue_right (PID_parameter* pid_parameter){
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
    return pid_parameter->Out_right;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800196c:	1c18      	adds	r0, r3, #0
 800196e:	46bd      	mov	sp, r7
 8001970:	b002      	add	sp, #8
 8001972:	bd80      	pop	{r7, pc}

08001974 <read_sensor_values>:
char sensor[4];
int state = 0;
float error;

float read_sensor_values(float pre_error)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  sensor[0]=HAL_GPIO_ReadPin(IS1_GPIO_Port, IS1_Pin);
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	021a      	lsls	r2, r3, #8
 8001980:	2390      	movs	r3, #144	; 0x90
 8001982:	05db      	lsls	r3, r3, #23
 8001984:	0011      	movs	r1, r2
 8001986:	0018      	movs	r0, r3
 8001988:	f001 f99e 	bl	8002cc8 <HAL_GPIO_ReadPin>
 800198c:	0003      	movs	r3, r0
 800198e:	001a      	movs	r2, r3
 8001990:	4bbd      	ldr	r3, [pc, #756]	; (8001c88 <read_sensor_values+0x314>)
 8001992:	701a      	strb	r2, [r3, #0]
  sensor[1]=HAL_GPIO_ReadPin(IS2_GPIO_Port, IS2_Pin);
 8001994:	4bbd      	ldr	r3, [pc, #756]	; (8001c8c <read_sensor_values+0x318>)
 8001996:	2108      	movs	r1, #8
 8001998:	0018      	movs	r0, r3
 800199a:	f001 f995 	bl	8002cc8 <HAL_GPIO_ReadPin>
 800199e:	0003      	movs	r3, r0
 80019a0:	001a      	movs	r2, r3
 80019a2:	4bb9      	ldr	r3, [pc, #740]	; (8001c88 <read_sensor_values+0x314>)
 80019a4:	705a      	strb	r2, [r3, #1]
  sensor[2]=HAL_GPIO_ReadPin(IS3_GPIO_Port, IS3_Pin);
 80019a6:	4bb9      	ldr	r3, [pc, #740]	; (8001c8c <read_sensor_values+0x318>)
 80019a8:	2110      	movs	r1, #16
 80019aa:	0018      	movs	r0, r3
 80019ac:	f001 f98c 	bl	8002cc8 <HAL_GPIO_ReadPin>
 80019b0:	0003      	movs	r3, r0
 80019b2:	001a      	movs	r2, r3
 80019b4:	4bb4      	ldr	r3, [pc, #720]	; (8001c88 <read_sensor_values+0x314>)
 80019b6:	709a      	strb	r2, [r3, #2]
  sensor[3]=HAL_GPIO_ReadPin(IS4_GPIO_Port, IS4_Pin);
 80019b8:	4bb4      	ldr	r3, [pc, #720]	; (8001c8c <read_sensor_values+0x318>)
 80019ba:	2120      	movs	r1, #32
 80019bc:	0018      	movs	r0, r3
 80019be:	f001 f983 	bl	8002cc8 <HAL_GPIO_ReadPin>
 80019c2:	0003      	movs	r3, r0
 80019c4:	001a      	movs	r2, r3
 80019c6:	4bb0      	ldr	r3, [pc, #704]	; (8001c88 <read_sensor_values+0x314>)
 80019c8:	70da      	strb	r2, [r3, #3]

  if((sensor[0]==!state)&&(sensor[1]==!state)&&(sensor[2]==!state)&&(sensor[3]==state))
 80019ca:	4baf      	ldr	r3, [pc, #700]	; (8001c88 <read_sensor_values+0x314>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	001a      	movs	r2, r3
 80019d0:	4baf      	ldr	r3, [pc, #700]	; (8001c90 <read_sensor_values+0x31c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4259      	negs	r1, r3
 80019d6:	414b      	adcs	r3, r1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	429a      	cmp	r2, r3
 80019dc:	d11e      	bne.n	8001a1c <read_sensor_values+0xa8>
 80019de:	4baa      	ldr	r3, [pc, #680]	; (8001c88 <read_sensor_values+0x314>)
 80019e0:	785b      	ldrb	r3, [r3, #1]
 80019e2:	001a      	movs	r2, r3
 80019e4:	4baa      	ldr	r3, [pc, #680]	; (8001c90 <read_sensor_values+0x31c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4259      	negs	r1, r3
 80019ea:	414b      	adcs	r3, r1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d114      	bne.n	8001a1c <read_sensor_values+0xa8>
 80019f2:	4ba5      	ldr	r3, [pc, #660]	; (8001c88 <read_sensor_values+0x314>)
 80019f4:	789b      	ldrb	r3, [r3, #2]
 80019f6:	001a      	movs	r2, r3
 80019f8:	4ba5      	ldr	r3, [pc, #660]	; (8001c90 <read_sensor_values+0x31c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4259      	negs	r1, r3
 80019fe:	414b      	adcs	r3, r1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d10a      	bne.n	8001a1c <read_sensor_values+0xa8>
 8001a06:	4ba0      	ldr	r3, [pc, #640]	; (8001c88 <read_sensor_values+0x314>)
 8001a08:	78db      	ldrb	r3, [r3, #3]
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	4ba0      	ldr	r3, [pc, #640]	; (8001c90 <read_sensor_values+0x31c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d103      	bne.n	8001a1c <read_sensor_values+0xa8>
  error=3;
 8001a14:	4b9f      	ldr	r3, [pc, #636]	; (8001c94 <read_sensor_values+0x320>)
 8001a16:	4aa0      	ldr	r2, [pc, #640]	; (8001c98 <read_sensor_values+0x324>)
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	e12f      	b.n	8001c7c <read_sensor_values+0x308>
  else if((sensor[0]==!state)&&(sensor[1]==!state)&&(sensor[2]==state)&&(sensor[3]==state))
 8001a1c:	4b9a      	ldr	r3, [pc, #616]	; (8001c88 <read_sensor_values+0x314>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	001a      	movs	r2, r3
 8001a22:	4b9b      	ldr	r3, [pc, #620]	; (8001c90 <read_sensor_values+0x31c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4259      	negs	r1, r3
 8001a28:	414b      	adcs	r3, r1
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d11c      	bne.n	8001a6a <read_sensor_values+0xf6>
 8001a30:	4b95      	ldr	r3, [pc, #596]	; (8001c88 <read_sensor_values+0x314>)
 8001a32:	785b      	ldrb	r3, [r3, #1]
 8001a34:	001a      	movs	r2, r3
 8001a36:	4b96      	ldr	r3, [pc, #600]	; (8001c90 <read_sensor_values+0x31c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4259      	negs	r1, r3
 8001a3c:	414b      	adcs	r3, r1
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d112      	bne.n	8001a6a <read_sensor_values+0xf6>
 8001a44:	4b90      	ldr	r3, [pc, #576]	; (8001c88 <read_sensor_values+0x314>)
 8001a46:	789b      	ldrb	r3, [r3, #2]
 8001a48:	001a      	movs	r2, r3
 8001a4a:	4b91      	ldr	r3, [pc, #580]	; (8001c90 <read_sensor_values+0x31c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d10b      	bne.n	8001a6a <read_sensor_values+0xf6>
 8001a52:	4b8d      	ldr	r3, [pc, #564]	; (8001c88 <read_sensor_values+0x314>)
 8001a54:	78db      	ldrb	r3, [r3, #3]
 8001a56:	001a      	movs	r2, r3
 8001a58:	4b8d      	ldr	r3, [pc, #564]	; (8001c90 <read_sensor_values+0x31c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d104      	bne.n	8001a6a <read_sensor_values+0xf6>
  error=2;
 8001a60:	4b8c      	ldr	r3, [pc, #560]	; (8001c94 <read_sensor_values+0x320>)
 8001a62:	2280      	movs	r2, #128	; 0x80
 8001a64:	05d2      	lsls	r2, r2, #23
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e108      	b.n	8001c7c <read_sensor_values+0x308>
  else if((sensor[0]==!state)&&(sensor[1]==!state)&&(sensor[2]==state)&&(sensor[3]==!state))
 8001a6a:	4b87      	ldr	r3, [pc, #540]	; (8001c88 <read_sensor_values+0x314>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	001a      	movs	r2, r3
 8001a70:	4b87      	ldr	r3, [pc, #540]	; (8001c90 <read_sensor_values+0x31c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4259      	negs	r1, r3
 8001a76:	414b      	adcs	r3, r1
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d11f      	bne.n	8001abe <read_sensor_values+0x14a>
 8001a7e:	4b82      	ldr	r3, [pc, #520]	; (8001c88 <read_sensor_values+0x314>)
 8001a80:	785b      	ldrb	r3, [r3, #1]
 8001a82:	001a      	movs	r2, r3
 8001a84:	4b82      	ldr	r3, [pc, #520]	; (8001c90 <read_sensor_values+0x31c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4259      	negs	r1, r3
 8001a8a:	414b      	adcs	r3, r1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d115      	bne.n	8001abe <read_sensor_values+0x14a>
 8001a92:	4b7d      	ldr	r3, [pc, #500]	; (8001c88 <read_sensor_values+0x314>)
 8001a94:	789b      	ldrb	r3, [r3, #2]
 8001a96:	001a      	movs	r2, r3
 8001a98:	4b7d      	ldr	r3, [pc, #500]	; (8001c90 <read_sensor_values+0x31c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d10e      	bne.n	8001abe <read_sensor_values+0x14a>
 8001aa0:	4b79      	ldr	r3, [pc, #484]	; (8001c88 <read_sensor_values+0x314>)
 8001aa2:	78db      	ldrb	r3, [r3, #3]
 8001aa4:	001a      	movs	r2, r3
 8001aa6:	4b7a      	ldr	r3, [pc, #488]	; (8001c90 <read_sensor_values+0x31c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4259      	negs	r1, r3
 8001aac:	414b      	adcs	r3, r1
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d104      	bne.n	8001abe <read_sensor_values+0x14a>
  error=1;
 8001ab4:	4b77      	ldr	r3, [pc, #476]	; (8001c94 <read_sensor_values+0x320>)
 8001ab6:	22fe      	movs	r2, #254	; 0xfe
 8001ab8:	0592      	lsls	r2, r2, #22
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	e0de      	b.n	8001c7c <read_sensor_values+0x308>
  else if((sensor[0]==!state)&&(sensor[1]==state)&&(sensor[2]==state)&&(sensor[3]==!state))
 8001abe:	4b72      	ldr	r3, [pc, #456]	; (8001c88 <read_sensor_values+0x314>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	4b72      	ldr	r3, [pc, #456]	; (8001c90 <read_sensor_values+0x31c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4259      	negs	r1, r3
 8001aca:	414b      	adcs	r3, r1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d11b      	bne.n	8001b0a <read_sensor_values+0x196>
 8001ad2:	4b6d      	ldr	r3, [pc, #436]	; (8001c88 <read_sensor_values+0x314>)
 8001ad4:	785b      	ldrb	r3, [r3, #1]
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	4b6d      	ldr	r3, [pc, #436]	; (8001c90 <read_sensor_values+0x31c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d114      	bne.n	8001b0a <read_sensor_values+0x196>
 8001ae0:	4b69      	ldr	r3, [pc, #420]	; (8001c88 <read_sensor_values+0x314>)
 8001ae2:	789b      	ldrb	r3, [r3, #2]
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	4b6a      	ldr	r3, [pc, #424]	; (8001c90 <read_sensor_values+0x31c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d10d      	bne.n	8001b0a <read_sensor_values+0x196>
 8001aee:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <read_sensor_values+0x314>)
 8001af0:	78db      	ldrb	r3, [r3, #3]
 8001af2:	001a      	movs	r2, r3
 8001af4:	4b66      	ldr	r3, [pc, #408]	; (8001c90 <read_sensor_values+0x31c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4259      	negs	r1, r3
 8001afa:	414b      	adcs	r3, r1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d103      	bne.n	8001b0a <read_sensor_values+0x196>
  error=0;
 8001b02:	4b64      	ldr	r3, [pc, #400]	; (8001c94 <read_sensor_values+0x320>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	e0b8      	b.n	8001c7c <read_sensor_values+0x308>
  else if((sensor[0]==!state)&&(sensor[1]==state)&&(sensor[2]==!state)&&(sensor[3]==!state))
 8001b0a:	4b5f      	ldr	r3, [pc, #380]	; (8001c88 <read_sensor_values+0x314>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	001a      	movs	r2, r3
 8001b10:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <read_sensor_values+0x31c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4259      	negs	r1, r3
 8001b16:	414b      	adcs	r3, r1
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d11e      	bne.n	8001b5c <read_sensor_values+0x1e8>
 8001b1e:	4b5a      	ldr	r3, [pc, #360]	; (8001c88 <read_sensor_values+0x314>)
 8001b20:	785b      	ldrb	r3, [r3, #1]
 8001b22:	001a      	movs	r2, r3
 8001b24:	4b5a      	ldr	r3, [pc, #360]	; (8001c90 <read_sensor_values+0x31c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d117      	bne.n	8001b5c <read_sensor_values+0x1e8>
 8001b2c:	4b56      	ldr	r3, [pc, #344]	; (8001c88 <read_sensor_values+0x314>)
 8001b2e:	789b      	ldrb	r3, [r3, #2]
 8001b30:	001a      	movs	r2, r3
 8001b32:	4b57      	ldr	r3, [pc, #348]	; (8001c90 <read_sensor_values+0x31c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4259      	negs	r1, r3
 8001b38:	414b      	adcs	r3, r1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d10d      	bne.n	8001b5c <read_sensor_values+0x1e8>
 8001b40:	4b51      	ldr	r3, [pc, #324]	; (8001c88 <read_sensor_values+0x314>)
 8001b42:	78db      	ldrb	r3, [r3, #3]
 8001b44:	001a      	movs	r2, r3
 8001b46:	4b52      	ldr	r3, [pc, #328]	; (8001c90 <read_sensor_values+0x31c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4259      	negs	r1, r3
 8001b4c:	414b      	adcs	r3, r1
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d103      	bne.n	8001b5c <read_sensor_values+0x1e8>
  error=-1;
 8001b54:	4b4f      	ldr	r3, [pc, #316]	; (8001c94 <read_sensor_values+0x320>)
 8001b56:	4a51      	ldr	r2, [pc, #324]	; (8001c9c <read_sensor_values+0x328>)
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	e08f      	b.n	8001c7c <read_sensor_values+0x308>
  else if((sensor[0]==state)&&(sensor[1]==state)&&(sensor[2]==!state)&&(sensor[3]==!state))
 8001b5c:	4b4a      	ldr	r3, [pc, #296]	; (8001c88 <read_sensor_values+0x314>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	001a      	movs	r2, r3
 8001b62:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <read_sensor_values+0x31c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d11f      	bne.n	8001baa <read_sensor_values+0x236>
 8001b6a:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <read_sensor_values+0x314>)
 8001b6c:	785b      	ldrb	r3, [r3, #1]
 8001b6e:	001a      	movs	r2, r3
 8001b70:	4b47      	ldr	r3, [pc, #284]	; (8001c90 <read_sensor_values+0x31c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d118      	bne.n	8001baa <read_sensor_values+0x236>
 8001b78:	4b43      	ldr	r3, [pc, #268]	; (8001c88 <read_sensor_values+0x314>)
 8001b7a:	789b      	ldrb	r3, [r3, #2]
 8001b7c:	001a      	movs	r2, r3
 8001b7e:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <read_sensor_values+0x31c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4259      	negs	r1, r3
 8001b84:	414b      	adcs	r3, r1
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d10e      	bne.n	8001baa <read_sensor_values+0x236>
 8001b8c:	4b3e      	ldr	r3, [pc, #248]	; (8001c88 <read_sensor_values+0x314>)
 8001b8e:	78db      	ldrb	r3, [r3, #3]
 8001b90:	001a      	movs	r2, r3
 8001b92:	4b3f      	ldr	r3, [pc, #252]	; (8001c90 <read_sensor_values+0x31c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4259      	negs	r1, r3
 8001b98:	414b      	adcs	r3, r1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d104      	bne.n	8001baa <read_sensor_values+0x236>
  error=-2;
 8001ba0:	4b3c      	ldr	r3, [pc, #240]	; (8001c94 <read_sensor_values+0x320>)
 8001ba2:	22c0      	movs	r2, #192	; 0xc0
 8001ba4:	0612      	lsls	r2, r2, #24
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e068      	b.n	8001c7c <read_sensor_values+0x308>
  else if((sensor[0]==state)&&(sensor[1]==!state)&&(sensor[2]==!state)&&(sensor[3]==!state))
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <read_sensor_values+0x314>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	001a      	movs	r2, r3
 8001bb0:	4b37      	ldr	r3, [pc, #220]	; (8001c90 <read_sensor_values+0x31c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d121      	bne.n	8001bfc <read_sensor_values+0x288>
 8001bb8:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <read_sensor_values+0x314>)
 8001bba:	785b      	ldrb	r3, [r3, #1]
 8001bbc:	001a      	movs	r2, r3
 8001bbe:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <read_sensor_values+0x31c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4259      	negs	r1, r3
 8001bc4:	414b      	adcs	r3, r1
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d117      	bne.n	8001bfc <read_sensor_values+0x288>
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <read_sensor_values+0x314>)
 8001bce:	789b      	ldrb	r3, [r3, #2]
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <read_sensor_values+0x31c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4259      	negs	r1, r3
 8001bd8:	414b      	adcs	r3, r1
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d10d      	bne.n	8001bfc <read_sensor_values+0x288>
 8001be0:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <read_sensor_values+0x314>)
 8001be2:	78db      	ldrb	r3, [r3, #3]
 8001be4:	001a      	movs	r2, r3
 8001be6:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <read_sensor_values+0x31c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4259      	negs	r1, r3
 8001bec:	414b      	adcs	r3, r1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d103      	bne.n	8001bfc <read_sensor_values+0x288>
  error=-3;
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <read_sensor_values+0x320>)
 8001bf6:	4a2a      	ldr	r2, [pc, #168]	; (8001ca0 <read_sensor_values+0x32c>)
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	e03f      	b.n	8001c7c <read_sensor_values+0x308>
  else if((sensor[0]==!state)&&(sensor[1]==!state)&&(sensor[2]==!state)&&(sensor[3]==!state)&&(sensor[4]==!state))
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <read_sensor_values+0x314>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	001a      	movs	r2, r3
 8001c02:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <read_sensor_values+0x31c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4259      	negs	r1, r3
 8001c08:	414b      	adcs	r3, r1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d135      	bne.n	8001c7c <read_sensor_values+0x308>
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <read_sensor_values+0x314>)
 8001c12:	785b      	ldrb	r3, [r3, #1]
 8001c14:	001a      	movs	r2, r3
 8001c16:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <read_sensor_values+0x31c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4259      	negs	r1, r3
 8001c1c:	414b      	adcs	r3, r1
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d12b      	bne.n	8001c7c <read_sensor_values+0x308>
 8001c24:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <read_sensor_values+0x314>)
 8001c26:	789b      	ldrb	r3, [r3, #2]
 8001c28:	001a      	movs	r2, r3
 8001c2a:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <read_sensor_values+0x31c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4259      	negs	r1, r3
 8001c30:	414b      	adcs	r3, r1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d121      	bne.n	8001c7c <read_sensor_values+0x308>
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <read_sensor_values+0x314>)
 8001c3a:	78db      	ldrb	r3, [r3, #3]
 8001c3c:	001a      	movs	r2, r3
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <read_sensor_values+0x31c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4259      	negs	r1, r3
 8001c44:	414b      	adcs	r3, r1
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d117      	bne.n	8001c7c <read_sensor_values+0x308>
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <read_sensor_values+0x314>)
 8001c4e:	791b      	ldrb	r3, [r3, #4]
 8001c50:	001a      	movs	r2, r3
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <read_sensor_values+0x31c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4259      	negs	r1, r3
 8001c58:	414b      	adcs	r3, r1
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d10d      	bne.n	8001c7c <read_sensor_values+0x308>
    {
	  if(pre_error==-3) error=-4;
 8001c60:	490f      	ldr	r1, [pc, #60]	; (8001ca0 <read_sensor_values+0x32c>)
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7fe fae8 	bl	8000238 <__aeabi_fcmpeq>
 8001c68:	1e03      	subs	r3, r0, #0
 8001c6a:	d003      	beq.n	8001c74 <read_sensor_values+0x300>
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <read_sensor_values+0x320>)
 8001c6e:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <read_sensor_values+0x330>)
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e003      	b.n	8001c7c <read_sensor_values+0x308>
      else error=4;
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <read_sensor_values+0x320>)
 8001c76:	2281      	movs	r2, #129	; 0x81
 8001c78:	05d2      	lsls	r2, r2, #23
 8001c7a:	601a      	str	r2, [r3, #0]
    }
  return error;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <read_sensor_values+0x320>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	1c18      	adds	r0, r3, #0
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b002      	add	sp, #8
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	2000006c 	.word	0x2000006c
 8001c8c:	48000400 	.word	0x48000400
 8001c90:	20000064 	.word	0x20000064
 8001c94:	20000068 	.word	0x20000068
 8001c98:	40400000 	.word	0x40400000
 8001c9c:	bf800000 	.word	0xbf800000
 8001ca0:	c0400000 	.word	0xc0400000
 8001ca4:	c0800000 	.word	0xc0800000

08001ca8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cae:	240c      	movs	r4, #12
 8001cb0:	193b      	adds	r3, r7, r4
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	2314      	movs	r3, #20
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	2100      	movs	r1, #0
 8001cba:	f003 fa97 	bl	80051ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	4b2c      	ldr	r3, [pc, #176]	; (8001d70 <MX_GPIO_Init+0xc8>)
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <MX_GPIO_Init+0xc8>)
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	02c9      	lsls	r1, r1, #11
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	615a      	str	r2, [r3, #20]
 8001ccc:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <MX_GPIO_Init+0xc8>)
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	02db      	lsls	r3, r3, #11
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <MX_GPIO_Init+0xc8>)
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <MX_GPIO_Init+0xc8>)
 8001ce0:	2180      	movs	r1, #128	; 0x80
 8001ce2:	0289      	lsls	r1, r1, #10
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	615a      	str	r2, [r3, #20]
 8001ce8:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <MX_GPIO_Init+0xc8>)
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	029b      	lsls	r3, r3, #10
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN4_Pin|IN3_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001cf6:	491f      	ldr	r1, [pc, #124]	; (8001d74 <MX_GPIO_Init+0xcc>)
 8001cf8:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <MX_GPIO_Init+0xd0>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f001 f800 	bl	8002d02 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IN4_Pin|IN3_Pin|IN2_Pin|IN1_Pin;
 8001d02:	193b      	adds	r3, r7, r4
 8001d04:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <MX_GPIO_Init+0xcc>)
 8001d06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d08:	193b      	adds	r3, r7, r4
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	193b      	adds	r3, r7, r4
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	193b      	adds	r3, r7, r4
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1a:	193b      	adds	r3, r7, r4
 8001d1c:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <MX_GPIO_Init+0xd0>)
 8001d1e:	0019      	movs	r1, r3
 8001d20:	0010      	movs	r0, r2
 8001d22:	f000 fe61 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IS5_Pin|IS1_Pin;
 8001d26:	193b      	adds	r3, r7, r4
 8001d28:	2290      	movs	r2, #144	; 0x90
 8001d2a:	0212      	lsls	r2, r2, #8
 8001d2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d2e:	193b      	adds	r3, r7, r4
 8001d30:	2200      	movs	r2, #0
 8001d32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	193a      	adds	r2, r7, r4
 8001d3c:	2390      	movs	r3, #144	; 0x90
 8001d3e:	05db      	lsls	r3, r3, #23
 8001d40:	0011      	movs	r1, r2
 8001d42:	0018      	movs	r0, r3
 8001d44:	f000 fe50 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IS2_Pin|IS3_Pin|IS4_Pin;
 8001d48:	193b      	adds	r3, r7, r4
 8001d4a:	2238      	movs	r2, #56	; 0x38
 8001d4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d4e:	193b      	adds	r3, r7, r4
 8001d50:	2200      	movs	r2, #0
 8001d52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	193b      	adds	r3, r7, r4
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5a:	193b      	adds	r3, r7, r4
 8001d5c:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <MX_GPIO_Init+0xd0>)
 8001d5e:	0019      	movs	r1, r3
 8001d60:	0010      	movs	r0, r2
 8001d62:	f000 fe41 	bl	80029e8 <HAL_GPIO_Init>

}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b009      	add	sp, #36	; 0x24
 8001d6c:	bd90      	pop	{r4, r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	40021000 	.word	0x40021000
 8001d74:	00000c03 	.word	0x00000c03
 8001d78:	48000400 	.word	0x48000400

08001d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d80:	f000 fcaa 	bl	80026d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d84:	f000 f822 	bl	8001dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d88:	f7ff ff8e 	bl	8001ca8 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001d8c:	f000 f9f0 	bl	8002170 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001d90:	f000 fa2a 	bl	80021e8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001d94:	f000 faac 	bl	80022f0 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8001d98:	f000 fbee 	bl	8002578 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_Base_Start(&htim16);
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <main+0x40>)
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f001 fd60 	bl	8003864 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17);
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <main+0x44>)
 8001da6:	0018      	movs	r0, r3
 8001da8:	f001 fd5c 	bl	8003864 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart1, &Rx_data, 1);
 8001dac:	4905      	ldr	r1, [pc, #20]	; (8001dc4 <main+0x48>)
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <main+0x4c>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	0018      	movs	r0, r3
 8001db4:	f002 fbf2 	bl	800459c <HAL_UART_Receive_IT>
//  HAL_TIM_Base_Stop_IT(&htim6);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <main+0x3c>
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	200000f8 	.word	0x200000f8
 8001dc0:	20000078 	.word	0x20000078
 8001dc4:	20000074 	.word	0x20000074
 8001dc8:	20000138 	.word	0x20000138

08001dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b097      	sub	sp, #92	; 0x5c
 8001dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd2:	2428      	movs	r4, #40	; 0x28
 8001dd4:	193b      	adds	r3, r7, r4
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	2330      	movs	r3, #48	; 0x30
 8001dda:	001a      	movs	r2, r3
 8001ddc:	2100      	movs	r1, #0
 8001dde:	f003 fa05 	bl	80051ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de2:	2318      	movs	r3, #24
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	0018      	movs	r0, r3
 8001de8:	2310      	movs	r3, #16
 8001dea:	001a      	movs	r2, r3
 8001dec:	2100      	movs	r1, #0
 8001dee:	f003 f9fd 	bl	80051ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	0018      	movs	r0, r3
 8001df6:	2314      	movs	r3, #20
 8001df8:	001a      	movs	r2, r3
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	f003 f9f6 	bl	80051ec <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e00:	0021      	movs	r1, r4
 8001e02:	187b      	adds	r3, r7, r1
 8001e04:	2202      	movs	r2, #2
 8001e06:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e08:	187b      	adds	r3, r7, r1
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	2210      	movs	r2, #16
 8001e12:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	2200      	movs	r2, #0
 8001e18:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e1a:	187b      	adds	r3, r7, r1
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f000 ffa9 	bl	8002d74 <HAL_RCC_OscConfig>
 8001e22:	1e03      	subs	r3, r0, #0
 8001e24:	d001      	beq.n	8001e2a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001e26:	f000 f941 	bl	80020ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e2a:	2118      	movs	r1, #24
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	2207      	movs	r2, #7
 8001e30:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e32:	187b      	adds	r3, r7, r1
 8001e34:	2200      	movs	r2, #0
 8001e36:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e3e:	187b      	adds	r3, r7, r1
 8001e40:	2200      	movs	r2, #0
 8001e42:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	2100      	movs	r1, #0
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f001 faaf 	bl	80033ac <HAL_RCC_ClockConfig>
 8001e4e:	1e03      	subs	r3, r0, #0
 8001e50:	d001      	beq.n	8001e56 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001e52:	f000 f92b 	bl	80020ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	0018      	movs	r0, r3
 8001e66:	f001 fbf3 	bl	8003650 <HAL_RCCEx_PeriphCLKConfig>
 8001e6a:	1e03      	subs	r3, r0, #0
 8001e6c:	d001      	beq.n	8001e72 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001e6e:	f000 f91d 	bl	80020ac <Error_Handler>
  }
}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b017      	add	sp, #92	; 0x5c
 8001e78:	bd90      	pop	{r4, r7, pc}
	...

08001e7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	float error;
	float pre_error = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
	if(htim->Instance == htim6.Instance)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d13f      	bne.n	8001f14 <HAL_TIM_PeriodElapsedCallback+0x98>
	{
		error= read_sensor_values(pre_error);
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	1c18      	adds	r0, r3, #0
 8001e98:	f7ff fd6c 	bl	8001974 <read_sensor_values>
 8001e9c:	1c03      	adds	r3, r0, #0
 8001e9e:	613b      	str	r3, [r7, #16]
		PID_PROCESS(&PID_set_parameters, error, 0);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6939      	ldr	r1, [r7, #16]
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f7ff fc3e 	bl	8001728 <PID_PROCESS>
		forward();
 8001eac:	f7ff fbf8 	bl	80016a0 <forward>
		HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001eb0:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f001 fd77 	bl	80039a8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f001 fd72 	bl	80039a8 <HAL_TIM_PWM_Start>

		uint8_t right_value = (uint8_t)(PID_ReadValue_right (&PID_set_parameters))+40;
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f7ff fd4a 	bl	8001960 <PID_ReadValue_right>
 8001ecc:	1c03      	adds	r3, r0, #0
 8001ece:	1c18      	adds	r0, r3, #0
 8001ed0:	f7fe f9e0 	bl	8000294 <__aeabi_f2uiz>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	240f      	movs	r4, #15
 8001eda:	193b      	adds	r3, r7, r4
 8001edc:	3228      	adds	r2, #40	; 0x28
 8001ede:	701a      	strb	r2, [r3, #0]
		uint8_t left_value = (uint8_t)(PID_ReadValue_left (&PID_set_parameters))+40;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f7ff fd32 	bl	800194c <PID_ReadValue_left>
 8001ee8:	1c03      	adds	r3, r0, #0
 8001eea:	1c18      	adds	r0, r3, #0
 8001eec:	f7fe f9d2 	bl	8000294 <__aeabi_f2uiz>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	210e      	movs	r1, #14
 8001ef6:	187b      	adds	r3, r7, r1
 8001ef8:	3228      	adds	r2, #40	; 0x28
 8001efa:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,right_value);
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	193a      	adds	r2, r7, r4
 8001f02:	7812      	ldrb	r2, [r2, #0]
 8001f04:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,left_value);
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	187a      	adds	r2, r7, r1
 8001f0c:	7812      	ldrb	r2, [r2, #0]
 8001f0e:	635a      	str	r2, [r3, #52]	; 0x34

		pre_error=error;
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	617b      	str	r3, [r7, #20]
	}
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b007      	add	sp, #28
 8001f1a:	bd90      	pop	{r4, r7, pc}
 8001f1c:	200000b8 	.word	0x200000b8
 8001f20:	20000000 	.word	0x20000000
 8001f24:	200000f8 	.word	0x200000f8
 8001f28:	20000078 	.word	0x20000078

08001f2c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	015b      	lsls	r3, r3, #5
 8001f38:	4a55      	ldr	r2, [pc, #340]	; (8002090 <HAL_UART_RxCpltCallback+0x164>)
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	0010      	movs	r0, r2
 8001f3e:	f000 fefd 	bl	8002d3c <HAL_GPIO_TogglePin>
	if (huart->Instance == USART1)  //current UART
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a53      	ldr	r2, [pc, #332]	; (8002094 <HAL_UART_RxCpltCallback+0x168>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d000      	beq.n	8001f4e <HAL_UART_RxCpltCallback+0x22>
 8001f4c:	e09b      	b.n	8002086 <HAL_UART_RxCpltCallback+0x15a>
	{
		if(Rx_data[0] == 'f'){
 8001f4e:	4b52      	ldr	r3, [pc, #328]	; (8002098 <HAL_UART_RxCpltCallback+0x16c>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b66      	cmp	r3, #102	; 0x66
 8001f54:	d118      	bne.n	8001f88 <HAL_UART_RxCpltCallback+0x5c>
								HAL_TIM_Base_Stop_IT(&htim6);
 8001f56:	4b51      	ldr	r3, [pc, #324]	; (800209c <HAL_UART_RxCpltCallback+0x170>)
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f001 fcc7 	bl	80038ec <HAL_TIM_Base_Stop_IT>
								forward();
 8001f5e:	f7ff fb9f 	bl	80016a0 <forward>
								HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001f62:	4b4f      	ldr	r3, [pc, #316]	; (80020a0 <HAL_UART_RxCpltCallback+0x174>)
 8001f64:	2100      	movs	r1, #0
 8001f66:	0018      	movs	r0, r3
 8001f68:	f001 fd1e 	bl	80039a8 <HAL_TIM_PWM_Start>
								HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001f6c:	4b4d      	ldr	r3, [pc, #308]	; (80020a4 <HAL_UART_RxCpltCallback+0x178>)
 8001f6e:	2100      	movs	r1, #0
 8001f70:	0018      	movs	r0, r3
 8001f72:	f001 fd19 	bl	80039a8 <HAL_TIM_PWM_Start>
								__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1, 80);
 8001f76:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <HAL_UART_RxCpltCallback+0x174>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2250      	movs	r2, #80	; 0x50
 8001f7c:	635a      	str	r2, [r3, #52]	; 0x34
								__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1, 80);
 8001f7e:	4b49      	ldr	r3, [pc, #292]	; (80020a4 <HAL_UART_RxCpltCallback+0x178>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2250      	movs	r2, #80	; 0x50
 8001f84:	635a      	str	r2, [r3, #52]	; 0x34
 8001f86:	e078      	b.n	800207a <HAL_UART_RxCpltCallback+0x14e>
							}

		else if(Rx_data[0] == 'b'){
 8001f88:	4b43      	ldr	r3, [pc, #268]	; (8002098 <HAL_UART_RxCpltCallback+0x16c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b62      	cmp	r3, #98	; 0x62
 8001f8e:	d118      	bne.n	8001fc2 <HAL_UART_RxCpltCallback+0x96>
								HAL_TIM_Base_Stop_IT(&htim6);
 8001f90:	4b42      	ldr	r3, [pc, #264]	; (800209c <HAL_UART_RxCpltCallback+0x170>)
 8001f92:	0018      	movs	r0, r3
 8001f94:	f001 fcaa 	bl	80038ec <HAL_TIM_Base_Stop_IT>
								backward();
 8001f98:	f7ff fba4 	bl	80016e4 <backward>
								HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001f9c:	4b40      	ldr	r3, [pc, #256]	; (80020a0 <HAL_UART_RxCpltCallback+0x174>)
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f001 fd01 	bl	80039a8 <HAL_TIM_PWM_Start>
								HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001fa6:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <HAL_UART_RxCpltCallback+0x178>)
 8001fa8:	2100      	movs	r1, #0
 8001faa:	0018      	movs	r0, r3
 8001fac:	f001 fcfc 	bl	80039a8 <HAL_TIM_PWM_Start>
								__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1, 80);
 8001fb0:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <HAL_UART_RxCpltCallback+0x174>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2250      	movs	r2, #80	; 0x50
 8001fb6:	635a      	str	r2, [r3, #52]	; 0x34
								__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1, 80);
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <HAL_UART_RxCpltCallback+0x178>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2250      	movs	r2, #80	; 0x50
 8001fbe:	635a      	str	r2, [r3, #52]	; 0x34
 8001fc0:	e05b      	b.n	800207a <HAL_UART_RxCpltCallback+0x14e>
							}

		else if(Rx_data[0] == 'l'){
 8001fc2:	4b35      	ldr	r3, [pc, #212]	; (8002098 <HAL_UART_RxCpltCallback+0x16c>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b6c      	cmp	r3, #108	; 0x6c
 8001fc8:	d118      	bne.n	8001ffc <HAL_UART_RxCpltCallback+0xd0>
								HAL_TIM_Base_Stop_IT(&htim6);
 8001fca:	4b34      	ldr	r3, [pc, #208]	; (800209c <HAL_UART_RxCpltCallback+0x170>)
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f001 fc8d 	bl	80038ec <HAL_TIM_Base_Stop_IT>
								forward();
 8001fd2:	f7ff fb65 	bl	80016a0 <forward>
								HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001fd6:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_UART_RxCpltCallback+0x174>)
 8001fd8:	2100      	movs	r1, #0
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f001 fce4 	bl	80039a8 <HAL_TIM_PWM_Start>
								HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001fe0:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <HAL_UART_RxCpltCallback+0x178>)
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f001 fcdf 	bl	80039a8 <HAL_TIM_PWM_Start>
								__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1, 0);
 8001fea:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_UART_RxCpltCallback+0x174>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	635a      	str	r2, [r3, #52]	; 0x34
								__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1, 80);
 8001ff2:	4b2c      	ldr	r3, [pc, #176]	; (80020a4 <HAL_UART_RxCpltCallback+0x178>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2250      	movs	r2, #80	; 0x50
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
 8001ffa:	e03e      	b.n	800207a <HAL_UART_RxCpltCallback+0x14e>
							}
		else if(Rx_data[0] == 'r'){
 8001ffc:	4b26      	ldr	r3, [pc, #152]	; (8002098 <HAL_UART_RxCpltCallback+0x16c>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b72      	cmp	r3, #114	; 0x72
 8002002:	d118      	bne.n	8002036 <HAL_UART_RxCpltCallback+0x10a>
								HAL_TIM_Base_Stop_IT(&htim6);
 8002004:	4b25      	ldr	r3, [pc, #148]	; (800209c <HAL_UART_RxCpltCallback+0x170>)
 8002006:	0018      	movs	r0, r3
 8002008:	f001 fc70 	bl	80038ec <HAL_TIM_Base_Stop_IT>
								forward();
 800200c:	f7ff fb48 	bl	80016a0 <forward>
								HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8002010:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <HAL_UART_RxCpltCallback+0x174>)
 8002012:	2100      	movs	r1, #0
 8002014:	0018      	movs	r0, r3
 8002016:	f001 fcc7 	bl	80039a8 <HAL_TIM_PWM_Start>
								HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <HAL_UART_RxCpltCallback+0x178>)
 800201c:	2100      	movs	r1, #0
 800201e:	0018      	movs	r0, r3
 8002020:	f001 fcc2 	bl	80039a8 <HAL_TIM_PWM_Start>
								__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1, 80);
 8002024:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_UART_RxCpltCallback+0x174>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2250      	movs	r2, #80	; 0x50
 800202a:	635a      	str	r2, [r3, #52]	; 0x34
								__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1, 0);
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_UART_RxCpltCallback+0x178>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2200      	movs	r2, #0
 8002032:	635a      	str	r2, [r3, #52]	; 0x34
 8002034:	e021      	b.n	800207a <HAL_UART_RxCpltCallback+0x14e>
							}
		else if(Rx_data[0] == 'i'){
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_UART_RxCpltCallback+0x16c>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b69      	cmp	r3, #105	; 0x69
 800203c:	d10c      	bne.n	8002058 <HAL_UART_RxCpltCallback+0x12c>
								HAL_TIM_Base_Stop_IT(&htim6);
 800203e:	4b17      	ldr	r3, [pc, #92]	; (800209c <HAL_UART_RxCpltCallback+0x170>)
 8002040:	0018      	movs	r0, r3
 8002042:	f001 fc53 	bl	80038ec <HAL_TIM_Base_Stop_IT>
								__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,0);
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_UART_RxCpltCallback+0x174>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2200      	movs	r2, #0
 800204c:	635a      	str	r2, [r3, #52]	; 0x34
								__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,0);
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_UART_RxCpltCallback+0x178>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2200      	movs	r2, #0
 8002054:	635a      	str	r2, [r3, #52]	; 0x34
 8002056:	e010      	b.n	800207a <HAL_UART_RxCpltCallback+0x14e>
							}




		else if(Rx_data[0] == 'k'){
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <HAL_UART_RxCpltCallback+0x16c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b6b      	cmp	r3, #107	; 0x6b
 800205e:	d104      	bne.n	800206a <HAL_UART_RxCpltCallback+0x13e>
						HAL_TIM_Base_Start_IT(&htim6);
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_UART_RxCpltCallback+0x170>)
 8002062:	0018      	movs	r0, r3
 8002064:	f001 fc20 	bl	80038a8 <HAL_TIM_Base_Start_IT>
 8002068:	e007      	b.n	800207a <HAL_UART_RxCpltCallback+0x14e>
	    }
		else if(Rx_data[0] == 'd'){
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_UART_RxCpltCallback+0x16c>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d103      	bne.n	800207a <HAL_UART_RxCpltCallback+0x14e>
			HAL_TIM_Base_Stop_IT(&htim6);
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_UART_RxCpltCallback+0x170>)
 8002074:	0018      	movs	r0, r3
 8002076:	f001 fc39 	bl	80038ec <HAL_TIM_Base_Stop_IT>
		}
	 HAL_UART_Receive_IT(&huart1, (uint8_t *) Rx_data, 1);
 800207a:	4907      	ldr	r1, [pc, #28]	; (8002098 <HAL_UART_RxCpltCallback+0x16c>)
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_UART_RxCpltCallback+0x17c>)
 800207e:	2201      	movs	r2, #1
 8002080:	0018      	movs	r0, r3
 8002082:	f002 fa8b 	bl	800459c <HAL_UART_Receive_IT>
}
}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b002      	add	sp, #8
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	48000400 	.word	0x48000400
 8002094:	40013800 	.word	0x40013800
 8002098:	20000074 	.word	0x20000074
 800209c:	200000b8 	.word	0x200000b8
 80020a0:	200000f8 	.word	0x200000f8
 80020a4:	20000078 	.word	0x20000078
 80020a8:	20000138 	.word	0x20000138

080020ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020b0:	46c0      	nop			; (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <HAL_MspInit+0x44>)
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_MspInit+0x44>)
 80020c4:	2101      	movs	r1, #1
 80020c6:	430a      	orrs	r2, r1
 80020c8:	619a      	str	r2, [r3, #24]
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_MspInit+0x44>)
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2201      	movs	r2, #1
 80020d0:	4013      	ands	r3, r2
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_MspInit+0x44>)
 80020d8:	69da      	ldr	r2, [r3, #28]
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_MspInit+0x44>)
 80020dc:	2180      	movs	r1, #128	; 0x80
 80020de:	0549      	lsls	r1, r1, #21
 80020e0:	430a      	orrs	r2, r1
 80020e2:	61da      	str	r2, [r3, #28]
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_MspInit+0x44>)
 80020e6:	69da      	ldr	r2, [r3, #28]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	055b      	lsls	r3, r3, #21
 80020ec:	4013      	ands	r3, r2
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b002      	add	sp, #8
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	40021000 	.word	0x40021000

08002100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210e:	e7fe      	b.n	800210e <HardFault_Handler+0x4>

08002110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002128:	f000 fb1e 	bl	8002768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800212c:	46c0      	nop			; (mov r8, r8)
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <TIM6_DAC_IRQHandler+0x14>)
 800213a:	0018      	movs	r0, r3
 800213c:	f001 fc80 	bl	8003a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	200000b8 	.word	0x200000b8

0800214c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <USART1_IRQHandler+0x14>)
 8002152:	0018      	movs	r0, r3
 8002154:	f002 fac6 	bl	80046e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002158:	46c0      	nop			; (mov r8, r8)
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	20000138 	.word	0x20000138

08002164 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002168:	46c0      	nop			; (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <MX_TIM6_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002176:	003b      	movs	r3, r7
 8002178:	0018      	movs	r0, r3
 800217a:	2308      	movs	r3, #8
 800217c:	001a      	movs	r2, r3
 800217e:	2100      	movs	r1, #0
 8002180:	f003 f834 	bl	80051ec <memset>

  htim6.Instance = TIM6;
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <MX_TIM6_Init+0x6c>)
 8002186:	4a16      	ldr	r2, [pc, #88]	; (80021e0 <MX_TIM6_Init+0x70>)
 8002188:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800-1;
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <MX_TIM6_Init+0x6c>)
 800218c:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <MX_TIM6_Init+0x74>)
 800218e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <MX_TIM6_Init+0x6c>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <MX_TIM6_Init+0x6c>)
 8002198:	2263      	movs	r2, #99	; 0x63
 800219a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <MX_TIM6_Init+0x6c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <MX_TIM6_Init+0x6c>)
 80021a4:	0018      	movs	r0, r3
 80021a6:	f001 fb31 	bl	800380c <HAL_TIM_Base_Init>
 80021aa:	1e03      	subs	r3, r0, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80021ae:	f7ff ff7d 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b2:	003b      	movs	r3, r7
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b8:	003b      	movs	r3, r7
 80021ba:	2200      	movs	r2, #0
 80021bc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021be:	003a      	movs	r2, r7
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <MX_TIM6_Init+0x6c>)
 80021c2:	0011      	movs	r1, r2
 80021c4:	0018      	movs	r0, r3
 80021c6:	f002 f8c9 	bl	800435c <HAL_TIMEx_MasterConfigSynchronization>
 80021ca:	1e03      	subs	r3, r0, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80021ce:	f7ff ff6d 	bl	80020ac <Error_Handler>
  }

}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b002      	add	sp, #8
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	200000b8 	.word	0x200000b8
 80021e0:	40001000 	.word	0x40001000
 80021e4:	0000031f 	.word	0x0000031f

080021e8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b090      	sub	sp, #64	; 0x40
 80021ec:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ee:	2324      	movs	r3, #36	; 0x24
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	0018      	movs	r0, r3
 80021f4:	231c      	movs	r3, #28
 80021f6:	001a      	movs	r2, r3
 80021f8:	2100      	movs	r1, #0
 80021fa:	f002 fff7 	bl	80051ec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	0018      	movs	r0, r3
 8002202:	2320      	movs	r3, #32
 8002204:	001a      	movs	r2, r3
 8002206:	2100      	movs	r1, #0
 8002208:	f002 fff0 	bl	80051ec <memset>

  htim16.Instance = TIM16;
 800220c:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <MX_TIM16_Init+0x100>)
 800220e:	4a37      	ldr	r2, [pc, #220]	; (80022ec <MX_TIM16_Init+0x104>)
 8002210:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80-1;
 8002212:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <MX_TIM16_Init+0x100>)
 8002214:	224f      	movs	r2, #79	; 0x4f
 8002216:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002218:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <MX_TIM16_Init+0x100>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100-1;
 800221e:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <MX_TIM16_Init+0x100>)
 8002220:	2263      	movs	r2, #99	; 0x63
 8002222:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002224:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <MX_TIM16_Init+0x100>)
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800222a:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <MX_TIM16_Init+0x100>)
 800222c:	2200      	movs	r2, #0
 800222e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002230:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <MX_TIM16_Init+0x100>)
 8002232:	2280      	movs	r2, #128	; 0x80
 8002234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002236:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <MX_TIM16_Init+0x100>)
 8002238:	0018      	movs	r0, r3
 800223a:	f001 fae7 	bl	800380c <HAL_TIM_Base_Init>
 800223e:	1e03      	subs	r3, r0, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8002242:	f7ff ff33 	bl	80020ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <MX_TIM16_Init+0x100>)
 8002248:	0018      	movs	r0, r3
 800224a:	f001 fb79 	bl	8003940 <HAL_TIM_PWM_Init>
 800224e:	1e03      	subs	r3, r0, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8002252:	f7ff ff2b 	bl	80020ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002256:	2124      	movs	r1, #36	; 0x24
 8002258:	187b      	adds	r3, r7, r1
 800225a:	2260      	movs	r2, #96	; 0x60
 800225c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800225e:	187b      	adds	r3, r7, r1
 8002260:	2200      	movs	r2, #0
 8002262:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002264:	187b      	adds	r3, r7, r1
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800226a:	187b      	adds	r3, r7, r1
 800226c:	2200      	movs	r2, #0
 800226e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002270:	187b      	adds	r3, r7, r1
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002276:	187b      	adds	r3, r7, r1
 8002278:	2200      	movs	r2, #0
 800227a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800227c:	187b      	adds	r3, r7, r1
 800227e:	2200      	movs	r2, #0
 8002280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002282:	1879      	adds	r1, r7, r1
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <MX_TIM16_Init+0x100>)
 8002286:	2200      	movs	r2, #0
 8002288:	0018      	movs	r0, r3
 800228a:	f001 fcef 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 800228e:	1e03      	subs	r3, r0, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8002292:	f7ff ff0b 	bl	80020ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	2200      	movs	r2, #0
 80022a0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	2280      	movs	r2, #128	; 0x80
 80022b8:	0192      	lsls	r2, r2, #6
 80022ba:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80022c2:	1d3a      	adds	r2, r7, #4
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <MX_TIM16_Init+0x100>)
 80022c6:	0011      	movs	r1, r2
 80022c8:	0018      	movs	r0, r3
 80022ca:	f002 f8a5 	bl	8004418 <HAL_TIMEx_ConfigBreakDeadTime>
 80022ce:	1e03      	subs	r3, r0, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 80022d2:	f7ff feeb 	bl	80020ac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim16);
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <MX_TIM16_Init+0x100>)
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 f8df 	bl	800249c <HAL_TIM_MspPostInit>

}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b010      	add	sp, #64	; 0x40
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	200000f8 	.word	0x200000f8
 80022ec:	40014400 	.word	0x40014400

080022f0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b090      	sub	sp, #64	; 0x40
 80022f4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022f6:	2324      	movs	r3, #36	; 0x24
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	0018      	movs	r0, r3
 80022fc:	231c      	movs	r3, #28
 80022fe:	001a      	movs	r2, r3
 8002300:	2100      	movs	r1, #0
 8002302:	f002 ff73 	bl	80051ec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	0018      	movs	r0, r3
 800230a:	2320      	movs	r3, #32
 800230c:	001a      	movs	r2, r3
 800230e:	2100      	movs	r1, #0
 8002310:	f002 ff6c 	bl	80051ec <memset>

  htim17.Instance = TIM17;
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <MX_TIM17_Init+0x100>)
 8002316:	4a37      	ldr	r2, [pc, #220]	; (80023f4 <MX_TIM17_Init+0x104>)
 8002318:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 80-1;
 800231a:	4b35      	ldr	r3, [pc, #212]	; (80023f0 <MX_TIM17_Init+0x100>)
 800231c:	224f      	movs	r2, #79	; 0x4f
 800231e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002320:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <MX_TIM17_Init+0x100>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 8002326:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <MX_TIM17_Init+0x100>)
 8002328:	2263      	movs	r2, #99	; 0x63
 800232a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232c:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <MX_TIM17_Init+0x100>)
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002332:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <MX_TIM17_Init+0x100>)
 8002334:	2200      	movs	r2, #0
 8002336:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <MX_TIM17_Init+0x100>)
 800233a:	2280      	movs	r2, #128	; 0x80
 800233c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800233e:	4b2c      	ldr	r3, [pc, #176]	; (80023f0 <MX_TIM17_Init+0x100>)
 8002340:	0018      	movs	r0, r3
 8002342:	f001 fa63 	bl	800380c <HAL_TIM_Base_Init>
 8002346:	1e03      	subs	r3, r0, #0
 8002348:	d001      	beq.n	800234e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800234a:	f7ff feaf 	bl	80020ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <MX_TIM17_Init+0x100>)
 8002350:	0018      	movs	r0, r3
 8002352:	f001 faf5 	bl	8003940 <HAL_TIM_PWM_Init>
 8002356:	1e03      	subs	r3, r0, #0
 8002358:	d001      	beq.n	800235e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800235a:	f7ff fea7 	bl	80020ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800235e:	2124      	movs	r1, #36	; 0x24
 8002360:	187b      	adds	r3, r7, r1
 8002362:	2260      	movs	r2, #96	; 0x60
 8002364:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002366:	187b      	adds	r3, r7, r1
 8002368:	2200      	movs	r2, #0
 800236a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800236c:	187b      	adds	r3, r7, r1
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002372:	187b      	adds	r3, r7, r1
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002378:	187b      	adds	r3, r7, r1
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800237e:	187b      	adds	r3, r7, r1
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002384:	187b      	adds	r3, r7, r1
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800238a:	1879      	adds	r1, r7, r1
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <MX_TIM17_Init+0x100>)
 800238e:	2200      	movs	r2, #0
 8002390:	0018      	movs	r0, r3
 8002392:	f001 fc6b 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 8002396:	1e03      	subs	r3, r0, #0
 8002398:	d001      	beq.n	800239e <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800239a:	f7ff fe87 	bl	80020ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800239e:	1d3b      	adds	r3, r7, #4
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	2200      	movs	r2, #0
 80023a8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	2200      	movs	r2, #0
 80023b4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2280      	movs	r2, #128	; 0x80
 80023c0:	0192      	lsls	r2, r2, #6
 80023c2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	2200      	movs	r2, #0
 80023c8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80023ca:	1d3a      	adds	r2, r7, #4
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <MX_TIM17_Init+0x100>)
 80023ce:	0011      	movs	r1, r2
 80023d0:	0018      	movs	r0, r3
 80023d2:	f002 f821 	bl	8004418 <HAL_TIMEx_ConfigBreakDeadTime>
 80023d6:	1e03      	subs	r3, r0, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 80023da:	f7ff fe67 	bl	80020ac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 80023de:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <MX_TIM17_Init+0x100>)
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 f85b 	bl	800249c <HAL_TIM_MspPostInit>

}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b010      	add	sp, #64	; 0x40
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	20000078 	.word	0x20000078
 80023f4:	40014800 	.word	0x40014800

080023f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a21      	ldr	r2, [pc, #132]	; (800248c <HAL_TIM_Base_MspInit+0x94>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d114      	bne.n	8002434 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800240a:	4b21      	ldr	r3, [pc, #132]	; (8002490 <HAL_TIM_Base_MspInit+0x98>)
 800240c:	69da      	ldr	r2, [r3, #28]
 800240e:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_TIM_Base_MspInit+0x98>)
 8002410:	2110      	movs	r1, #16
 8002412:	430a      	orrs	r2, r1
 8002414:	61da      	str	r2, [r3, #28]
 8002416:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <HAL_TIM_Base_MspInit+0x98>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	2210      	movs	r2, #16
 800241c:	4013      	ands	r3, r2
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2102      	movs	r1, #2
 8002426:	2011      	movs	r0, #17
 8002428:	f000 fa66 	bl	80028f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800242c:	2011      	movs	r0, #17
 800242e:	f000 fa78 	bl	8002922 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002432:	e026      	b.n	8002482 <HAL_TIM_Base_MspInit+0x8a>
  else if(tim_baseHandle->Instance==TIM16)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a16      	ldr	r2, [pc, #88]	; (8002494 <HAL_TIM_Base_MspInit+0x9c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d10e      	bne.n	800245c <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <HAL_TIM_Base_MspInit+0x98>)
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	4b13      	ldr	r3, [pc, #76]	; (8002490 <HAL_TIM_Base_MspInit+0x98>)
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	0289      	lsls	r1, r1, #10
 8002448:	430a      	orrs	r2, r1
 800244a:	619a      	str	r2, [r3, #24]
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_TIM_Base_MspInit+0x98>)
 800244e:	699a      	ldr	r2, [r3, #24]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	029b      	lsls	r3, r3, #10
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
}
 800245a:	e012      	b.n	8002482 <HAL_TIM_Base_MspInit+0x8a>
  else if(tim_baseHandle->Instance==TIM17)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <HAL_TIM_Base_MspInit+0xa0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d10d      	bne.n	8002482 <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_TIM_Base_MspInit+0x98>)
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_TIM_Base_MspInit+0x98>)
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	02c9      	lsls	r1, r1, #11
 8002470:	430a      	orrs	r2, r1
 8002472:	619a      	str	r2, [r3, #24]
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_TIM_Base_MspInit+0x98>)
 8002476:	699a      	ldr	r2, [r3, #24]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	02db      	lsls	r3, r3, #11
 800247c:	4013      	ands	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	46bd      	mov	sp, r7
 8002486:	b006      	add	sp, #24
 8002488:	bd80      	pop	{r7, pc}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	40001000 	.word	0x40001000
 8002490:	40021000 	.word	0x40021000
 8002494:	40014400 	.word	0x40014400
 8002498:	40014800 	.word	0x40014800

0800249c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	2314      	movs	r3, #20
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	0018      	movs	r0, r3
 80024aa:	2314      	movs	r3, #20
 80024ac:	001a      	movs	r2, r3
 80024ae:	2100      	movs	r1, #0
 80024b0:	f002 fe9c 	bl	80051ec <memset>
  if(timHandle->Instance==TIM16)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a2b      	ldr	r2, [pc, #172]	; (8002568 <HAL_TIM_MspPostInit+0xcc>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d125      	bne.n	800250a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024be:	4b2b      	ldr	r3, [pc, #172]	; (800256c <HAL_TIM_MspPostInit+0xd0>)
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	4b2a      	ldr	r3, [pc, #168]	; (800256c <HAL_TIM_MspPostInit+0xd0>)
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	02c9      	lsls	r1, r1, #11
 80024c8:	430a      	orrs	r2, r1
 80024ca:	615a      	str	r2, [r3, #20]
 80024cc:	4b27      	ldr	r3, [pc, #156]	; (800256c <HAL_TIM_MspPostInit+0xd0>)
 80024ce:	695a      	ldr	r2, [r3, #20]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	02db      	lsls	r3, r3, #11
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration    
    PB8     ------> TIM16_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024da:	2114      	movs	r1, #20
 80024dc:	187b      	adds	r3, r7, r1
 80024de:	2280      	movs	r2, #128	; 0x80
 80024e0:	0052      	lsls	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	2202      	movs	r2, #2
 80024e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	2202      	movs	r2, #2
 80024fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <HAL_TIM_MspPostInit+0xd4>)
 8002500:	0019      	movs	r1, r3
 8002502:	0010      	movs	r0, r2
 8002504:	f000 fa70 	bl	80029e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002508:	e029      	b.n	800255e <HAL_TIM_MspPostInit+0xc2>
  else if(timHandle->Instance==TIM17)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a19      	ldr	r2, [pc, #100]	; (8002574 <HAL_TIM_MspPostInit+0xd8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d124      	bne.n	800255e <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_TIM_MspPostInit+0xd0>)
 8002516:	695a      	ldr	r2, [r3, #20]
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_TIM_MspPostInit+0xd0>)
 800251a:	2180      	movs	r1, #128	; 0x80
 800251c:	02c9      	lsls	r1, r1, #11
 800251e:	430a      	orrs	r2, r1
 8002520:	615a      	str	r2, [r3, #20]
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_TIM_MspPostInit+0xd0>)
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	02db      	lsls	r3, r3, #11
 800252a:	4013      	ands	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002530:	2114      	movs	r1, #20
 8002532:	187b      	adds	r3, r7, r1
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	0092      	lsls	r2, r2, #2
 8002538:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	187b      	adds	r3, r7, r1
 800253c:	2202      	movs	r2, #2
 800253e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	187b      	adds	r3, r7, r1
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002546:	187b      	adds	r3, r7, r1
 8002548:	2200      	movs	r2, #0
 800254a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 800254c:	187b      	adds	r3, r7, r1
 800254e:	2202      	movs	r2, #2
 8002550:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002552:	187b      	adds	r3, r7, r1
 8002554:	4a06      	ldr	r2, [pc, #24]	; (8002570 <HAL_TIM_MspPostInit+0xd4>)
 8002556:	0019      	movs	r1, r3
 8002558:	0010      	movs	r0, r2
 800255a:	f000 fa45 	bl	80029e8 <HAL_GPIO_Init>
}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	46bd      	mov	sp, r7
 8002562:	b00a      	add	sp, #40	; 0x28
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	40014400 	.word	0x40014400
 800256c:	40021000 	.word	0x40021000
 8002570:	48000400 	.word	0x48000400
 8002574:	40014800 	.word	0x40014800

08002578 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <MX_USART1_UART_Init+0x58>)
 800257e:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <MX_USART1_UART_Init+0x5c>)
 8002580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002582:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <MX_USART1_UART_Init+0x58>)
 8002584:	2296      	movs	r2, #150	; 0x96
 8002586:	0192      	lsls	r2, r2, #6
 8002588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <MX_USART1_UART_Init+0x58>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <MX_USART1_UART_Init+0x58>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002596:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <MX_USART1_UART_Init+0x58>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <MX_USART1_UART_Init+0x58>)
 800259e:	220c      	movs	r2, #12
 80025a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <MX_USART1_UART_Init+0x58>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <MX_USART1_UART_Init+0x58>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <MX_USART1_UART_Init+0x58>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <MX_USART1_UART_Init+0x58>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <MX_USART1_UART_Init+0x58>)
 80025bc:	0018      	movs	r0, r3
 80025be:	f001 ff99 	bl	80044f4 <HAL_UART_Init>
 80025c2:	1e03      	subs	r3, r0, #0
 80025c4:	d001      	beq.n	80025ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025c6:	f7ff fd71 	bl	80020ac <Error_Handler>
  }

}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000138 	.word	0x20000138
 80025d4:	40013800 	.word	0x40013800

080025d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	; 0x28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	2314      	movs	r3, #20
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	0018      	movs	r0, r3
 80025e6:	2314      	movs	r3, #20
 80025e8:	001a      	movs	r2, r3
 80025ea:	2100      	movs	r1, #0
 80025ec:	f002 fdfe 	bl	80051ec <memset>
  if(uartHandle->Instance==USART1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a21      	ldr	r2, [pc, #132]	; (800267c <HAL_UART_MspInit+0xa4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d13b      	bne.n	8002672 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025fa:	4b21      	ldr	r3, [pc, #132]	; (8002680 <HAL_UART_MspInit+0xa8>)
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_UART_MspInit+0xa8>)
 8002600:	2180      	movs	r1, #128	; 0x80
 8002602:	01c9      	lsls	r1, r1, #7
 8002604:	430a      	orrs	r2, r1
 8002606:	619a      	str	r2, [r3, #24]
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_UART_MspInit+0xa8>)
 800260a:	699a      	ldr	r2, [r3, #24]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	01db      	lsls	r3, r3, #7
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_UART_MspInit+0xa8>)
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_UART_MspInit+0xa8>)
 800261c:	2180      	movs	r1, #128	; 0x80
 800261e:	0289      	lsls	r1, r1, #10
 8002620:	430a      	orrs	r2, r1
 8002622:	615a      	str	r2, [r3, #20]
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <HAL_UART_MspInit+0xa8>)
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	029b      	lsls	r3, r3, #10
 800262c:	4013      	ands	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002632:	2114      	movs	r1, #20
 8002634:	187b      	adds	r3, r7, r1
 8002636:	22c0      	movs	r2, #192	; 0xc0
 8002638:	00d2      	lsls	r2, r2, #3
 800263a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	187b      	adds	r3, r7, r1
 800263e:	2202      	movs	r2, #2
 8002640:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	187b      	adds	r3, r7, r1
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002648:	187b      	adds	r3, r7, r1
 800264a:	2203      	movs	r2, #3
 800264c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800264e:	187b      	adds	r3, r7, r1
 8002650:	2201      	movs	r2, #1
 8002652:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002654:	187a      	adds	r2, r7, r1
 8002656:	2390      	movs	r3, #144	; 0x90
 8002658:	05db      	lsls	r3, r3, #23
 800265a:	0011      	movs	r1, r2
 800265c:	0018      	movs	r0, r3
 800265e:	f000 f9c3 	bl	80029e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	2101      	movs	r1, #1
 8002666:	201b      	movs	r0, #27
 8002668:	f000 f946 	bl	80028f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800266c:	201b      	movs	r0, #27
 800266e:	f000 f958 	bl	8002922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	46bd      	mov	sp, r7
 8002676:	b00a      	add	sp, #40	; 0x28
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	40013800 	.word	0x40013800
 8002680:	40021000 	.word	0x40021000

08002684 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002684:	480d      	ldr	r0, [pc, #52]	; (80026bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002686:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002688:	480d      	ldr	r0, [pc, #52]	; (80026c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800268a:	490e      	ldr	r1, [pc, #56]	; (80026c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800268c:	4a0e      	ldr	r2, [pc, #56]	; (80026c8 <LoopForever+0xe>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002690:	e002      	b.n	8002698 <LoopCopyDataInit>

08002692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002696:	3304      	adds	r3, #4

08002698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800269a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800269c:	d3f9      	bcc.n	8002692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269e:	4a0b      	ldr	r2, [pc, #44]	; (80026cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80026a0:	4c0b      	ldr	r4, [pc, #44]	; (80026d0 <LoopForever+0x16>)
  movs r3, #0
 80026a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a4:	e001      	b.n	80026aa <LoopFillZerobss>

080026a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a8:	3204      	adds	r2, #4

080026aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ac:	d3fb      	bcc.n	80026a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80026ae:	f7ff fd59 	bl	8002164 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80026b2:	f002 fd77 	bl	80051a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026b6:	f7ff fb61 	bl	8001d7c <main>

080026ba <LoopForever>:

LoopForever:
    b LoopForever
 80026ba:	e7fe      	b.n	80026ba <LoopForever>
  ldr   r0, =_estack
 80026bc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80026c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c4:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80026c8:	08005354 	.word	0x08005354
  ldr r2, =_sbss
 80026cc:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80026d0:	200001bc 	.word	0x200001bc

080026d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026d4:	e7fe      	b.n	80026d4 <ADC1_COMP_IRQHandler>
	...

080026d8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026dc:	4b07      	ldr	r3, [pc, #28]	; (80026fc <HAL_Init+0x24>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_Init+0x24>)
 80026e2:	2110      	movs	r1, #16
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f000 f809 	bl	8002700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ee:	f7ff fce3 	bl	80020b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	0018      	movs	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	40022000 	.word	0x40022000

08002700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <HAL_InitTick+0x5c>)
 800270a:	681c      	ldr	r4, [r3, #0]
 800270c:	4b14      	ldr	r3, [pc, #80]	; (8002760 <HAL_InitTick+0x60>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	0019      	movs	r1, r3
 8002712:	23fa      	movs	r3, #250	; 0xfa
 8002714:	0098      	lsls	r0, r3, #2
 8002716:	f7fd fcf7 	bl	8000108 <__udivsi3>
 800271a:	0003      	movs	r3, r0
 800271c:	0019      	movs	r1, r3
 800271e:	0020      	movs	r0, r4
 8002720:	f7fd fcf2 	bl	8000108 <__udivsi3>
 8002724:	0003      	movs	r3, r0
 8002726:	0018      	movs	r0, r3
 8002728:	f000 f90b 	bl	8002942 <HAL_SYSTICK_Config>
 800272c:	1e03      	subs	r3, r0, #0
 800272e:	d001      	beq.n	8002734 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e00f      	b.n	8002754 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b03      	cmp	r3, #3
 8002738:	d80b      	bhi.n	8002752 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	2301      	movs	r3, #1
 800273e:	425b      	negs	r3, r3
 8002740:	2200      	movs	r2, #0
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f8d8 	bl	80028f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_InitTick+0x64>)
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	e000      	b.n	8002754 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
}
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	b003      	add	sp, #12
 800275a:	bd90      	pop	{r4, r7, pc}
 800275c:	2000003c 	.word	0x2000003c
 8002760:	20000044 	.word	0x20000044
 8002764:	20000040 	.word	0x20000040

08002768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_IncTick+0x1c>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	001a      	movs	r2, r3
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_IncTick+0x20>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	18d2      	adds	r2, r2, r3
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_IncTick+0x20>)
 800277a:	601a      	str	r2, [r3, #0]
}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	20000044 	.word	0x20000044
 8002788:	200001b8 	.word	0x200001b8

0800278c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  return uwTick;
 8002790:	4b02      	ldr	r3, [pc, #8]	; (800279c <HAL_GetTick+0x10>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	0018      	movs	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	200001b8 	.word	0x200001b8

080027a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	0002      	movs	r2, r0
 80027a8:	1dfb      	adds	r3, r7, #7
 80027aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027ac:	1dfb      	adds	r3, r7, #7
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b7f      	cmp	r3, #127	; 0x7f
 80027b2:	d809      	bhi.n	80027c8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b4:	1dfb      	adds	r3, r7, #7
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	001a      	movs	r2, r3
 80027ba:	231f      	movs	r3, #31
 80027bc:	401a      	ands	r2, r3
 80027be:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <__NVIC_EnableIRQ+0x30>)
 80027c0:	2101      	movs	r1, #1
 80027c2:	4091      	lsls	r1, r2
 80027c4:	000a      	movs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]
  }
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b002      	add	sp, #8
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	e000e100 	.word	0xe000e100

080027d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	0002      	movs	r2, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	1dfb      	adds	r3, r7, #7
 80027e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027e2:	1dfb      	adds	r3, r7, #7
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b7f      	cmp	r3, #127	; 0x7f
 80027e8:	d828      	bhi.n	800283c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027ea:	4a2f      	ldr	r2, [pc, #188]	; (80028a8 <__NVIC_SetPriority+0xd4>)
 80027ec:	1dfb      	adds	r3, r7, #7
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	b25b      	sxtb	r3, r3
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	33c0      	adds	r3, #192	; 0xc0
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	589b      	ldr	r3, [r3, r2]
 80027fa:	1dfa      	adds	r2, r7, #7
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	0011      	movs	r1, r2
 8002800:	2203      	movs	r2, #3
 8002802:	400a      	ands	r2, r1
 8002804:	00d2      	lsls	r2, r2, #3
 8002806:	21ff      	movs	r1, #255	; 0xff
 8002808:	4091      	lsls	r1, r2
 800280a:	000a      	movs	r2, r1
 800280c:	43d2      	mvns	r2, r2
 800280e:	401a      	ands	r2, r3
 8002810:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	019b      	lsls	r3, r3, #6
 8002816:	22ff      	movs	r2, #255	; 0xff
 8002818:	401a      	ands	r2, r3
 800281a:	1dfb      	adds	r3, r7, #7
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	0018      	movs	r0, r3
 8002820:	2303      	movs	r3, #3
 8002822:	4003      	ands	r3, r0
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002828:	481f      	ldr	r0, [pc, #124]	; (80028a8 <__NVIC_SetPriority+0xd4>)
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	b25b      	sxtb	r3, r3
 8002830:	089b      	lsrs	r3, r3, #2
 8002832:	430a      	orrs	r2, r1
 8002834:	33c0      	adds	r3, #192	; 0xc0
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800283a:	e031      	b.n	80028a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800283c:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <__NVIC_SetPriority+0xd8>)
 800283e:	1dfb      	adds	r3, r7, #7
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	0019      	movs	r1, r3
 8002844:	230f      	movs	r3, #15
 8002846:	400b      	ands	r3, r1
 8002848:	3b08      	subs	r3, #8
 800284a:	089b      	lsrs	r3, r3, #2
 800284c:	3306      	adds	r3, #6
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	18d3      	adds	r3, r2, r3
 8002852:	3304      	adds	r3, #4
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	1dfa      	adds	r2, r7, #7
 8002858:	7812      	ldrb	r2, [r2, #0]
 800285a:	0011      	movs	r1, r2
 800285c:	2203      	movs	r2, #3
 800285e:	400a      	ands	r2, r1
 8002860:	00d2      	lsls	r2, r2, #3
 8002862:	21ff      	movs	r1, #255	; 0xff
 8002864:	4091      	lsls	r1, r2
 8002866:	000a      	movs	r2, r1
 8002868:	43d2      	mvns	r2, r2
 800286a:	401a      	ands	r2, r3
 800286c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	019b      	lsls	r3, r3, #6
 8002872:	22ff      	movs	r2, #255	; 0xff
 8002874:	401a      	ands	r2, r3
 8002876:	1dfb      	adds	r3, r7, #7
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	0018      	movs	r0, r3
 800287c:	2303      	movs	r3, #3
 800287e:	4003      	ands	r3, r0
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002884:	4809      	ldr	r0, [pc, #36]	; (80028ac <__NVIC_SetPriority+0xd8>)
 8002886:	1dfb      	adds	r3, r7, #7
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	001c      	movs	r4, r3
 800288c:	230f      	movs	r3, #15
 800288e:	4023      	ands	r3, r4
 8002890:	3b08      	subs	r3, #8
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	430a      	orrs	r2, r1
 8002896:	3306      	adds	r3, #6
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	18c3      	adds	r3, r0, r3
 800289c:	3304      	adds	r3, #4
 800289e:	601a      	str	r2, [r3, #0]
}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b003      	add	sp, #12
 80028a6:	bd90      	pop	{r4, r7, pc}
 80028a8:	e000e100 	.word	0xe000e100
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	4a0c      	ldr	r2, [pc, #48]	; (80028f0 <SysTick_Config+0x40>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c2:	2301      	movs	r3, #1
 80028c4:	e010      	b.n	80028e8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <SysTick_Config+0x44>)
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	3a01      	subs	r2, #1
 80028cc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ce:	2301      	movs	r3, #1
 80028d0:	425b      	negs	r3, r3
 80028d2:	2103      	movs	r1, #3
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7ff ff7d 	bl	80027d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <SysTick_Config+0x44>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <SysTick_Config+0x44>)
 80028e2:	2207      	movs	r2, #7
 80028e4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	0018      	movs	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b002      	add	sp, #8
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	00ffffff 	.word	0x00ffffff
 80028f4:	e000e010 	.word	0xe000e010

080028f8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	210f      	movs	r1, #15
 8002904:	187b      	adds	r3, r7, r1
 8002906:	1c02      	adds	r2, r0, #0
 8002908:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	187b      	adds	r3, r7, r1
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	b25b      	sxtb	r3, r3
 8002912:	0011      	movs	r1, r2
 8002914:	0018      	movs	r0, r3
 8002916:	f7ff ff5d 	bl	80027d4 <__NVIC_SetPriority>
}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	b004      	add	sp, #16
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	0002      	movs	r2, r0
 800292a:	1dfb      	adds	r3, r7, #7
 800292c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800292e:	1dfb      	adds	r3, r7, #7
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b25b      	sxtb	r3, r3
 8002934:	0018      	movs	r0, r3
 8002936:	f7ff ff33 	bl	80027a0 <__NVIC_EnableIRQ>
}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	46bd      	mov	sp, r7
 800293e:	b002      	add	sp, #8
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	0018      	movs	r0, r3
 800294e:	f7ff ffaf 	bl	80028b0 <SysTick_Config>
 8002952:	0003      	movs	r3, r0
}
 8002954:	0018      	movs	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	b002      	add	sp, #8
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002964:	230f      	movs	r3, #15
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2221      	movs	r2, #33	; 0x21
 8002970:	5c9b      	ldrb	r3, [r3, r2]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d007      	beq.n	8002988 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2204      	movs	r2, #4
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800297e:	230f      	movs	r3, #15
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	e028      	b.n	80029da <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	210e      	movs	r1, #14
 8002994:	438a      	bics	r2, r1
 8002996:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2101      	movs	r1, #1
 80029a4:	438a      	bics	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b0:	2101      	movs	r1, #1
 80029b2:	4091      	lsls	r1, r2
 80029b4:	000a      	movs	r2, r1
 80029b6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2221      	movs	r2, #33	; 0x21
 80029bc:	2101      	movs	r1, #1
 80029be:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	2100      	movs	r1, #0
 80029c6:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d004      	beq.n	80029da <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	0010      	movs	r0, r2
 80029d8:	4798      	blx	r3
    } 
  }
  return status;
 80029da:	230f      	movs	r3, #15
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	781b      	ldrb	r3, [r3, #0]
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b004      	add	sp, #16
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f6:	e14f      	b.n	8002c98 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2101      	movs	r1, #1
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4091      	lsls	r1, r2
 8002a02:	000a      	movs	r2, r1
 8002a04:	4013      	ands	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d100      	bne.n	8002a10 <HAL_GPIO_Init+0x28>
 8002a0e:	e140      	b.n	8002c92 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x38>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b12      	cmp	r3, #18
 8002a1e:	d123      	bne.n	8002a68 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	08da      	lsrs	r2, r3, #3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3208      	adds	r2, #8
 8002a28:	0092      	lsls	r2, r2, #2
 8002a2a:	58d3      	ldr	r3, [r2, r3]
 8002a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2207      	movs	r2, #7
 8002a32:	4013      	ands	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	220f      	movs	r2, #15
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	0013      	movs	r3, r2
 8002a3c:	43da      	mvns	r2, r3
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2107      	movs	r1, #7
 8002a4c:	400b      	ands	r3, r1
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	409a      	lsls	r2, r3
 8002a52:	0013      	movs	r3, r2
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	08da      	lsrs	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3208      	adds	r2, #8
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	6939      	ldr	r1, [r7, #16]
 8002a66:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	2203      	movs	r2, #3
 8002a74:	409a      	lsls	r2, r3
 8002a76:	0013      	movs	r3, r2
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2203      	movs	r2, #3
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	0013      	movs	r3, r2
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d00b      	beq.n	8002abc <HAL_GPIO_Init+0xd4>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d007      	beq.n	8002abc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ab0:	2b11      	cmp	r3, #17
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b12      	cmp	r3, #18
 8002aba:	d130      	bne.n	8002b1e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	0013      	movs	r3, r2
 8002acc:	43da      	mvns	r2, r3
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	409a      	lsls	r2, r3
 8002ade:	0013      	movs	r3, r2
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af2:	2201      	movs	r2, #1
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	409a      	lsls	r2, r3
 8002af8:	0013      	movs	r3, r2
 8002afa:	43da      	mvns	r2, r3
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	2201      	movs	r2, #1
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	0013      	movs	r3, r2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	2203      	movs	r2, #3
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	0013      	movs	r3, r2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	055b      	lsls	r3, r3, #21
 8002b56:	4013      	ands	r3, r2
 8002b58:	d100      	bne.n	8002b5c <HAL_GPIO_Init+0x174>
 8002b5a:	e09a      	b.n	8002c92 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5c:	4b54      	ldr	r3, [pc, #336]	; (8002cb0 <HAL_GPIO_Init+0x2c8>)
 8002b5e:	699a      	ldr	r2, [r3, #24]
 8002b60:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <HAL_GPIO_Init+0x2c8>)
 8002b62:	2101      	movs	r1, #1
 8002b64:	430a      	orrs	r2, r1
 8002b66:	619a      	str	r2, [r3, #24]
 8002b68:	4b51      	ldr	r3, [pc, #324]	; (8002cb0 <HAL_GPIO_Init+0x2c8>)
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4013      	ands	r3, r2
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b74:	4a4f      	ldr	r2, [pc, #316]	; (8002cb4 <HAL_GPIO_Init+0x2cc>)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	589b      	ldr	r3, [r3, r2]
 8002b80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2203      	movs	r2, #3
 8002b86:	4013      	ands	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	0013      	movs	r3, r2
 8002b90:	43da      	mvns	r2, r3
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	2390      	movs	r3, #144	; 0x90
 8002b9c:	05db      	lsls	r3, r3, #23
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d013      	beq.n	8002bca <HAL_GPIO_Init+0x1e2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a44      	ldr	r2, [pc, #272]	; (8002cb8 <HAL_GPIO_Init+0x2d0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00d      	beq.n	8002bc6 <HAL_GPIO_Init+0x1de>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a43      	ldr	r2, [pc, #268]	; (8002cbc <HAL_GPIO_Init+0x2d4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d007      	beq.n	8002bc2 <HAL_GPIO_Init+0x1da>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a42      	ldr	r2, [pc, #264]	; (8002cc0 <HAL_GPIO_Init+0x2d8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d101      	bne.n	8002bbe <HAL_GPIO_Init+0x1d6>
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e006      	b.n	8002bcc <HAL_GPIO_Init+0x1e4>
 8002bbe:	2305      	movs	r3, #5
 8002bc0:	e004      	b.n	8002bcc <HAL_GPIO_Init+0x1e4>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e002      	b.n	8002bcc <HAL_GPIO_Init+0x1e4>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_GPIO_Init+0x1e4>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	2103      	movs	r1, #3
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	4093      	lsls	r3, r2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bdc:	4935      	ldr	r1, [pc, #212]	; (8002cb4 <HAL_GPIO_Init+0x2cc>)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bea:	4b36      	ldr	r3, [pc, #216]	; (8002cc4 <HAL_GPIO_Init+0x2dc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	025b      	lsls	r3, r3, #9
 8002c02:	4013      	ands	r3, r2
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c0e:	4b2d      	ldr	r3, [pc, #180]	; (8002cc4 <HAL_GPIO_Init+0x2dc>)
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002c14:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <HAL_GPIO_Init+0x2dc>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	029b      	lsls	r3, r3, #10
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c38:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_GPIO_Init+0x2dc>)
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3e:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <HAL_GPIO_Init+0x2dc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	43da      	mvns	r2, r3
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	035b      	lsls	r3, r3, #13
 8002c56:	4013      	ands	r3, r2
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c62:	4b18      	ldr	r3, [pc, #96]	; (8002cc4 <HAL_GPIO_Init+0x2dc>)
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c68:	4b16      	ldr	r3, [pc, #88]	; (8002cc4 <HAL_GPIO_Init+0x2dc>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	43da      	mvns	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	039b      	lsls	r3, r3, #14
 8002c80:	4013      	ands	r3, r2
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c8c:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <HAL_GPIO_Init+0x2dc>)
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	3301      	adds	r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	40da      	lsrs	r2, r3
 8002ca0:	1e13      	subs	r3, r2, #0
 8002ca2:	d000      	beq.n	8002ca6 <HAL_GPIO_Init+0x2be>
 8002ca4:	e6a8      	b.n	80029f8 <HAL_GPIO_Init+0x10>
  } 
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b006      	add	sp, #24
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40010000 	.word	0x40010000
 8002cb8:	48000400 	.word	0x48000400
 8002cbc:	48000800 	.word	0x48000800
 8002cc0:	48000c00 	.word	0x48000c00
 8002cc4:	40010400 	.word	0x40010400

08002cc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	000a      	movs	r2, r1
 8002cd2:	1cbb      	adds	r3, r7, #2
 8002cd4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	1cba      	adds	r2, r7, #2
 8002cdc:	8812      	ldrh	r2, [r2, #0]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d004      	beq.n	8002cec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	e003      	b.n	8002cf4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cec:	230f      	movs	r3, #15
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002cf4:	230f      	movs	r3, #15
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	781b      	ldrb	r3, [r3, #0]
  }
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b004      	add	sp, #16
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	0008      	movs	r0, r1
 8002d0c:	0011      	movs	r1, r2
 8002d0e:	1cbb      	adds	r3, r7, #2
 8002d10:	1c02      	adds	r2, r0, #0
 8002d12:	801a      	strh	r2, [r3, #0]
 8002d14:	1c7b      	adds	r3, r7, #1
 8002d16:	1c0a      	adds	r2, r1, #0
 8002d18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d1a:	1c7b      	adds	r3, r7, #1
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d004      	beq.n	8002d2c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d22:	1cbb      	adds	r3, r7, #2
 8002d24:	881a      	ldrh	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d2a:	e003      	b.n	8002d34 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d2c:	1cbb      	adds	r3, r7, #2
 8002d2e:	881a      	ldrh	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d34:	46c0      	nop			; (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b002      	add	sp, #8
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	000a      	movs	r2, r1
 8002d46:	1cbb      	adds	r3, r7, #2
 8002d48:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	1cba      	adds	r2, r7, #2
 8002d50:	8812      	ldrh	r2, [r2, #0]
 8002d52:	4013      	ands	r3, r2
 8002d54:	d005      	beq.n	8002d62 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d56:	1cbb      	adds	r3, r7, #2
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	041a      	lsls	r2, r3, #16
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002d60:	e003      	b.n	8002d6a <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d62:	1cbb      	adds	r3, r7, #2
 8002d64:	881a      	ldrh	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	619a      	str	r2, [r3, #24]
}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b002      	add	sp, #8
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e303      	b.n	800338e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d100      	bne.n	8002d92 <HAL_RCC_OscConfig+0x1e>
 8002d90:	e08d      	b.n	8002eae <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d92:	4bc4      	ldr	r3, [pc, #784]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	220c      	movs	r2, #12
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d00e      	beq.n	8002dbc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d9e:	4bc1      	ldr	r3, [pc, #772]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	220c      	movs	r2, #12
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d116      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x64>
 8002daa:	4bbe      	ldr	r3, [pc, #760]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	025b      	lsls	r3, r3, #9
 8002db2:	401a      	ands	r2, r3
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	025b      	lsls	r3, r3, #9
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d10d      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	4bb9      	ldr	r3, [pc, #740]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	029b      	lsls	r3, r3, #10
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d100      	bne.n	8002dca <HAL_RCC_OscConfig+0x56>
 8002dc8:	e070      	b.n	8002eac <HAL_RCC_OscConfig+0x138>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d000      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x60>
 8002dd2:	e06b      	b.n	8002eac <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e2da      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d107      	bne.n	8002df0 <HAL_RCC_OscConfig+0x7c>
 8002de0:	4bb0      	ldr	r3, [pc, #704]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4baf      	ldr	r3, [pc, #700]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002de6:	2180      	movs	r1, #128	; 0x80
 8002de8:	0249      	lsls	r1, r1, #9
 8002dea:	430a      	orrs	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	e02f      	b.n	8002e50 <HAL_RCC_OscConfig+0xdc>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10c      	bne.n	8002e12 <HAL_RCC_OscConfig+0x9e>
 8002df8:	4baa      	ldr	r3, [pc, #680]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4ba9      	ldr	r3, [pc, #676]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002dfe:	49aa      	ldr	r1, [pc, #680]	; (80030a8 <HAL_RCC_OscConfig+0x334>)
 8002e00:	400a      	ands	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	4ba7      	ldr	r3, [pc, #668]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4ba6      	ldr	r3, [pc, #664]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002e0a:	49a8      	ldr	r1, [pc, #672]	; (80030ac <HAL_RCC_OscConfig+0x338>)
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e01e      	b.n	8002e50 <HAL_RCC_OscConfig+0xdc>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b05      	cmp	r3, #5
 8002e18:	d10e      	bne.n	8002e38 <HAL_RCC_OscConfig+0xc4>
 8002e1a:	4ba2      	ldr	r3, [pc, #648]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4ba1      	ldr	r3, [pc, #644]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	02c9      	lsls	r1, r1, #11
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	4b9e      	ldr	r3, [pc, #632]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b9d      	ldr	r3, [pc, #628]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002e2e:	2180      	movs	r1, #128	; 0x80
 8002e30:	0249      	lsls	r1, r1, #9
 8002e32:	430a      	orrs	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	e00b      	b.n	8002e50 <HAL_RCC_OscConfig+0xdc>
 8002e38:	4b9a      	ldr	r3, [pc, #616]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b99      	ldr	r3, [pc, #612]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002e3e:	499a      	ldr	r1, [pc, #616]	; (80030a8 <HAL_RCC_OscConfig+0x334>)
 8002e40:	400a      	ands	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	4b97      	ldr	r3, [pc, #604]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b96      	ldr	r3, [pc, #600]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002e4a:	4998      	ldr	r1, [pc, #608]	; (80030ac <HAL_RCC_OscConfig+0x338>)
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d014      	beq.n	8002e82 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7ff fc98 	bl	800278c <HAL_GetTick>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e62:	f7ff fc93 	bl	800278c <HAL_GetTick>
 8002e66:	0002      	movs	r2, r0
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b64      	cmp	r3, #100	; 0x64
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e28c      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e74:	4b8b      	ldr	r3, [pc, #556]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	029b      	lsls	r3, r3, #10
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0xee>
 8002e80:	e015      	b.n	8002eae <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e82:	f7ff fc83 	bl	800278c <HAL_GetTick>
 8002e86:	0003      	movs	r3, r0
 8002e88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7ff fc7e 	bl	800278c <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	; 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e277      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9e:	4b81      	ldr	r3, [pc, #516]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	029b      	lsls	r3, r3, #10
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x118>
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d100      	bne.n	8002eba <HAL_RCC_OscConfig+0x146>
 8002eb8:	e069      	b.n	8002f8e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002eba:	4b7a      	ldr	r3, [pc, #488]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	220c      	movs	r2, #12
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d00b      	beq.n	8002edc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ec4:	4b77      	ldr	r3, [pc, #476]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	220c      	movs	r2, #12
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d11c      	bne.n	8002f0a <HAL_RCC_OscConfig+0x196>
 8002ed0:	4b74      	ldr	r3, [pc, #464]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	025b      	lsls	r3, r3, #9
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d116      	bne.n	8002f0a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002edc:	4b71      	ldr	r3, [pc, #452]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d005      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x17e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e24d      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b6c      	ldr	r3, [pc, #432]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	22f8      	movs	r2, #248	; 0xf8
 8002ef8:	4393      	bics	r3, r2
 8002efa:	0019      	movs	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	00da      	lsls	r2, r3, #3
 8002f02:	4b68      	ldr	r3, [pc, #416]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002f04:	430a      	orrs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f08:	e041      	b.n	8002f8e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d024      	beq.n	8002f5c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f12:	4b64      	ldr	r3, [pc, #400]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4b63      	ldr	r3, [pc, #396]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002f18:	2101      	movs	r1, #1
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1e:	f7ff fc35 	bl	800278c <HAL_GetTick>
 8002f22:	0003      	movs	r3, r0
 8002f24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f28:	f7ff fc30 	bl	800278c <HAL_GetTick>
 8002f2c:	0002      	movs	r2, r0
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e229      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3a:	4b5a      	ldr	r3, [pc, #360]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	4013      	ands	r3, r2
 8002f42:	d0f1      	beq.n	8002f28 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f44:	4b57      	ldr	r3, [pc, #348]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	22f8      	movs	r2, #248	; 0xf8
 8002f4a:	4393      	bics	r3, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	00da      	lsls	r2, r3, #3
 8002f54:	4b53      	ldr	r3, [pc, #332]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002f56:	430a      	orrs	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e018      	b.n	8002f8e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5c:	4b51      	ldr	r3, [pc, #324]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b50      	ldr	r3, [pc, #320]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002f62:	2101      	movs	r1, #1
 8002f64:	438a      	bics	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7ff fc10 	bl	800278c <HAL_GetTick>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f72:	f7ff fc0b 	bl	800278c <HAL_GetTick>
 8002f76:	0002      	movs	r2, r0
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e204      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f84:	4b47      	ldr	r3, [pc, #284]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d1f1      	bne.n	8002f72 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2208      	movs	r2, #8
 8002f94:	4013      	ands	r3, r2
 8002f96:	d036      	beq.n	8003006 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d019      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa0:	4b40      	ldr	r3, [pc, #256]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa4:	4b3f      	ldr	r3, [pc, #252]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fac:	f7ff fbee 	bl	800278c <HAL_GetTick>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb6:	f7ff fbe9 	bl	800278c <HAL_GetTick>
 8002fba:	0002      	movs	r2, r0
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e1e2      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc8:	4b36      	ldr	r3, [pc, #216]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	2202      	movs	r2, #2
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d0f1      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x242>
 8002fd2:	e018      	b.n	8003006 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd4:	4b33      	ldr	r3, [pc, #204]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fd8:	4b32      	ldr	r3, [pc, #200]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002fda:	2101      	movs	r1, #1
 8002fdc:	438a      	bics	r2, r1
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe0:	f7ff fbd4 	bl	800278c <HAL_GetTick>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fea:	f7ff fbcf 	bl	800278c <HAL_GetTick>
 8002fee:	0002      	movs	r2, r0
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e1c8      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffc:	4b29      	ldr	r3, [pc, #164]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	2202      	movs	r2, #2
 8003002:	4013      	ands	r3, r2
 8003004:	d1f1      	bne.n	8002fea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2204      	movs	r2, #4
 800300c:	4013      	ands	r3, r2
 800300e:	d100      	bne.n	8003012 <HAL_RCC_OscConfig+0x29e>
 8003010:	e0b6      	b.n	8003180 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003012:	231f      	movs	r3, #31
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800301a:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	055b      	lsls	r3, r3, #21
 8003022:	4013      	ands	r3, r2
 8003024:	d111      	bne.n	800304a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003026:	4b1f      	ldr	r3, [pc, #124]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8003028:	69da      	ldr	r2, [r3, #28]
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	0549      	lsls	r1, r1, #21
 8003030:	430a      	orrs	r2, r1
 8003032:	61da      	str	r2, [r3, #28]
 8003034:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	055b      	lsls	r3, r3, #21
 800303c:	4013      	ands	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003042:	231f      	movs	r3, #31
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304a:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_RCC_OscConfig+0x33c>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4013      	ands	r3, r2
 8003054:	d11a      	bne.n	800308c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003056:	4b16      	ldr	r3, [pc, #88]	; (80030b0 <HAL_RCC_OscConfig+0x33c>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <HAL_RCC_OscConfig+0x33c>)
 800305c:	2180      	movs	r1, #128	; 0x80
 800305e:	0049      	lsls	r1, r1, #1
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003064:	f7ff fb92 	bl	800278c <HAL_GetTick>
 8003068:	0003      	movs	r3, r0
 800306a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306e:	f7ff fb8d 	bl	800278c <HAL_GetTick>
 8003072:	0002      	movs	r2, r0
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b64      	cmp	r3, #100	; 0x64
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e186      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_OscConfig+0x33c>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4013      	ands	r3, r2
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d10f      	bne.n	80030b4 <HAL_RCC_OscConfig+0x340>
 8003094:	4b03      	ldr	r3, [pc, #12]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 8003096:	6a1a      	ldr	r2, [r3, #32]
 8003098:	4b02      	ldr	r3, [pc, #8]	; (80030a4 <HAL_RCC_OscConfig+0x330>)
 800309a:	2101      	movs	r1, #1
 800309c:	430a      	orrs	r2, r1
 800309e:	621a      	str	r2, [r3, #32]
 80030a0:	e036      	b.n	8003110 <HAL_RCC_OscConfig+0x39c>
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	40021000 	.word	0x40021000
 80030a8:	fffeffff 	.word	0xfffeffff
 80030ac:	fffbffff 	.word	0xfffbffff
 80030b0:	40007000 	.word	0x40007000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10c      	bne.n	80030d6 <HAL_RCC_OscConfig+0x362>
 80030bc:	4bb6      	ldr	r3, [pc, #728]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80030be:	6a1a      	ldr	r2, [r3, #32]
 80030c0:	4bb5      	ldr	r3, [pc, #724]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80030c2:	2101      	movs	r1, #1
 80030c4:	438a      	bics	r2, r1
 80030c6:	621a      	str	r2, [r3, #32]
 80030c8:	4bb3      	ldr	r3, [pc, #716]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80030ca:	6a1a      	ldr	r2, [r3, #32]
 80030cc:	4bb2      	ldr	r3, [pc, #712]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80030ce:	2104      	movs	r1, #4
 80030d0:	438a      	bics	r2, r1
 80030d2:	621a      	str	r2, [r3, #32]
 80030d4:	e01c      	b.n	8003110 <HAL_RCC_OscConfig+0x39c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x384>
 80030de:	4bae      	ldr	r3, [pc, #696]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80030e0:	6a1a      	ldr	r2, [r3, #32]
 80030e2:	4bad      	ldr	r3, [pc, #692]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80030e4:	2104      	movs	r1, #4
 80030e6:	430a      	orrs	r2, r1
 80030e8:	621a      	str	r2, [r3, #32]
 80030ea:	4bab      	ldr	r3, [pc, #684]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80030ec:	6a1a      	ldr	r2, [r3, #32]
 80030ee:	4baa      	ldr	r3, [pc, #680]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80030f0:	2101      	movs	r1, #1
 80030f2:	430a      	orrs	r2, r1
 80030f4:	621a      	str	r2, [r3, #32]
 80030f6:	e00b      	b.n	8003110 <HAL_RCC_OscConfig+0x39c>
 80030f8:	4ba7      	ldr	r3, [pc, #668]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80030fa:	6a1a      	ldr	r2, [r3, #32]
 80030fc:	4ba6      	ldr	r3, [pc, #664]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80030fe:	2101      	movs	r1, #1
 8003100:	438a      	bics	r2, r1
 8003102:	621a      	str	r2, [r3, #32]
 8003104:	4ba4      	ldr	r3, [pc, #656]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 8003106:	6a1a      	ldr	r2, [r3, #32]
 8003108:	4ba3      	ldr	r3, [pc, #652]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 800310a:	2104      	movs	r1, #4
 800310c:	438a      	bics	r2, r1
 800310e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d014      	beq.n	8003142 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003118:	f7ff fb38 	bl	800278c <HAL_GetTick>
 800311c:	0003      	movs	r3, r0
 800311e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003120:	e009      	b.n	8003136 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003122:	f7ff fb33 	bl	800278c <HAL_GetTick>
 8003126:	0002      	movs	r2, r0
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	4a9b      	ldr	r2, [pc, #620]	; (800339c <HAL_RCC_OscConfig+0x628>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e12b      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003136:	4b98      	ldr	r3, [pc, #608]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	2202      	movs	r2, #2
 800313c:	4013      	ands	r3, r2
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x3ae>
 8003140:	e013      	b.n	800316a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003142:	f7ff fb23 	bl	800278c <HAL_GetTick>
 8003146:	0003      	movs	r3, r0
 8003148:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314a:	e009      	b.n	8003160 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314c:	f7ff fb1e 	bl	800278c <HAL_GetTick>
 8003150:	0002      	movs	r2, r0
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	4a91      	ldr	r2, [pc, #580]	; (800339c <HAL_RCC_OscConfig+0x628>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e116      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003160:	4b8d      	ldr	r3, [pc, #564]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	2202      	movs	r2, #2
 8003166:	4013      	ands	r3, r2
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800316a:	231f      	movs	r3, #31
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d105      	bne.n	8003180 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003174:	4b88      	ldr	r3, [pc, #544]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	4b87      	ldr	r3, [pc, #540]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 800317a:	4989      	ldr	r1, [pc, #548]	; (80033a0 <HAL_RCC_OscConfig+0x62c>)
 800317c:	400a      	ands	r2, r1
 800317e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2210      	movs	r2, #16
 8003186:	4013      	ands	r3, r2
 8003188:	d063      	beq.n	8003252 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d12a      	bne.n	80031e8 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003192:	4b81      	ldr	r3, [pc, #516]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 8003194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003196:	4b80      	ldr	r3, [pc, #512]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 8003198:	2104      	movs	r1, #4
 800319a:	430a      	orrs	r2, r1
 800319c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800319e:	4b7e      	ldr	r3, [pc, #504]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80031a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a2:	4b7d      	ldr	r3, [pc, #500]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80031a4:	2101      	movs	r1, #1
 80031a6:	430a      	orrs	r2, r1
 80031a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031aa:	f7ff faef 	bl	800278c <HAL_GetTick>
 80031ae:	0003      	movs	r3, r0
 80031b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031b4:	f7ff faea 	bl	800278c <HAL_GetTick>
 80031b8:	0002      	movs	r2, r0
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e0e3      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80031c6:	4b74      	ldr	r3, [pc, #464]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80031c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ca:	2202      	movs	r2, #2
 80031cc:	4013      	ands	r3, r2
 80031ce:	d0f1      	beq.n	80031b4 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80031d0:	4b71      	ldr	r3, [pc, #452]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80031d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d4:	22f8      	movs	r2, #248	; 0xf8
 80031d6:	4393      	bics	r3, r2
 80031d8:	0019      	movs	r1, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	00da      	lsls	r2, r3, #3
 80031e0:	4b6d      	ldr	r3, [pc, #436]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80031e2:	430a      	orrs	r2, r1
 80031e4:	635a      	str	r2, [r3, #52]	; 0x34
 80031e6:	e034      	b.n	8003252 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	3305      	adds	r3, #5
 80031ee:	d111      	bne.n	8003214 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80031f0:	4b69      	ldr	r3, [pc, #420]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80031f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031f4:	4b68      	ldr	r3, [pc, #416]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80031f6:	2104      	movs	r1, #4
 80031f8:	438a      	bics	r2, r1
 80031fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80031fc:	4b66      	ldr	r3, [pc, #408]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80031fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003200:	22f8      	movs	r2, #248	; 0xf8
 8003202:	4393      	bics	r3, r2
 8003204:	0019      	movs	r1, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	00da      	lsls	r2, r3, #3
 800320c:	4b62      	ldr	r3, [pc, #392]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 800320e:	430a      	orrs	r2, r1
 8003210:	635a      	str	r2, [r3, #52]	; 0x34
 8003212:	e01e      	b.n	8003252 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003214:	4b60      	ldr	r3, [pc, #384]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 8003216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003218:	4b5f      	ldr	r3, [pc, #380]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 800321a:	2104      	movs	r1, #4
 800321c:	430a      	orrs	r2, r1
 800321e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003220:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 8003222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003224:	4b5c      	ldr	r3, [pc, #368]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 8003226:	2101      	movs	r1, #1
 8003228:	438a      	bics	r2, r1
 800322a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322c:	f7ff faae 	bl	800278c <HAL_GetTick>
 8003230:	0003      	movs	r3, r0
 8003232:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003236:	f7ff faa9 	bl	800278c <HAL_GetTick>
 800323a:	0002      	movs	r2, r0
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e0a2      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003248:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 800324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324c:	2202      	movs	r2, #2
 800324e:	4013      	ands	r3, r2
 8003250:	d1f1      	bne.n	8003236 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d100      	bne.n	800325c <HAL_RCC_OscConfig+0x4e8>
 800325a:	e097      	b.n	800338c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800325c:	4b4e      	ldr	r3, [pc, #312]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	220c      	movs	r2, #12
 8003262:	4013      	ands	r3, r2
 8003264:	2b08      	cmp	r3, #8
 8003266:	d100      	bne.n	800326a <HAL_RCC_OscConfig+0x4f6>
 8003268:	e06b      	b.n	8003342 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d14c      	bne.n	800330c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	4b49      	ldr	r3, [pc, #292]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	4b48      	ldr	r3, [pc, #288]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 8003278:	494a      	ldr	r1, [pc, #296]	; (80033a4 <HAL_RCC_OscConfig+0x630>)
 800327a:	400a      	ands	r2, r1
 800327c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7ff fa85 	bl	800278c <HAL_GetTick>
 8003282:	0003      	movs	r3, r0
 8003284:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003288:	f7ff fa80 	bl	800278c <HAL_GetTick>
 800328c:	0002      	movs	r2, r0
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e079      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329a:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	049b      	lsls	r3, r3, #18
 80032a2:	4013      	ands	r3, r2
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a6:	4b3c      	ldr	r3, [pc, #240]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	220f      	movs	r2, #15
 80032ac:	4393      	bics	r3, r2
 80032ae:	0019      	movs	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b4:	4b38      	ldr	r3, [pc, #224]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80032b6:	430a      	orrs	r2, r1
 80032b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80032ba:	4b37      	ldr	r3, [pc, #220]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4a3a      	ldr	r2, [pc, #232]	; (80033a8 <HAL_RCC_OscConfig+0x634>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	0019      	movs	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	431a      	orrs	r2, r3
 80032ce:	4b32      	ldr	r3, [pc, #200]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d4:	4b30      	ldr	r3, [pc, #192]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 80032da:	2180      	movs	r1, #128	; 0x80
 80032dc:	0449      	lsls	r1, r1, #17
 80032de:	430a      	orrs	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e2:	f7ff fa53 	bl	800278c <HAL_GetTick>
 80032e6:	0003      	movs	r3, r0
 80032e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ec:	f7ff fa4e 	bl	800278c <HAL_GetTick>
 80032f0:	0002      	movs	r2, r0
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e047      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032fe:	4b26      	ldr	r3, [pc, #152]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	049b      	lsls	r3, r3, #18
 8003306:	4013      	ands	r3, r2
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x578>
 800330a:	e03f      	b.n	800338c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330c:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b21      	ldr	r3, [pc, #132]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 8003312:	4924      	ldr	r1, [pc, #144]	; (80033a4 <HAL_RCC_OscConfig+0x630>)
 8003314:	400a      	ands	r2, r1
 8003316:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7ff fa38 	bl	800278c <HAL_GetTick>
 800331c:	0003      	movs	r3, r0
 800331e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003322:	f7ff fa33 	bl	800278c <HAL_GetTick>
 8003326:	0002      	movs	r2, r0
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e02c      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003334:	4b18      	ldr	r3, [pc, #96]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	049b      	lsls	r3, r3, #18
 800333c:	4013      	ands	r3, r2
 800333e:	d1f0      	bne.n	8003322 <HAL_RCC_OscConfig+0x5ae>
 8003340:	e024      	b.n	800338c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e01f      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003354:	4b10      	ldr	r3, [pc, #64]	; (8003398 <HAL_RCC_OscConfig+0x624>)
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	025b      	lsls	r3, r3, #9
 8003360:	401a      	ands	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	429a      	cmp	r2, r3
 8003368:	d10e      	bne.n	8003388 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	220f      	movs	r2, #15
 800336e:	401a      	ands	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d107      	bne.n	8003388 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	23f0      	movs	r3, #240	; 0xf0
 800337c:	039b      	lsls	r3, r3, #14
 800337e:	401a      	ands	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b008      	add	sp, #32
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	40021000 	.word	0x40021000
 800339c:	00001388 	.word	0x00001388
 80033a0:	efffffff 	.word	0xefffffff
 80033a4:	feffffff 	.word	0xfeffffff
 80033a8:	ffc2ffff 	.word	0xffc2ffff

080033ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0b3      	b.n	8003528 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c0:	4b5b      	ldr	r3, [pc, #364]	; (8003530 <HAL_RCC_ClockConfig+0x184>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2201      	movs	r2, #1
 80033c6:	4013      	ands	r3, r2
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d911      	bls.n	80033f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b58      	ldr	r3, [pc, #352]	; (8003530 <HAL_RCC_ClockConfig+0x184>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2201      	movs	r2, #1
 80033d4:	4393      	bics	r3, r2
 80033d6:	0019      	movs	r1, r3
 80033d8:	4b55      	ldr	r3, [pc, #340]	; (8003530 <HAL_RCC_ClockConfig+0x184>)
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <HAL_RCC_ClockConfig+0x184>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2201      	movs	r2, #1
 80033e6:	4013      	ands	r3, r2
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e09a      	b.n	8003528 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2202      	movs	r2, #2
 80033f8:	4013      	ands	r3, r2
 80033fa:	d015      	beq.n	8003428 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2204      	movs	r2, #4
 8003402:	4013      	ands	r3, r2
 8003404:	d006      	beq.n	8003414 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003406:	4b4b      	ldr	r3, [pc, #300]	; (8003534 <HAL_RCC_ClockConfig+0x188>)
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	4b4a      	ldr	r3, [pc, #296]	; (8003534 <HAL_RCC_ClockConfig+0x188>)
 800340c:	21e0      	movs	r1, #224	; 0xe0
 800340e:	00c9      	lsls	r1, r1, #3
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003414:	4b47      	ldr	r3, [pc, #284]	; (8003534 <HAL_RCC_ClockConfig+0x188>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	22f0      	movs	r2, #240	; 0xf0
 800341a:	4393      	bics	r3, r2
 800341c:	0019      	movs	r1, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	4b44      	ldr	r3, [pc, #272]	; (8003534 <HAL_RCC_ClockConfig+0x188>)
 8003424:	430a      	orrs	r2, r1
 8003426:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2201      	movs	r2, #1
 800342e:	4013      	ands	r3, r2
 8003430:	d040      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d107      	bne.n	800344a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	4b3e      	ldr	r3, [pc, #248]	; (8003534 <HAL_RCC_ClockConfig+0x188>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	029b      	lsls	r3, r3, #10
 8003442:	4013      	ands	r3, r2
 8003444:	d114      	bne.n	8003470 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e06e      	b.n	8003528 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d107      	bne.n	8003462 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003452:	4b38      	ldr	r3, [pc, #224]	; (8003534 <HAL_RCC_ClockConfig+0x188>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	049b      	lsls	r3, r3, #18
 800345a:	4013      	ands	r3, r2
 800345c:	d108      	bne.n	8003470 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e062      	b.n	8003528 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003462:	4b34      	ldr	r3, [pc, #208]	; (8003534 <HAL_RCC_ClockConfig+0x188>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2202      	movs	r2, #2
 8003468:	4013      	ands	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e05b      	b.n	8003528 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003470:	4b30      	ldr	r3, [pc, #192]	; (8003534 <HAL_RCC_ClockConfig+0x188>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2203      	movs	r2, #3
 8003476:	4393      	bics	r3, r2
 8003478:	0019      	movs	r1, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	4b2d      	ldr	r3, [pc, #180]	; (8003534 <HAL_RCC_ClockConfig+0x188>)
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003484:	f7ff f982 	bl	800278c <HAL_GetTick>
 8003488:	0003      	movs	r3, r0
 800348a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348c:	e009      	b.n	80034a2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348e:	f7ff f97d 	bl	800278c <HAL_GetTick>
 8003492:	0002      	movs	r2, r0
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	4a27      	ldr	r2, [pc, #156]	; (8003538 <HAL_RCC_ClockConfig+0x18c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e042      	b.n	8003528 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	4b24      	ldr	r3, [pc, #144]	; (8003534 <HAL_RCC_ClockConfig+0x188>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	220c      	movs	r2, #12
 80034a8:	401a      	ands	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d1ec      	bne.n	800348e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034b4:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <HAL_RCC_ClockConfig+0x184>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2201      	movs	r2, #1
 80034ba:	4013      	ands	r3, r2
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d211      	bcs.n	80034e6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <HAL_RCC_ClockConfig+0x184>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2201      	movs	r2, #1
 80034c8:	4393      	bics	r3, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	4b18      	ldr	r3, [pc, #96]	; (8003530 <HAL_RCC_ClockConfig+0x184>)
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d4:	4b16      	ldr	r3, [pc, #88]	; (8003530 <HAL_RCC_ClockConfig+0x184>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2201      	movs	r2, #1
 80034da:	4013      	ands	r3, r2
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d001      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e020      	b.n	8003528 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2204      	movs	r2, #4
 80034ec:	4013      	ands	r3, r2
 80034ee:	d009      	beq.n	8003504 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80034f0:	4b10      	ldr	r3, [pc, #64]	; (8003534 <HAL_RCC_ClockConfig+0x188>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4a11      	ldr	r2, [pc, #68]	; (800353c <HAL_RCC_ClockConfig+0x190>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	0019      	movs	r1, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <HAL_RCC_ClockConfig+0x188>)
 8003500:	430a      	orrs	r2, r1
 8003502:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003504:	f000 f820 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8003508:	0001      	movs	r1, r0
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <HAL_RCC_ClockConfig+0x188>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	220f      	movs	r2, #15
 8003512:	4013      	ands	r3, r2
 8003514:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <HAL_RCC_ClockConfig+0x194>)
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	000a      	movs	r2, r1
 800351a:	40da      	lsrs	r2, r3
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_ClockConfig+0x198>)
 800351e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003520:	2000      	movs	r0, #0
 8003522:	f7ff f8ed 	bl	8002700 <HAL_InitTick>
  
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	0018      	movs	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	b004      	add	sp, #16
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40022000 	.word	0x40022000
 8003534:	40021000 	.word	0x40021000
 8003538:	00001388 	.word	0x00001388
 800353c:	fffff8ff 	.word	0xfffff8ff
 8003540:	08005334 	.word	0x08005334
 8003544:	2000003c 	.word	0x2000003c

08003548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003548:	b590      	push	{r4, r7, lr}
 800354a:	b08f      	sub	sp, #60	; 0x3c
 800354c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800354e:	2314      	movs	r3, #20
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	4a2b      	ldr	r2, [pc, #172]	; (8003600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003554:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003556:	c313      	stmia	r3!, {r0, r1, r4}
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	4a29      	ldr	r2, [pc, #164]	; (8003604 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003560:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003562:	c313      	stmia	r3!, {r0, r1, r4}
 8003564:	6812      	ldr	r2, [r2, #0]
 8003566:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800356c:	2300      	movs	r3, #0
 800356e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003570:	2300      	movs	r3, #0
 8003572:	637b      	str	r3, [r7, #52]	; 0x34
 8003574:	2300      	movs	r3, #0
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800357c:	4b22      	ldr	r3, [pc, #136]	; (8003608 <HAL_RCC_GetSysClockFreq+0xc0>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	220c      	movs	r2, #12
 8003586:	4013      	ands	r3, r2
 8003588:	2b04      	cmp	r3, #4
 800358a:	d002      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x4a>
 800358c:	2b08      	cmp	r3, #8
 800358e:	d003      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0x50>
 8003590:	e02d      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003592:	4b1e      	ldr	r3, [pc, #120]	; (800360c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003594:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003596:	e02d      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	0c9b      	lsrs	r3, r3, #18
 800359c:	220f      	movs	r2, #15
 800359e:	4013      	ands	r3, r2
 80035a0:	2214      	movs	r2, #20
 80035a2:	18ba      	adds	r2, r7, r2
 80035a4:	5cd3      	ldrb	r3, [r2, r3]
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80035a8:	4b17      	ldr	r3, [pc, #92]	; (8003608 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	220f      	movs	r2, #15
 80035ae:	4013      	ands	r3, r2
 80035b0:	1d3a      	adds	r2, r7, #4
 80035b2:	5cd3      	ldrb	r3, [r2, r3]
 80035b4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	025b      	lsls	r3, r3, #9
 80035bc:	4013      	ands	r3, r2
 80035be:	d009      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035c2:	4812      	ldr	r0, [pc, #72]	; (800360c <HAL_RCC_GetSysClockFreq+0xc4>)
 80035c4:	f7fc fda0 	bl	8000108 <__udivsi3>
 80035c8:	0003      	movs	r3, r0
 80035ca:	001a      	movs	r2, r3
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	4353      	muls	r3, r2
 80035d0:	637b      	str	r3, [r7, #52]	; 0x34
 80035d2:	e009      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035d6:	000a      	movs	r2, r1
 80035d8:	0152      	lsls	r2, r2, #5
 80035da:	1a52      	subs	r2, r2, r1
 80035dc:	0193      	lsls	r3, r2, #6
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	185b      	adds	r3, r3, r1
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80035e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035ec:	e002      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035ee:	4b07      	ldr	r3, [pc, #28]	; (800360c <HAL_RCC_GetSysClockFreq+0xc4>)
 80035f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035f2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80035f6:	0018      	movs	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b00f      	add	sp, #60	; 0x3c
 80035fc:	bd90      	pop	{r4, r7, pc}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	08005214 	.word	0x08005214
 8003604:	08005224 	.word	0x08005224
 8003608:	40021000 	.word	0x40021000
 800360c:	007a1200 	.word	0x007a1200

08003610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003614:	4b02      	ldr	r3, [pc, #8]	; (8003620 <HAL_RCC_GetHCLKFreq+0x10>)
 8003616:	681b      	ldr	r3, [r3, #0]
}
 8003618:	0018      	movs	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	2000003c 	.word	0x2000003c

08003624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003628:	f7ff fff2 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 800362c:	0001      	movs	r1, r0
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	2207      	movs	r2, #7
 8003636:	4013      	ands	r3, r2
 8003638:	4a04      	ldr	r2, [pc, #16]	; (800364c <HAL_RCC_GetPCLK1Freq+0x28>)
 800363a:	5cd3      	ldrb	r3, [r2, r3]
 800363c:	40d9      	lsrs	r1, r3
 800363e:	000b      	movs	r3, r1
}    
 8003640:	0018      	movs	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	40021000 	.word	0x40021000
 800364c:	08005344 	.word	0x08005344

08003650 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	025b      	lsls	r3, r3, #9
 8003668:	4013      	ands	r3, r2
 800366a:	d100      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800366c:	e08f      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800366e:	2317      	movs	r3, #23
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003676:	4b5f      	ldr	r3, [pc, #380]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003678:	69da      	ldr	r2, [r3, #28]
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	055b      	lsls	r3, r3, #21
 800367e:	4013      	ands	r3, r2
 8003680:	d111      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003682:	4b5c      	ldr	r3, [pc, #368]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003684:	69da      	ldr	r2, [r3, #28]
 8003686:	4b5b      	ldr	r3, [pc, #364]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003688:	2180      	movs	r1, #128	; 0x80
 800368a:	0549      	lsls	r1, r1, #21
 800368c:	430a      	orrs	r2, r1
 800368e:	61da      	str	r2, [r3, #28]
 8003690:	4b58      	ldr	r3, [pc, #352]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003692:	69da      	ldr	r2, [r3, #28]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	055b      	lsls	r3, r3, #21
 8003698:	4013      	ands	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800369e:	2317      	movs	r3, #23
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a6:	4b54      	ldr	r3, [pc, #336]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4013      	ands	r3, r2
 80036b0:	d11a      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036b2:	4b51      	ldr	r3, [pc, #324]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b50      	ldr	r3, [pc, #320]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036b8:	2180      	movs	r1, #128	; 0x80
 80036ba:	0049      	lsls	r1, r1, #1
 80036bc:	430a      	orrs	r2, r1
 80036be:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c0:	f7ff f864 	bl	800278c <HAL_GetTick>
 80036c4:	0003      	movs	r3, r0
 80036c6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c8:	e008      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ca:	f7ff f85f 	bl	800278c <HAL_GetTick>
 80036ce:	0002      	movs	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b64      	cmp	r3, #100	; 0x64
 80036d6:	d901      	bls.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e087      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036dc:	4b46      	ldr	r3, [pc, #280]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	4013      	ands	r3, r2
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036e8:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036ea:	6a1a      	ldr	r2, [r3, #32]
 80036ec:	23c0      	movs	r3, #192	; 0xc0
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4013      	ands	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d034      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	23c0      	movs	r3, #192	; 0xc0
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4013      	ands	r3, r2
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	429a      	cmp	r2, r3
 8003708:	d02c      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800370a:	4b3a      	ldr	r3, [pc, #232]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	4a3b      	ldr	r2, [pc, #236]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003710:	4013      	ands	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003714:	4b37      	ldr	r3, [pc, #220]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003716:	6a1a      	ldr	r2, [r3, #32]
 8003718:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800371a:	2180      	movs	r1, #128	; 0x80
 800371c:	0249      	lsls	r1, r1, #9
 800371e:	430a      	orrs	r2, r1
 8003720:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003722:	4b34      	ldr	r3, [pc, #208]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003724:	6a1a      	ldr	r2, [r3, #32]
 8003726:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003728:	4935      	ldr	r1, [pc, #212]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800372a:	400a      	ands	r2, r1
 800372c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800372e:	4b31      	ldr	r3, [pc, #196]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	4013      	ands	r3, r2
 800373a:	d013      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7ff f826 	bl	800278c <HAL_GetTick>
 8003740:	0003      	movs	r3, r0
 8003742:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003744:	e009      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7ff f821 	bl	800278c <HAL_GetTick>
 800374a:	0002      	movs	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	4a2c      	ldr	r2, [pc, #176]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e048      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375a:	4b26      	ldr	r3, [pc, #152]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	2202      	movs	r2, #2
 8003760:	4013      	ands	r3, r2
 8003762:	d0f0      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003764:	4b23      	ldr	r3, [pc, #140]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4a24      	ldr	r2, [pc, #144]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800376a:	4013      	ands	r3, r2
 800376c:	0019      	movs	r1, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003774:	430a      	orrs	r2, r1
 8003776:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003778:	2317      	movs	r3, #23
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d105      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003782:	4b1c      	ldr	r3, [pc, #112]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003784:	69da      	ldr	r2, [r3, #28]
 8003786:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003788:	491f      	ldr	r1, [pc, #124]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800378a:	400a      	ands	r2, r1
 800378c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2201      	movs	r2, #1
 8003794:	4013      	ands	r3, r2
 8003796:	d009      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003798:	4b16      	ldr	r3, [pc, #88]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	2203      	movs	r2, #3
 800379e:	4393      	bics	r3, r2
 80037a0:	0019      	movs	r1, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037a8:	430a      	orrs	r2, r1
 80037aa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2220      	movs	r2, #32
 80037b2:	4013      	ands	r3, r2
 80037b4:	d009      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	2210      	movs	r2, #16
 80037bc:	4393      	bics	r3, r2
 80037be:	0019      	movs	r1, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037c6:	430a      	orrs	r2, r1
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4013      	ands	r3, r2
 80037d4:	d009      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	2240      	movs	r2, #64	; 0x40
 80037dc:	4393      	bics	r3, r2
 80037de:	0019      	movs	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037e6:	430a      	orrs	r2, r1
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b006      	add	sp, #24
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40007000 	.word	0x40007000
 80037fc:	fffffcff 	.word	0xfffffcff
 8003800:	fffeffff 	.word	0xfffeffff
 8003804:	00001388 	.word	0x00001388
 8003808:	efffffff 	.word	0xefffffff

0800380c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e01e      	b.n	800385c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	223d      	movs	r2, #61	; 0x3d
 8003822:	5c9b      	ldrb	r3, [r3, r2]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d107      	bne.n	800383a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	223c      	movs	r2, #60	; 0x3c
 800382e:	2100      	movs	r1, #0
 8003830:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	0018      	movs	r0, r3
 8003836:	f7fe fddf 	bl	80023f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	223d      	movs	r2, #61	; 0x3d
 800383e:	2102      	movs	r1, #2
 8003840:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	0019      	movs	r1, r3
 800384c:	0010      	movs	r0, r2
 800384e:	f000 fae5 	bl	8003e1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	223d      	movs	r2, #61	; 0x3d
 8003856:	2101      	movs	r1, #1
 8003858:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	0018      	movs	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	b002      	add	sp, #8
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	223d      	movs	r2, #61	; 0x3d
 8003870:	2102      	movs	r1, #2
 8003872:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2207      	movs	r2, #7
 800387c:	4013      	ands	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b06      	cmp	r3, #6
 8003884:	d007      	beq.n	8003896 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2101      	movs	r1, #1
 8003892:	430a      	orrs	r2, r1
 8003894:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	223d      	movs	r2, #61	; 0x3d
 800389a:	2101      	movs	r1, #1
 800389c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	0018      	movs	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b004      	add	sp, #16
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2101      	movs	r1, #1
 80038bc:	430a      	orrs	r2, r1
 80038be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2207      	movs	r2, #7
 80038c8:	4013      	ands	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b06      	cmp	r3, #6
 80038d0:	d007      	beq.n	80038e2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2101      	movs	r1, #1
 80038de:	430a      	orrs	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b004      	add	sp, #16
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2101      	movs	r1, #1
 8003900:	438a      	bics	r2, r1
 8003902:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <HAL_TIM_Base_Stop_IT+0x4c>)
 800390c:	4013      	ands	r3, r2
 800390e:	d10d      	bne.n	800392c <HAL_TIM_Base_Stop_IT+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	4a09      	ldr	r2, [pc, #36]	; (800393c <HAL_TIM_Base_Stop_IT+0x50>)
 8003918:	4013      	ands	r3, r2
 800391a:	d107      	bne.n	800392c <HAL_TIM_Base_Stop_IT+0x40>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2101      	movs	r1, #1
 8003928:	438a      	bics	r2, r1
 800392a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b002      	add	sp, #8
 8003934:	bd80      	pop	{r7, pc}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	00001111 	.word	0x00001111
 800393c:	00000444 	.word	0x00000444

08003940 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e01e      	b.n	8003990 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	223d      	movs	r2, #61	; 0x3d
 8003956:	5c9b      	ldrb	r3, [r3, r2]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d107      	bne.n	800396e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	223c      	movs	r2, #60	; 0x3c
 8003962:	2100      	movs	r1, #0
 8003964:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	0018      	movs	r0, r3
 800396a:	f000 f815 	bl	8003998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	223d      	movs	r2, #61	; 0x3d
 8003972:	2102      	movs	r1, #2
 8003974:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3304      	adds	r3, #4
 800397e:	0019      	movs	r1, r3
 8003980:	0010      	movs	r0, r2
 8003982:	f000 fa4b 	bl	8003e1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	223d      	movs	r2, #61	; 0x3d
 800398a:	2101      	movs	r1, #1
 800398c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	0018      	movs	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b002      	add	sp, #8
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6839      	ldr	r1, [r7, #0]
 80039b8:	2201      	movs	r2, #1
 80039ba:	0018      	movs	r0, r3
 80039bc:	f000 fcaa 	bl	8004314 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1a      	ldr	r2, [pc, #104]	; (8003a30 <HAL_TIM_PWM_Start+0x88>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00e      	beq.n	80039e8 <HAL_TIM_PWM_Start+0x40>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a19      	ldr	r2, [pc, #100]	; (8003a34 <HAL_TIM_PWM_Start+0x8c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d009      	beq.n	80039e8 <HAL_TIM_PWM_Start+0x40>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a17      	ldr	r2, [pc, #92]	; (8003a38 <HAL_TIM_PWM_Start+0x90>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <HAL_TIM_PWM_Start+0x40>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <HAL_TIM_PWM_Start+0x94>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d101      	bne.n	80039ec <HAL_TIM_PWM_Start+0x44>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <HAL_TIM_PWM_Start+0x46>
 80039ec:	2300      	movs	r3, #0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2180      	movs	r1, #128	; 0x80
 80039fe:	0209      	lsls	r1, r1, #8
 8003a00:	430a      	orrs	r2, r1
 8003a02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2207      	movs	r2, #7
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b06      	cmp	r3, #6
 8003a14:	d007      	beq.n	8003a26 <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2101      	movs	r1, #1
 8003a22:	430a      	orrs	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b004      	add	sp, #16
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40012c00 	.word	0x40012c00
 8003a34:	40014000 	.word	0x40014000
 8003a38:	40014400 	.word	0x40014400
 8003a3c:	40014800 	.word	0x40014800

08003a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d124      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d11d      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2203      	movs	r2, #3
 8003a6a:	4252      	negs	r2, r2
 8003a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d004      	beq.n	8003a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	0018      	movs	r0, r3
 8003a84:	f000 f9b2 	bl	8003dec <HAL_TIM_IC_CaptureCallback>
 8003a88:	e007      	b.n	8003a9a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f000 f9a5 	bl	8003ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	0018      	movs	r0, r3
 8003a96:	f000 f9b1 	bl	8003dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d125      	bne.n	8003afa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d11e      	bne.n	8003afa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2205      	movs	r2, #5
 8003ac2:	4252      	negs	r2, r2
 8003ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	23c0      	movs	r3, #192	; 0xc0
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f000 f985 	bl	8003dec <HAL_TIM_IC_CaptureCallback>
 8003ae2:	e007      	b.n	8003af4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f000 f978 	bl	8003ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 f984 	bl	8003dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2208      	movs	r2, #8
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d124      	bne.n	8003b52 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2208      	movs	r2, #8
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d11d      	bne.n	8003b52 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2209      	movs	r2, #9
 8003b1c:	4252      	negs	r2, r2
 8003b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2204      	movs	r2, #4
 8003b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d004      	beq.n	8003b3c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	0018      	movs	r0, r3
 8003b36:	f000 f959 	bl	8003dec <HAL_TIM_IC_CaptureCallback>
 8003b3a:	e007      	b.n	8003b4c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f000 f94c 	bl	8003ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	0018      	movs	r0, r3
 8003b48:	f000 f958 	bl	8003dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2210      	movs	r2, #16
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	d125      	bne.n	8003bac <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2210      	movs	r2, #16
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b10      	cmp	r3, #16
 8003b6c:	d11e      	bne.n	8003bac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2211      	movs	r2, #17
 8003b74:	4252      	negs	r2, r2
 8003b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	23c0      	movs	r3, #192	; 0xc0
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d004      	beq.n	8003b96 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f000 f92c 	bl	8003dec <HAL_TIM_IC_CaptureCallback>
 8003b94:	e007      	b.n	8003ba6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f000 f91f 	bl	8003ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f000 f92b 	bl	8003dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d10f      	bne.n	8003bda <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d108      	bne.n	8003bda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	4252      	negs	r2, r2
 8003bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f7fe f951 	bl	8001e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2280      	movs	r2, #128	; 0x80
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b80      	cmp	r3, #128	; 0x80
 8003be6:	d10f      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2280      	movs	r2, #128	; 0x80
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d108      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2281      	movs	r2, #129	; 0x81
 8003bfc:	4252      	negs	r2, r2
 8003bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	0018      	movs	r0, r3
 8003c04:	f000 fc6e 	bl	80044e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2240      	movs	r2, #64	; 0x40
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d10f      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2240      	movs	r2, #64	; 0x40
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d108      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2241      	movs	r2, #65	; 0x41
 8003c2a:	4252      	negs	r2, r2
 8003c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	0018      	movs	r0, r3
 8003c32:	f000 f8eb 	bl	8003e0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d10f      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d108      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2221      	movs	r2, #33	; 0x21
 8003c58:	4252      	negs	r2, r2
 8003c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f000 fc38 	bl	80044d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	223c      	movs	r2, #60	; 0x3c
 8003c7c:	5c9b      	ldrb	r3, [r3, r2]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e0a4      	b.n	8003dd0 <HAL_TIM_PWM_ConfigChannel+0x164>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	223c      	movs	r2, #60	; 0x3c
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	223d      	movs	r2, #61	; 0x3d
 8003c92:	2102      	movs	r1, #2
 8003c94:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d029      	beq.n	8003cf0 <HAL_TIM_PWM_ConfigChannel+0x84>
 8003c9c:	d802      	bhi.n	8003ca4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8003ca2:	e08c      	b.n	8003dbe <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d046      	beq.n	8003d36 <HAL_TIM_PWM_ConfigChannel+0xca>
 8003ca8:	2b0c      	cmp	r3, #12
 8003caa:	d065      	beq.n	8003d78 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8003cac:	e087      	b.n	8003dbe <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	0011      	movs	r1, r2
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f000 f930 	bl	8003f1c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2108      	movs	r1, #8
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2104      	movs	r1, #4
 8003cd8:	438a      	bics	r2, r1
 8003cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6999      	ldr	r1, [r3, #24]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	619a      	str	r2, [r3, #24]
      break;
 8003cee:	e066      	b.n	8003dbe <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	0011      	movs	r1, r2
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f000 f997 	bl	800402c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699a      	ldr	r2, [r3, #24]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2180      	movs	r1, #128	; 0x80
 8003d0a:	0109      	lsls	r1, r1, #4
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	492f      	ldr	r1, [pc, #188]	; (8003dd8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003d1c:	400a      	ands	r2, r1
 8003d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6999      	ldr	r1, [r3, #24]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	021a      	lsls	r2, r3, #8
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	619a      	str	r2, [r3, #24]
      break;
 8003d34:	e043      	b.n	8003dbe <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	0011      	movs	r1, r2
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f000 f9f8 	bl	8004134 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2108      	movs	r1, #8
 8003d50:	430a      	orrs	r2, r1
 8003d52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2104      	movs	r1, #4
 8003d60:	438a      	bics	r2, r1
 8003d62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	69d9      	ldr	r1, [r3, #28]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	61da      	str	r2, [r3, #28]
      break;
 8003d76:	e022      	b.n	8003dbe <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	0011      	movs	r1, r2
 8003d80:	0018      	movs	r0, r3
 8003d82:	f000 fa5d 	bl	8004240 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2180      	movs	r1, #128	; 0x80
 8003d92:	0109      	lsls	r1, r1, #4
 8003d94:	430a      	orrs	r2, r1
 8003d96:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69da      	ldr	r2, [r3, #28]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	490d      	ldr	r1, [pc, #52]	; (8003dd8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003da4:	400a      	ands	r2, r1
 8003da6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69d9      	ldr	r1, [r3, #28]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	021a      	lsls	r2, r3, #8
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	61da      	str	r2, [r3, #28]
      break;
 8003dbc:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	223d      	movs	r2, #61	; 0x3d
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	223c      	movs	r2, #60	; 0x3c
 8003dca:	2100      	movs	r1, #0
 8003dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b004      	add	sp, #16
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	fffffbff 	.word	0xfffffbff

08003ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b002      	add	sp, #8
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003df4:	46c0      	nop			; (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b002      	add	sp, #8
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b002      	add	sp, #8
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a34      	ldr	r2, [pc, #208]	; (8003f00 <TIM_Base_SetConfig+0xe4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d008      	beq.n	8003e46 <TIM_Base_SetConfig+0x2a>
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	05db      	lsls	r3, r3, #23
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d003      	beq.n	8003e46 <TIM_Base_SetConfig+0x2a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a30      	ldr	r2, [pc, #192]	; (8003f04 <TIM_Base_SetConfig+0xe8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d108      	bne.n	8003e58 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2270      	movs	r2, #112	; 0x70
 8003e4a:	4393      	bics	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a29      	ldr	r2, [pc, #164]	; (8003f00 <TIM_Base_SetConfig+0xe4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d018      	beq.n	8003e92 <TIM_Base_SetConfig+0x76>
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	05db      	lsls	r3, r3, #23
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d013      	beq.n	8003e92 <TIM_Base_SetConfig+0x76>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a25      	ldr	r2, [pc, #148]	; (8003f04 <TIM_Base_SetConfig+0xe8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00f      	beq.n	8003e92 <TIM_Base_SetConfig+0x76>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a24      	ldr	r2, [pc, #144]	; (8003f08 <TIM_Base_SetConfig+0xec>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00b      	beq.n	8003e92 <TIM_Base_SetConfig+0x76>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a23      	ldr	r2, [pc, #140]	; (8003f0c <TIM_Base_SetConfig+0xf0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <TIM_Base_SetConfig+0x76>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a22      	ldr	r2, [pc, #136]	; (8003f10 <TIM_Base_SetConfig+0xf4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d003      	beq.n	8003e92 <TIM_Base_SetConfig+0x76>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a21      	ldr	r2, [pc, #132]	; (8003f14 <TIM_Base_SetConfig+0xf8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d108      	bne.n	8003ea4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a20      	ldr	r2, [pc, #128]	; (8003f18 <TIM_Base_SetConfig+0xfc>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2280      	movs	r2, #128	; 0x80
 8003ea8:	4393      	bics	r3, r2
 8003eaa:	001a      	movs	r2, r3
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a0c      	ldr	r2, [pc, #48]	; (8003f00 <TIM_Base_SetConfig+0xe4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00b      	beq.n	8003eea <TIM_Base_SetConfig+0xce>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <TIM_Base_SetConfig+0xf0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d007      	beq.n	8003eea <TIM_Base_SetConfig+0xce>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a0c      	ldr	r2, [pc, #48]	; (8003f10 <TIM_Base_SetConfig+0xf4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d003      	beq.n	8003eea <TIM_Base_SetConfig+0xce>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a0b      	ldr	r2, [pc, #44]	; (8003f14 <TIM_Base_SetConfig+0xf8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d103      	bne.n	8003ef2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	615a      	str	r2, [r3, #20]
}
 8003ef8:	46c0      	nop			; (mov r8, r8)
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b004      	add	sp, #16
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40002000 	.word	0x40002000
 8003f0c:	40014000 	.word	0x40014000
 8003f10:	40014400 	.word	0x40014400
 8003f14:	40014800 	.word	0x40014800
 8003f18:	fffffcff 	.word	0xfffffcff

08003f1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4393      	bics	r3, r2
 8003f2e:	001a      	movs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2270      	movs	r2, #112	; 0x70
 8003f4a:	4393      	bics	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2203      	movs	r2, #3
 8003f52:	4393      	bics	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2202      	movs	r2, #2
 8003f64:	4393      	bics	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a27      	ldr	r2, [pc, #156]	; (8004014 <TIM_OC1_SetConfig+0xf8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00b      	beq.n	8003f92 <TIM_OC1_SetConfig+0x76>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a26      	ldr	r2, [pc, #152]	; (8004018 <TIM_OC1_SetConfig+0xfc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d007      	beq.n	8003f92 <TIM_OC1_SetConfig+0x76>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a25      	ldr	r2, [pc, #148]	; (800401c <TIM_OC1_SetConfig+0x100>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d003      	beq.n	8003f92 <TIM_OC1_SetConfig+0x76>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a24      	ldr	r2, [pc, #144]	; (8004020 <TIM_OC1_SetConfig+0x104>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d10c      	bne.n	8003fac <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2208      	movs	r2, #8
 8003f96:	4393      	bics	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	4393      	bics	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a19      	ldr	r2, [pc, #100]	; (8004014 <TIM_OC1_SetConfig+0xf8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00b      	beq.n	8003fcc <TIM_OC1_SetConfig+0xb0>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a18      	ldr	r2, [pc, #96]	; (8004018 <TIM_OC1_SetConfig+0xfc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d007      	beq.n	8003fcc <TIM_OC1_SetConfig+0xb0>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a17      	ldr	r2, [pc, #92]	; (800401c <TIM_OC1_SetConfig+0x100>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d003      	beq.n	8003fcc <TIM_OC1_SetConfig+0xb0>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a16      	ldr	r2, [pc, #88]	; (8004020 <TIM_OC1_SetConfig+0x104>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d111      	bne.n	8003ff0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4a15      	ldr	r2, [pc, #84]	; (8004024 <TIM_OC1_SetConfig+0x108>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4a14      	ldr	r2, [pc, #80]	; (8004028 <TIM_OC1_SetConfig+0x10c>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	621a      	str	r2, [r3, #32]
}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	46bd      	mov	sp, r7
 800400e:	b006      	add	sp, #24
 8004010:	bd80      	pop	{r7, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40014000 	.word	0x40014000
 800401c:	40014400 	.word	0x40014400
 8004020:	40014800 	.word	0x40014800
 8004024:	fffffeff 	.word	0xfffffeff
 8004028:	fffffdff 	.word	0xfffffdff

0800402c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	2210      	movs	r2, #16
 800403c:	4393      	bics	r3, r2
 800403e:	001a      	movs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4a2e      	ldr	r2, [pc, #184]	; (8004114 <TIM_OC2_SetConfig+0xe8>)
 800405a:	4013      	ands	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4a2d      	ldr	r2, [pc, #180]	; (8004118 <TIM_OC2_SetConfig+0xec>)
 8004062:	4013      	ands	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2220      	movs	r2, #32
 8004076:	4393      	bics	r3, r2
 8004078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a24      	ldr	r2, [pc, #144]	; (800411c <TIM_OC2_SetConfig+0xf0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d10d      	bne.n	80040aa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2280      	movs	r2, #128	; 0x80
 8004092:	4393      	bics	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2240      	movs	r2, #64	; 0x40
 80040a6:	4393      	bics	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a1b      	ldr	r2, [pc, #108]	; (800411c <TIM_OC2_SetConfig+0xf0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00b      	beq.n	80040ca <TIM_OC2_SetConfig+0x9e>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a1a      	ldr	r2, [pc, #104]	; (8004120 <TIM_OC2_SetConfig+0xf4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_OC2_SetConfig+0x9e>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a19      	ldr	r2, [pc, #100]	; (8004124 <TIM_OC2_SetConfig+0xf8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_OC2_SetConfig+0x9e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a18      	ldr	r2, [pc, #96]	; (8004128 <TIM_OC2_SetConfig+0xfc>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d113      	bne.n	80040f2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4a17      	ldr	r2, [pc, #92]	; (800412c <TIM_OC2_SetConfig+0x100>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4a16      	ldr	r2, [pc, #88]	; (8004130 <TIM_OC2_SetConfig+0x104>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	621a      	str	r2, [r3, #32]
}
 800410c:	46c0      	nop			; (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	b006      	add	sp, #24
 8004112:	bd80      	pop	{r7, pc}
 8004114:	ffff8fff 	.word	0xffff8fff
 8004118:	fffffcff 	.word	0xfffffcff
 800411c:	40012c00 	.word	0x40012c00
 8004120:	40014000 	.word	0x40014000
 8004124:	40014400 	.word	0x40014400
 8004128:	40014800 	.word	0x40014800
 800412c:	fffffbff 	.word	0xfffffbff
 8004130:	fffff7ff 	.word	0xfffff7ff

08004134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	4a35      	ldr	r2, [pc, #212]	; (8004218 <TIM_OC3_SetConfig+0xe4>)
 8004144:	401a      	ands	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2270      	movs	r2, #112	; 0x70
 8004160:	4393      	bics	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2203      	movs	r2, #3
 8004168:	4393      	bics	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	4a28      	ldr	r2, [pc, #160]	; (800421c <TIM_OC3_SetConfig+0xe8>)
 800417a:	4013      	ands	r3, r2
 800417c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	021b      	lsls	r3, r3, #8
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a24      	ldr	r2, [pc, #144]	; (8004220 <TIM_OC3_SetConfig+0xec>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10d      	bne.n	80041ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	4a23      	ldr	r2, [pc, #140]	; (8004224 <TIM_OC3_SetConfig+0xf0>)
 8004196:	4013      	ands	r3, r2
 8004198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <TIM_OC3_SetConfig+0xf4>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <TIM_OC3_SetConfig+0xec>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00b      	beq.n	80041ce <TIM_OC3_SetConfig+0x9a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1c      	ldr	r2, [pc, #112]	; (800422c <TIM_OC3_SetConfig+0xf8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d007      	beq.n	80041ce <TIM_OC3_SetConfig+0x9a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <TIM_OC3_SetConfig+0xfc>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d003      	beq.n	80041ce <TIM_OC3_SetConfig+0x9a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1a      	ldr	r2, [pc, #104]	; (8004234 <TIM_OC3_SetConfig+0x100>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d113      	bne.n	80041f6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	4a19      	ldr	r2, [pc, #100]	; (8004238 <TIM_OC3_SetConfig+0x104>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4a18      	ldr	r2, [pc, #96]	; (800423c <TIM_OC3_SetConfig+0x108>)
 80041da:	4013      	ands	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	621a      	str	r2, [r3, #32]
}
 8004210:	46c0      	nop			; (mov r8, r8)
 8004212:	46bd      	mov	sp, r7
 8004214:	b006      	add	sp, #24
 8004216:	bd80      	pop	{r7, pc}
 8004218:	fffffeff 	.word	0xfffffeff
 800421c:	fffffdff 	.word	0xfffffdff
 8004220:	40012c00 	.word	0x40012c00
 8004224:	fffff7ff 	.word	0xfffff7ff
 8004228:	fffffbff 	.word	0xfffffbff
 800422c:	40014000 	.word	0x40014000
 8004230:	40014400 	.word	0x40014400
 8004234:	40014800 	.word	0x40014800
 8004238:	ffffefff 	.word	0xffffefff
 800423c:	ffffdfff 	.word	0xffffdfff

08004240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	4a28      	ldr	r2, [pc, #160]	; (80042f0 <TIM_OC4_SetConfig+0xb0>)
 8004250:	401a      	ands	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4a22      	ldr	r2, [pc, #136]	; (80042f4 <TIM_OC4_SetConfig+0xb4>)
 800426c:	4013      	ands	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a21      	ldr	r2, [pc, #132]	; (80042f8 <TIM_OC4_SetConfig+0xb8>)
 8004274:	4013      	ands	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4a1d      	ldr	r2, [pc, #116]	; (80042fc <TIM_OC4_SetConfig+0xbc>)
 8004288:	4013      	ands	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	031b      	lsls	r3, r3, #12
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a19      	ldr	r2, [pc, #100]	; (8004300 <TIM_OC4_SetConfig+0xc0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00b      	beq.n	80042b8 <TIM_OC4_SetConfig+0x78>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a18      	ldr	r2, [pc, #96]	; (8004304 <TIM_OC4_SetConfig+0xc4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d007      	beq.n	80042b8 <TIM_OC4_SetConfig+0x78>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a17      	ldr	r2, [pc, #92]	; (8004308 <TIM_OC4_SetConfig+0xc8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_OC4_SetConfig+0x78>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a16      	ldr	r2, [pc, #88]	; (800430c <TIM_OC4_SetConfig+0xcc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d109      	bne.n	80042cc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	4a15      	ldr	r2, [pc, #84]	; (8004310 <TIM_OC4_SetConfig+0xd0>)
 80042bc:	4013      	ands	r3, r2
 80042be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	019b      	lsls	r3, r3, #6
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b006      	add	sp, #24
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	ffffefff 	.word	0xffffefff
 80042f4:	ffff8fff 	.word	0xffff8fff
 80042f8:	fffffcff 	.word	0xfffffcff
 80042fc:	ffffdfff 	.word	0xffffdfff
 8004300:	40012c00 	.word	0x40012c00
 8004304:	40014000 	.word	0x40014000
 8004308:	40014400 	.word	0x40014400
 800430c:	40014800 	.word	0x40014800
 8004310:	ffffbfff 	.word	0xffffbfff

08004314 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	221f      	movs	r2, #31
 8004324:	4013      	ands	r3, r2
 8004326:	2201      	movs	r2, #1
 8004328:	409a      	lsls	r2, r3
 800432a:	0013      	movs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	43d2      	mvns	r2, r2
 8004336:	401a      	ands	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1a      	ldr	r2, [r3, #32]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	211f      	movs	r1, #31
 8004344:	400b      	ands	r3, r1
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4099      	lsls	r1, r3
 800434a:	000b      	movs	r3, r1
 800434c:	431a      	orrs	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	621a      	str	r2, [r3, #32]
}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	46bd      	mov	sp, r7
 8004356:	b006      	add	sp, #24
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	223c      	movs	r2, #60	; 0x3c
 800436a:	5c9b      	ldrb	r3, [r3, r2]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004370:	2302      	movs	r3, #2
 8004372:	e047      	b.n	8004404 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	223c      	movs	r2, #60	; 0x3c
 8004378:	2101      	movs	r1, #1
 800437a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	223d      	movs	r2, #61	; 0x3d
 8004380:	2102      	movs	r1, #2
 8004382:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2270      	movs	r2, #112	; 0x70
 8004398:	4393      	bics	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a16      	ldr	r2, [pc, #88]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00f      	beq.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	2380      	movs	r3, #128	; 0x80
 80043be:	05db      	lsls	r3, r3, #23
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d009      	beq.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a11      	ldr	r2, [pc, #68]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d004      	beq.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a10      	ldr	r2, [pc, #64]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d10c      	bne.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2280      	movs	r2, #128	; 0x80
 80043dc:	4393      	bics	r3, r2
 80043de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	223d      	movs	r2, #61	; 0x3d
 80043f6:	2101      	movs	r1, #1
 80043f8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	223c      	movs	r2, #60	; 0x3c
 80043fe:	2100      	movs	r1, #0
 8004400:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b004      	add	sp, #16
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40000400 	.word	0x40000400
 8004414:	40014000 	.word	0x40014000

08004418 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	223c      	movs	r2, #60	; 0x3c
 800442a:	5c9b      	ldrb	r3, [r3, r2]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004430:	2302      	movs	r3, #2
 8004432:	e03e      	b.n	80044b2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	223c      	movs	r2, #60	; 0x3c
 8004438:	2101      	movs	r1, #1
 800443a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	22ff      	movs	r2, #255	; 0xff
 8004440:	4393      	bics	r3, r2
 8004442:	001a      	movs	r2, r3
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4a1b      	ldr	r2, [pc, #108]	; (80044bc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004450:	401a      	ands	r2, r3
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4a18      	ldr	r2, [pc, #96]	; (80044c0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800445e:	401a      	ands	r2, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4a16      	ldr	r2, [pc, #88]	; (80044c4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800446c:	401a      	ands	r2, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4a13      	ldr	r2, [pc, #76]	; (80044c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800447a:	401a      	ands	r2, r3
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4a11      	ldr	r2, [pc, #68]	; (80044cc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004488:	401a      	ands	r2, r3
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4a0e      	ldr	r2, [pc, #56]	; (80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004496:	401a      	ands	r2, r3
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	223c      	movs	r2, #60	; 0x3c
 80044ac:	2100      	movs	r1, #0
 80044ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	0018      	movs	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	b004      	add	sp, #16
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	fffffcff 	.word	0xfffffcff
 80044c0:	fffffbff 	.word	0xfffffbff
 80044c4:	fffff7ff 	.word	0xfffff7ff
 80044c8:	ffffefff 	.word	0xffffefff
 80044cc:	ffffdfff 	.word	0xffffdfff
 80044d0:	ffffbfff 	.word	0xffffbfff

080044d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044dc:	46c0      	nop			; (mov r8, r8)
 80044de:	46bd      	mov	sp, r7
 80044e0:	b002      	add	sp, #8
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044ec:	46c0      	nop			; (mov r8, r8)
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b002      	add	sp, #8
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e044      	b.n	8004590 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450a:	2b00      	cmp	r3, #0
 800450c:	d107      	bne.n	800451e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2270      	movs	r2, #112	; 0x70
 8004512:	2100      	movs	r1, #0
 8004514:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	0018      	movs	r0, r3
 800451a:	f7fe f85d 	bl	80025d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2224      	movs	r2, #36	; 0x24
 8004522:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2101      	movs	r1, #1
 8004530:	438a      	bics	r2, r1
 8004532:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	0018      	movs	r0, r3
 8004538:	f000 fa20 	bl	800497c <UART_SetConfig>
 800453c:	0003      	movs	r3, r0
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e024      	b.n	8004590 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	0018      	movs	r0, r3
 8004552:	f000 fb99 	bl	8004c88 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	490d      	ldr	r1, [pc, #52]	; (8004598 <HAL_UART_Init+0xa4>)
 8004562:	400a      	ands	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	212a      	movs	r1, #42	; 0x2a
 8004572:	438a      	bics	r2, r1
 8004574:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2101      	movs	r1, #1
 8004582:	430a      	orrs	r2, r1
 8004584:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	0018      	movs	r0, r3
 800458a:	f000 fc31 	bl	8004df0 <UART_CheckIdleState>
 800458e:	0003      	movs	r3, r0
}
 8004590:	0018      	movs	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	b002      	add	sp, #8
 8004596:	bd80      	pop	{r7, pc}
 8004598:	ffffb7ff 	.word	0xffffb7ff

0800459c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	1dbb      	adds	r3, r7, #6
 80045a8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d000      	beq.n	80045b4 <HAL_UART_Receive_IT+0x18>
 80045b2:	e08b      	b.n	80046cc <HAL_UART_Receive_IT+0x130>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_UART_Receive_IT+0x26>
 80045ba:	1dbb      	adds	r3, r7, #6
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e083      	b.n	80046ce <HAL_UART_Receive_IT+0x132>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	2380      	movs	r3, #128	; 0x80
 80045cc:	015b      	lsls	r3, r3, #5
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d109      	bne.n	80045e6 <HAL_UART_Receive_IT+0x4a>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d105      	bne.n	80045e6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2201      	movs	r2, #1
 80045de:	4013      	ands	r3, r2
 80045e0:	d001      	beq.n	80045e6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e073      	b.n	80046ce <HAL_UART_Receive_IT+0x132>
      }
    }

    __HAL_LOCK(huart);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2270      	movs	r2, #112	; 0x70
 80045ea:	5c9b      	ldrb	r3, [r3, r2]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_UART_Receive_IT+0x58>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e06c      	b.n	80046ce <HAL_UART_Receive_IT+0x132>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2270      	movs	r2, #112	; 0x70
 80045f8:	2101      	movs	r1, #1
 80045fa:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1dba      	adds	r2, r7, #6
 8004606:	2158      	movs	r1, #88	; 0x58
 8004608:	8812      	ldrh	r2, [r2, #0]
 800460a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	1dba      	adds	r2, r7, #6
 8004610:	215a      	movs	r1, #90	; 0x5a
 8004612:	8812      	ldrh	r2, [r2, #0]
 8004614:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	015b      	lsls	r3, r3, #5
 8004624:	429a      	cmp	r2, r3
 8004626:	d10d      	bne.n	8004644 <HAL_UART_Receive_IT+0xa8>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d104      	bne.n	800463a <HAL_UART_Receive_IT+0x9e>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	225c      	movs	r2, #92	; 0x5c
 8004634:	4928      	ldr	r1, [pc, #160]	; (80046d8 <HAL_UART_Receive_IT+0x13c>)
 8004636:	5299      	strh	r1, [r3, r2]
 8004638:	e01a      	b.n	8004670 <HAL_UART_Receive_IT+0xd4>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	225c      	movs	r2, #92	; 0x5c
 800463e:	21ff      	movs	r1, #255	; 0xff
 8004640:	5299      	strh	r1, [r3, r2]
 8004642:	e015      	b.n	8004670 <HAL_UART_Receive_IT+0xd4>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10d      	bne.n	8004668 <HAL_UART_Receive_IT+0xcc>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d104      	bne.n	800465e <HAL_UART_Receive_IT+0xc2>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	225c      	movs	r2, #92	; 0x5c
 8004658:	21ff      	movs	r1, #255	; 0xff
 800465a:	5299      	strh	r1, [r3, r2]
 800465c:	e008      	b.n	8004670 <HAL_UART_Receive_IT+0xd4>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	225c      	movs	r2, #92	; 0x5c
 8004662:	217f      	movs	r1, #127	; 0x7f
 8004664:	5299      	strh	r1, [r3, r2]
 8004666:	e003      	b.n	8004670 <HAL_UART_Receive_IT+0xd4>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	225c      	movs	r2, #92	; 0x5c
 800466c:	2100      	movs	r1, #0
 800466e:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2222      	movs	r2, #34	; 0x22
 800467a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2101      	movs	r1, #1
 8004688:	430a      	orrs	r2, r1
 800468a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	015b      	lsls	r3, r3, #5
 8004694:	429a      	cmp	r2, r3
 8004696:	d107      	bne.n	80046a8 <HAL_UART_Receive_IT+0x10c>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d103      	bne.n	80046a8 <HAL_UART_Receive_IT+0x10c>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a0e      	ldr	r2, [pc, #56]	; (80046dc <HAL_UART_Receive_IT+0x140>)
 80046a4:	661a      	str	r2, [r3, #96]	; 0x60
 80046a6:	e002      	b.n	80046ae <HAL_UART_Receive_IT+0x112>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a0d      	ldr	r2, [pc, #52]	; (80046e0 <HAL_UART_Receive_IT+0x144>)
 80046ac:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2270      	movs	r2, #112	; 0x70
 80046b2:	2100      	movs	r1, #0
 80046b4:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2190      	movs	r1, #144	; 0x90
 80046c2:	0049      	lsls	r1, r1, #1
 80046c4:	430a      	orrs	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e000      	b.n	80046ce <HAL_UART_Receive_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80046cc:	2302      	movs	r3, #2
  }
}
 80046ce:	0018      	movs	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b004      	add	sp, #16
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	000001ff 	.word	0x000001ff
 80046dc:	080050d9 	.word	0x080050d9
 80046e0:	0800501d 	.word	0x0800501d

080046e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	4a93      	ldr	r2, [pc, #588]	; (8004954 <HAL_UART_IRQHandler+0x270>)
 8004708:	4013      	ands	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d112      	bne.n	8004738 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	2220      	movs	r2, #32
 8004716:	4013      	ands	r3, r2
 8004718:	d00e      	beq.n	8004738 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	2220      	movs	r2, #32
 800471e:	4013      	ands	r3, r2
 8004720:	d00a      	beq.n	8004738 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004726:	2b00      	cmp	r3, #0
 8004728:	d100      	bne.n	800472c <HAL_UART_IRQHandler+0x48>
 800472a:	e10b      	b.n	8004944 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	0010      	movs	r0, r2
 8004734:	4798      	blx	r3
      }
      return;
 8004736:	e105      	b.n	8004944 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d100      	bne.n	8004740 <HAL_UART_IRQHandler+0x5c>
 800473e:	e0cd      	b.n	80048dc <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2201      	movs	r2, #1
 8004744:	4013      	ands	r3, r2
 8004746:	d105      	bne.n	8004754 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	2390      	movs	r3, #144	; 0x90
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	4013      	ands	r3, r2
 8004750:	d100      	bne.n	8004754 <HAL_UART_IRQHandler+0x70>
 8004752:	e0c3      	b.n	80048dc <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	2201      	movs	r2, #1
 8004758:	4013      	ands	r3, r2
 800475a:	d00e      	beq.n	800477a <HAL_UART_IRQHandler+0x96>
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	4013      	ands	r3, r2
 8004764:	d009      	beq.n	800477a <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2201      	movs	r2, #1
 800476c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004772:	2201      	movs	r2, #1
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	2202      	movs	r2, #2
 800477e:	4013      	ands	r3, r2
 8004780:	d00d      	beq.n	800479e <HAL_UART_IRQHandler+0xba>
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2201      	movs	r2, #1
 8004786:	4013      	ands	r3, r2
 8004788:	d009      	beq.n	800479e <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2202      	movs	r2, #2
 8004790:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004796:	2204      	movs	r2, #4
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	2204      	movs	r2, #4
 80047a2:	4013      	ands	r3, r2
 80047a4:	d00d      	beq.n	80047c2 <HAL_UART_IRQHandler+0xde>
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2201      	movs	r2, #1
 80047aa:	4013      	ands	r3, r2
 80047ac:	d009      	beq.n	80047c2 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2204      	movs	r2, #4
 80047b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ba:	2202      	movs	r2, #2
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	2208      	movs	r2, #8
 80047c6:	4013      	ands	r3, r2
 80047c8:	d011      	beq.n	80047ee <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2220      	movs	r2, #32
 80047ce:	4013      	ands	r3, r2
 80047d0:	d103      	bne.n	80047da <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2201      	movs	r2, #1
 80047d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047d8:	d009      	beq.n	80047ee <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2208      	movs	r2, #8
 80047e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e6:	2208      	movs	r2, #8
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	4013      	ands	r3, r2
 80047f6:	d00f      	beq.n	8004818 <HAL_UART_IRQHandler+0x134>
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	04db      	lsls	r3, r3, #19
 80047fe:	4013      	ands	r3, r2
 8004800:	d00a      	beq.n	8004818 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2280      	movs	r2, #128	; 0x80
 8004808:	0112      	lsls	r2, r2, #4
 800480a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004810:	2220      	movs	r2, #32
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800481c:	2b00      	cmp	r3, #0
 800481e:	d100      	bne.n	8004822 <HAL_UART_IRQHandler+0x13e>
 8004820:	e092      	b.n	8004948 <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	2220      	movs	r2, #32
 8004826:	4013      	ands	r3, r2
 8004828:	d00c      	beq.n	8004844 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2220      	movs	r2, #32
 800482e:	4013      	ands	r3, r2
 8004830:	d008      	beq.n	8004844 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004836:	2b00      	cmp	r3, #0
 8004838:	d004      	beq.n	8004844 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	0010      	movs	r0, r2
 8004842:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004848:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2240      	movs	r2, #64	; 0x40
 8004852:	4013      	ands	r3, r2
 8004854:	2b40      	cmp	r3, #64	; 0x40
 8004856:	d003      	beq.n	8004860 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2228      	movs	r2, #40	; 0x28
 800485c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800485e:	d033      	beq.n	80048c8 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	0018      	movs	r0, r3
 8004864:	f000 fb88 	bl	8004f78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2240      	movs	r2, #64	; 0x40
 8004870:	4013      	ands	r3, r2
 8004872:	2b40      	cmp	r3, #64	; 0x40
 8004874:	d123      	bne.n	80048be <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2140      	movs	r1, #64	; 0x40
 8004882:	438a      	bics	r2, r1
 8004884:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d012      	beq.n	80048b4 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004892:	4a31      	ldr	r2, [pc, #196]	; (8004958 <HAL_UART_IRQHandler+0x274>)
 8004894:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800489a:	0018      	movs	r0, r3
 800489c:	f7fe f85e 	bl	800295c <HAL_DMA_Abort_IT>
 80048a0:	1e03      	subs	r3, r0, #0
 80048a2:	d019      	beq.n	80048d8 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ae:	0018      	movs	r0, r3
 80048b0:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b2:	e011      	b.n	80048d8 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	0018      	movs	r0, r3
 80048b8:	f000 f858 	bl	800496c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048bc:	e00c      	b.n	80048d8 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f000 f853 	bl	800496c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c6:	e007      	b.n	80048d8 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	0018      	movs	r0, r3
 80048cc:	f000 f84e 	bl	800496c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80048d6:	e037      	b.n	8004948 <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	46c0      	nop			; (mov r8, r8)
    return;
 80048da:	e035      	b.n	8004948 <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	035b      	lsls	r3, r3, #13
 80048e2:	4013      	ands	r3, r2
 80048e4:	d00e      	beq.n	8004904 <HAL_UART_IRQHandler+0x220>
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	2380      	movs	r3, #128	; 0x80
 80048ea:	03db      	lsls	r3, r3, #15
 80048ec:	4013      	ands	r3, r2
 80048ee:	d009      	beq.n	8004904 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2280      	movs	r2, #128	; 0x80
 80048f6:	0352      	lsls	r2, r2, #13
 80048f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	0018      	movs	r0, r3
 80048fe:	f000 fc49 	bl	8005194 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004902:	e024      	b.n	800494e <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	2280      	movs	r2, #128	; 0x80
 8004908:	4013      	ands	r3, r2
 800490a:	d00d      	beq.n	8004928 <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2280      	movs	r2, #128	; 0x80
 8004910:	4013      	ands	r3, r2
 8004912:	d009      	beq.n	8004928 <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004918:	2b00      	cmp	r3, #0
 800491a:	d017      	beq.n	800494c <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	0010      	movs	r0, r2
 8004924:	4798      	blx	r3
    }
    return;
 8004926:	e011      	b.n	800494c <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	2240      	movs	r2, #64	; 0x40
 800492c:	4013      	ands	r3, r2
 800492e:	d00e      	beq.n	800494e <HAL_UART_IRQHandler+0x26a>
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2240      	movs	r2, #64	; 0x40
 8004934:	4013      	ands	r3, r2
 8004936:	d00a      	beq.n	800494e <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	0018      	movs	r0, r3
 800493c:	f000 fb53 	bl	8004fe6 <UART_EndTransmit_IT>
    return;
 8004940:	46c0      	nop			; (mov r8, r8)
 8004942:	e004      	b.n	800494e <HAL_UART_IRQHandler+0x26a>
      return;
 8004944:	46c0      	nop			; (mov r8, r8)
 8004946:	e002      	b.n	800494e <HAL_UART_IRQHandler+0x26a>
    return;
 8004948:	46c0      	nop			; (mov r8, r8)
 800494a:	e000      	b.n	800494e <HAL_UART_IRQHandler+0x26a>
    return;
 800494c:	46c0      	nop			; (mov r8, r8)
  }

}
 800494e:	46bd      	mov	sp, r7
 8004950:	b008      	add	sp, #32
 8004952:	bd80      	pop	{r7, pc}
 8004954:	0000080f 	.word	0x0000080f
 8004958:	08004fb9 	.word	0x08004fb9

0800495c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004964:	46c0      	nop			; (mov r8, r8)
 8004966:	46bd      	mov	sp, r7
 8004968:	b002      	add	sp, #8
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004974:	46c0      	nop			; (mov r8, r8)
 8004976:	46bd      	mov	sp, r7
 8004978:	b002      	add	sp, #8
 800497a:	bd80      	pop	{r7, pc}

0800497c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004984:	2300      	movs	r3, #0
 8004986:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004988:	2317      	movs	r3, #23
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	2200      	movs	r2, #0
 800498e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4aad      	ldr	r2, [pc, #692]	; (8004c64 <UART_SetConfig+0x2e8>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	0019      	movs	r1, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4aa8      	ldr	r2, [pc, #672]	; (8004c68 <UART_SetConfig+0x2ec>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	0019      	movs	r1, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4a9f      	ldr	r2, [pc, #636]	; (8004c6c <UART_SetConfig+0x2f0>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	0019      	movs	r1, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a9b      	ldr	r2, [pc, #620]	; (8004c70 <UART_SetConfig+0x2f4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d125      	bne.n	8004a52 <UART_SetConfig+0xd6>
 8004a06:	4b9b      	ldr	r3, [pc, #620]	; (8004c74 <UART_SetConfig+0x2f8>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d00f      	beq.n	8004a32 <UART_SetConfig+0xb6>
 8004a12:	d304      	bcc.n	8004a1e <UART_SetConfig+0xa2>
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d011      	beq.n	8004a3c <UART_SetConfig+0xc0>
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d005      	beq.n	8004a28 <UART_SetConfig+0xac>
 8004a1c:	e013      	b.n	8004a46 <UART_SetConfig+0xca>
 8004a1e:	231f      	movs	r3, #31
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	e022      	b.n	8004a6e <UART_SetConfig+0xf2>
 8004a28:	231f      	movs	r3, #31
 8004a2a:	18fb      	adds	r3, r7, r3
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	701a      	strb	r2, [r3, #0]
 8004a30:	e01d      	b.n	8004a6e <UART_SetConfig+0xf2>
 8004a32:	231f      	movs	r3, #31
 8004a34:	18fb      	adds	r3, r7, r3
 8004a36:	2204      	movs	r2, #4
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	e018      	b.n	8004a6e <UART_SetConfig+0xf2>
 8004a3c:	231f      	movs	r3, #31
 8004a3e:	18fb      	adds	r3, r7, r3
 8004a40:	2208      	movs	r2, #8
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	e013      	b.n	8004a6e <UART_SetConfig+0xf2>
 8004a46:	231f      	movs	r3, #31
 8004a48:	18fb      	adds	r3, r7, r3
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	e00d      	b.n	8004a6e <UART_SetConfig+0xf2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a88      	ldr	r2, [pc, #544]	; (8004c78 <UART_SetConfig+0x2fc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d104      	bne.n	8004a66 <UART_SetConfig+0xea>
 8004a5c:	231f      	movs	r3, #31
 8004a5e:	18fb      	adds	r3, r7, r3
 8004a60:	2200      	movs	r2, #0
 8004a62:	701a      	strb	r2, [r3, #0]
 8004a64:	e003      	b.n	8004a6e <UART_SetConfig+0xf2>
 8004a66:	231f      	movs	r3, #31
 8004a68:	18fb      	adds	r3, r7, r3
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69da      	ldr	r2, [r3, #28]
 8004a72:	2380      	movs	r3, #128	; 0x80
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d000      	beq.n	8004a7c <UART_SetConfig+0x100>
 8004a7a:	e07d      	b.n	8004b78 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8004a7c:	231f      	movs	r3, #31
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d01c      	beq.n	8004ac0 <UART_SetConfig+0x144>
 8004a86:	dc02      	bgt.n	8004a8e <UART_SetConfig+0x112>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <UART_SetConfig+0x11c>
 8004a8c:	e04b      	b.n	8004b26 <UART_SetConfig+0x1aa>
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d025      	beq.n	8004ade <UART_SetConfig+0x162>
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d037      	beq.n	8004b06 <UART_SetConfig+0x18a>
 8004a96:	e046      	b.n	8004b26 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a98:	f7fe fdc4 	bl	8003624 <HAL_RCC_GetPCLK1Freq>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	005a      	lsls	r2, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	085b      	lsrs	r3, r3, #1
 8004aaa:	18d2      	adds	r2, r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	0019      	movs	r1, r3
 8004ab2:	0010      	movs	r0, r2
 8004ab4:	f7fb fb28 	bl	8000108 <__udivsi3>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	61bb      	str	r3, [r7, #24]
        break;
 8004abe:	e037      	b.n	8004b30 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	085b      	lsrs	r3, r3, #1
 8004ac6:	4a6d      	ldr	r2, [pc, #436]	; (8004c7c <UART_SetConfig+0x300>)
 8004ac8:	189a      	adds	r2, r3, r2
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	0019      	movs	r1, r3
 8004ad0:	0010      	movs	r0, r2
 8004ad2:	f7fb fb19 	bl	8000108 <__udivsi3>
 8004ad6:	0003      	movs	r3, r0
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	61bb      	str	r3, [r7, #24]
        break;
 8004adc:	e028      	b.n	8004b30 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ade:	f7fe fd33 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8004ae2:	0003      	movs	r3, r0
 8004ae4:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	005a      	lsls	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	085b      	lsrs	r3, r3, #1
 8004af0:	18d2      	adds	r2, r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	0019      	movs	r1, r3
 8004af8:	0010      	movs	r0, r2
 8004afa:	f7fb fb05 	bl	8000108 <__udivsi3>
 8004afe:	0003      	movs	r3, r0
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	61bb      	str	r3, [r7, #24]
        break;
 8004b04:	e014      	b.n	8004b30 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	085b      	lsrs	r3, r3, #1
 8004b0c:	2280      	movs	r2, #128	; 0x80
 8004b0e:	0252      	lsls	r2, r2, #9
 8004b10:	189a      	adds	r2, r3, r2
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	0019      	movs	r1, r3
 8004b18:	0010      	movs	r0, r2
 8004b1a:	f7fb faf5 	bl	8000108 <__udivsi3>
 8004b1e:	0003      	movs	r3, r0
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	61bb      	str	r3, [r7, #24]
        break;
 8004b24:	e004      	b.n	8004b30 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8004b26:	2317      	movs	r3, #23
 8004b28:	18fb      	adds	r3, r7, r3
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	701a      	strb	r2, [r3, #0]
        break;
 8004b2e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b0f      	cmp	r3, #15
 8004b34:	d91b      	bls.n	8004b6e <UART_SetConfig+0x1f2>
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	4a51      	ldr	r2, [pc, #324]	; (8004c80 <UART_SetConfig+0x304>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d817      	bhi.n	8004b6e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	200a      	movs	r0, #10
 8004b44:	183b      	adds	r3, r7, r0
 8004b46:	210f      	movs	r1, #15
 8004b48:	438a      	bics	r2, r1
 8004b4a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2207      	movs	r2, #7
 8004b54:	4013      	ands	r3, r2
 8004b56:	b299      	uxth	r1, r3
 8004b58:	183b      	adds	r3, r7, r0
 8004b5a:	183a      	adds	r2, r7, r0
 8004b5c:	8812      	ldrh	r2, [r2, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	183a      	adds	r2, r7, r0
 8004b68:	8812      	ldrh	r2, [r2, #0]
 8004b6a:	60da      	str	r2, [r3, #12]
 8004b6c:	e06c      	b.n	8004c48 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004b6e:	2317      	movs	r3, #23
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	2201      	movs	r2, #1
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	e067      	b.n	8004c48 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8004b78:	231f      	movs	r3, #31
 8004b7a:	18fb      	adds	r3, r7, r3
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d01b      	beq.n	8004bba <UART_SetConfig+0x23e>
 8004b82:	dc02      	bgt.n	8004b8a <UART_SetConfig+0x20e>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <UART_SetConfig+0x218>
 8004b88:	e049      	b.n	8004c1e <UART_SetConfig+0x2a2>
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d024      	beq.n	8004bd8 <UART_SetConfig+0x25c>
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d035      	beq.n	8004bfe <UART_SetConfig+0x282>
 8004b92:	e044      	b.n	8004c1e <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b94:	f7fe fd46 	bl	8003624 <HAL_RCC_GetPCLK1Freq>
 8004b98:	0003      	movs	r3, r0
 8004b9a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	085a      	lsrs	r2, r3, #1
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	18d2      	adds	r2, r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	0019      	movs	r1, r3
 8004bac:	0010      	movs	r0, r2
 8004bae:	f7fb faab 	bl	8000108 <__udivsi3>
 8004bb2:	0003      	movs	r3, r0
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	61bb      	str	r3, [r7, #24]
        break;
 8004bb8:	e036      	b.n	8004c28 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	085b      	lsrs	r3, r3, #1
 8004bc0:	4a30      	ldr	r2, [pc, #192]	; (8004c84 <UART_SetConfig+0x308>)
 8004bc2:	189a      	adds	r2, r3, r2
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	0019      	movs	r1, r3
 8004bca:	0010      	movs	r0, r2
 8004bcc:	f7fb fa9c 	bl	8000108 <__udivsi3>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	61bb      	str	r3, [r7, #24]
        break;
 8004bd6:	e027      	b.n	8004c28 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bd8:	f7fe fcb6 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8004bdc:	0003      	movs	r3, r0
 8004bde:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	085a      	lsrs	r2, r3, #1
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	18d2      	adds	r2, r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	0019      	movs	r1, r3
 8004bf0:	0010      	movs	r0, r2
 8004bf2:	f7fb fa89 	bl	8000108 <__udivsi3>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	61bb      	str	r3, [r7, #24]
        break;
 8004bfc:	e014      	b.n	8004c28 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	085b      	lsrs	r3, r3, #1
 8004c04:	2280      	movs	r2, #128	; 0x80
 8004c06:	0212      	lsls	r2, r2, #8
 8004c08:	189a      	adds	r2, r3, r2
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	0019      	movs	r1, r3
 8004c10:	0010      	movs	r0, r2
 8004c12:	f7fb fa79 	bl	8000108 <__udivsi3>
 8004c16:	0003      	movs	r3, r0
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	61bb      	str	r3, [r7, #24]
        break;
 8004c1c:	e004      	b.n	8004c28 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8004c1e:	2317      	movs	r3, #23
 8004c20:	18fb      	adds	r3, r7, r3
 8004c22:	2201      	movs	r2, #1
 8004c24:	701a      	strb	r2, [r3, #0]
        break;
 8004c26:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b0f      	cmp	r3, #15
 8004c2c:	d908      	bls.n	8004c40 <UART_SetConfig+0x2c4>
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	4a13      	ldr	r2, [pc, #76]	; (8004c80 <UART_SetConfig+0x304>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d804      	bhi.n	8004c40 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	60da      	str	r2, [r3, #12]
 8004c3e:	e003      	b.n	8004c48 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004c40:	2317      	movs	r3, #23
 8004c42:	18fb      	adds	r3, r7, r3
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004c54:	2317      	movs	r3, #23
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	781b      	ldrb	r3, [r3, #0]
}
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b008      	add	sp, #32
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	ffff69f3 	.word	0xffff69f3
 8004c68:	ffffcfff 	.word	0xffffcfff
 8004c6c:	fffff4ff 	.word	0xfffff4ff
 8004c70:	40013800 	.word	0x40013800
 8004c74:	40021000 	.word	0x40021000
 8004c78:	40004400 	.word	0x40004400
 8004c7c:	00f42400 	.word	0x00f42400
 8004c80:	0000ffff 	.word	0x0000ffff
 8004c84:	007a1200 	.word	0x007a1200

08004c88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	2201      	movs	r2, #1
 8004c96:	4013      	ands	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4a4a      	ldr	r2, [pc, #296]	; (8004dcc <UART_AdvFeatureConfig+0x144>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d00b      	beq.n	8004cd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	4a43      	ldr	r2, [pc, #268]	; (8004dd0 <UART_AdvFeatureConfig+0x148>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	2204      	movs	r2, #4
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d00b      	beq.n	8004cf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	4a3b      	ldr	r2, [pc, #236]	; (8004dd4 <UART_AdvFeatureConfig+0x14c>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	0019      	movs	r1, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	2208      	movs	r2, #8
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d00b      	beq.n	8004d18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	4a34      	ldr	r2, [pc, #208]	; (8004dd8 <UART_AdvFeatureConfig+0x150>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	0019      	movs	r1, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	2210      	movs	r2, #16
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d00b      	beq.n	8004d3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	4a2c      	ldr	r2, [pc, #176]	; (8004ddc <UART_AdvFeatureConfig+0x154>)
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	0019      	movs	r1, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	2220      	movs	r2, #32
 8004d40:	4013      	ands	r3, r2
 8004d42:	d00b      	beq.n	8004d5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	4a25      	ldr	r2, [pc, #148]	; (8004de0 <UART_AdvFeatureConfig+0x158>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	0019      	movs	r1, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	2240      	movs	r2, #64	; 0x40
 8004d62:	4013      	ands	r3, r2
 8004d64:	d01d      	beq.n	8004da2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <UART_AdvFeatureConfig+0x15c>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	0019      	movs	r1, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d82:	2380      	movs	r3, #128	; 0x80
 8004d84:	035b      	lsls	r3, r3, #13
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d10b      	bne.n	8004da2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	4a15      	ldr	r2, [pc, #84]	; (8004de8 <UART_AdvFeatureConfig+0x160>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	0019      	movs	r1, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	2280      	movs	r2, #128	; 0x80
 8004da8:	4013      	ands	r3, r2
 8004daa:	d00b      	beq.n	8004dc4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4a0e      	ldr	r2, [pc, #56]	; (8004dec <UART_AdvFeatureConfig+0x164>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	0019      	movs	r1, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	605a      	str	r2, [r3, #4]
  }
}
 8004dc4:	46c0      	nop			; (mov r8, r8)
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b002      	add	sp, #8
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	fffdffff 	.word	0xfffdffff
 8004dd0:	fffeffff 	.word	0xfffeffff
 8004dd4:	fffbffff 	.word	0xfffbffff
 8004dd8:	ffff7fff 	.word	0xffff7fff
 8004ddc:	ffffefff 	.word	0xffffefff
 8004de0:	ffffdfff 	.word	0xffffdfff
 8004de4:	ffefffff 	.word	0xffefffff
 8004de8:	ff9fffff 	.word	0xff9fffff
 8004dec:	fff7ffff 	.word	0xfff7ffff

08004df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004dfe:	f7fd fcc5 	bl	800278c <HAL_GetTick>
 8004e02:	0003      	movs	r3, r0
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2208      	movs	r2, #8
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d10d      	bne.n	8004e30 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	2380      	movs	r3, #128	; 0x80
 8004e18:	0399      	lsls	r1, r3, #14
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	4b16      	ldr	r3, [pc, #88]	; (8004e78 <UART_CheckIdleState+0x88>)
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	0013      	movs	r3, r2
 8004e22:	2200      	movs	r2, #0
 8004e24:	f000 f82a 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004e28:	1e03      	subs	r3, r0, #0
 8004e2a:	d001      	beq.n	8004e30 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e01f      	b.n	8004e70 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2204      	movs	r2, #4
 8004e38:	4013      	ands	r3, r2
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d10d      	bne.n	8004e5a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	2380      	movs	r3, #128	; 0x80
 8004e42:	03d9      	lsls	r1, r3, #15
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <UART_CheckIdleState+0x88>)
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	0013      	movs	r3, r2
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f000 f815 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004e52:	1e03      	subs	r3, r0, #0
 8004e54:	d001      	beq.n	8004e5a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e00a      	b.n	8004e70 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2270      	movs	r2, #112	; 0x70
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	0018      	movs	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	b004      	add	sp, #16
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	01ffffff 	.word	0x01ffffff

08004e7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	1dfb      	adds	r3, r7, #7
 8004e8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8c:	e05d      	b.n	8004f4a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	3301      	adds	r3, #1
 8004e92:	d05a      	beq.n	8004f4a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e94:	f7fd fc7a 	bl	800278c <HAL_GetTick>
 8004e98:	0002      	movs	r2, r0
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d302      	bcc.n	8004eaa <UART_WaitOnFlagUntilTimeout+0x2e>
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d11b      	bne.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	492f      	ldr	r1, [pc, #188]	; (8004f74 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004eb6:	400a      	ands	r2, r1
 8004eb8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	438a      	bics	r2, r1
 8004ec8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2270      	movs	r2, #112	; 0x70
 8004eda:	2100      	movs	r1, #0
 8004edc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e043      	b.n	8004f6a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	4013      	ands	r3, r2
 8004eec:	d02d      	beq.n	8004f4a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	401a      	ands	r2, r3
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d123      	bne.n	8004f4a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2280      	movs	r2, #128	; 0x80
 8004f08:	0112      	lsls	r2, r2, #4
 8004f0a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4917      	ldr	r1, [pc, #92]	; (8004f74 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004f18:	400a      	ands	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2101      	movs	r1, #1
 8004f28:	438a      	bics	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2220      	movs	r2, #32
 8004f36:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2270      	movs	r2, #112	; 0x70
 8004f42:	2100      	movs	r1, #0
 8004f44:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e00f      	b.n	8004f6a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	4013      	ands	r3, r2
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	425a      	negs	r2, r3
 8004f5a:	4153      	adcs	r3, r2
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	001a      	movs	r2, r3
 8004f60:	1dfb      	adds	r3, r7, #7
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d092      	beq.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	b004      	add	sp, #16
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	fffffe5f 	.word	0xfffffe5f

08004f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	490a      	ldr	r1, [pc, #40]	; (8004fb4 <UART_EndRxTransfer+0x3c>)
 8004f8c:	400a      	ands	r2, r1
 8004f8e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	438a      	bics	r2, r1
 8004f9e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004fac:	46c0      	nop			; (mov r8, r8)
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b002      	add	sp, #8
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	fffffedf 	.word	0xfffffedf

08004fb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	225a      	movs	r2, #90	; 0x5a
 8004fca:	2100      	movs	r1, #0
 8004fcc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2252      	movs	r2, #82	; 0x52
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f7ff fcc7 	bl	800496c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b004      	add	sp, #16
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2140      	movs	r1, #64	; 0x40
 8004ffa:	438a      	bics	r2, r1
 8004ffc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	0018      	movs	r0, r3
 800500e:	f7ff fca5 	bl	800495c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	46bd      	mov	sp, r7
 8005016:	b002      	add	sp, #8
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005024:	230e      	movs	r3, #14
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	215c      	movs	r1, #92	; 0x5c
 800502c:	5a52      	ldrh	r2, [r2, r1]
 800502e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005034:	2b22      	cmp	r3, #34	; 0x22
 8005036:	d140      	bne.n	80050ba <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	210c      	movs	r1, #12
 800503e:	187b      	adds	r3, r7, r1
 8005040:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005042:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005044:	187b      	adds	r3, r7, r1
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b2da      	uxtb	r2, r3
 800504a:	230e      	movs	r3, #14
 800504c:	18fb      	adds	r3, r7, r3
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b2d9      	uxtb	r1, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	400a      	ands	r2, r1
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	225a      	movs	r2, #90	; 0x5a
 800506a:	5a9b      	ldrh	r3, [r3, r2]
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b299      	uxth	r1, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	225a      	movs	r2, #90	; 0x5a
 8005076:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	225a      	movs	r2, #90	; 0x5a
 800507c:	5a9b      	ldrh	r3, [r3, r2]
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d122      	bne.n	80050ca <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4911      	ldr	r1, [pc, #68]	; (80050d4 <UART_RxISR_8BIT+0xb8>)
 8005090:	400a      	ands	r2, r1
 8005092:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2101      	movs	r1, #1
 80050a0:	438a      	bics	r2, r1
 80050a2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	0018      	movs	r0, r3
 80050b4:	f7fc ff3a 	bl	8001f2c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050b8:	e007      	b.n	80050ca <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2108      	movs	r1, #8
 80050c6:	430a      	orrs	r2, r1
 80050c8:	619a      	str	r2, [r3, #24]
}
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	46bd      	mov	sp, r7
 80050ce:	b004      	add	sp, #16
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	46c0      	nop			; (mov r8, r8)
 80050d4:	fffffedf 	.word	0xfffffedf

080050d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80050e0:	230e      	movs	r3, #14
 80050e2:	18fb      	adds	r3, r7, r3
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	215c      	movs	r1, #92	; 0x5c
 80050e8:	5a52      	ldrh	r2, [r2, r1]
 80050ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050f0:	2b22      	cmp	r3, #34	; 0x22
 80050f2:	d140      	bne.n	8005176 <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	210c      	movs	r1, #12
 80050fa:	187b      	adds	r3, r7, r1
 80050fc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80050fe:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005104:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005106:	187b      	adds	r3, r7, r1
 8005108:	220e      	movs	r2, #14
 800510a:	18ba      	adds	r2, r7, r2
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	8812      	ldrh	r2, [r2, #0]
 8005110:	4013      	ands	r3, r2
 8005112:	b29a      	uxth	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511c:	1c9a      	adds	r2, r3, #2
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	225a      	movs	r2, #90	; 0x5a
 8005126:	5a9b      	ldrh	r3, [r3, r2]
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b299      	uxth	r1, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	225a      	movs	r2, #90	; 0x5a
 8005132:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	225a      	movs	r2, #90	; 0x5a
 8005138:	5a9b      	ldrh	r3, [r3, r2]
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d122      	bne.n	8005186 <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4911      	ldr	r1, [pc, #68]	; (8005190 <UART_RxISR_16BIT+0xb8>)
 800514c:	400a      	ands	r2, r1
 800514e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2101      	movs	r1, #1
 800515c:	438a      	bics	r2, r1
 800515e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	0018      	movs	r0, r3
 8005170:	f7fc fedc 	bl	8001f2c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005174:	e007      	b.n	8005186 <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2108      	movs	r1, #8
 8005182:	430a      	orrs	r2, r1
 8005184:	619a      	str	r2, [r3, #24]
}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	46bd      	mov	sp, r7
 800518a:	b004      	add	sp, #16
 800518c:	bd80      	pop	{r7, pc}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	fffffedf 	.word	0xfffffedf

08005194 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800519c:	46c0      	nop			; (mov r8, r8)
 800519e:	46bd      	mov	sp, r7
 80051a0:	b002      	add	sp, #8
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <__libc_init_array>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	2600      	movs	r6, #0
 80051a8:	4d0c      	ldr	r5, [pc, #48]	; (80051dc <__libc_init_array+0x38>)
 80051aa:	4c0d      	ldr	r4, [pc, #52]	; (80051e0 <__libc_init_array+0x3c>)
 80051ac:	1b64      	subs	r4, r4, r5
 80051ae:	10a4      	asrs	r4, r4, #2
 80051b0:	42a6      	cmp	r6, r4
 80051b2:	d109      	bne.n	80051c8 <__libc_init_array+0x24>
 80051b4:	2600      	movs	r6, #0
 80051b6:	f000 f821 	bl	80051fc <_init>
 80051ba:	4d0a      	ldr	r5, [pc, #40]	; (80051e4 <__libc_init_array+0x40>)
 80051bc:	4c0a      	ldr	r4, [pc, #40]	; (80051e8 <__libc_init_array+0x44>)
 80051be:	1b64      	subs	r4, r4, r5
 80051c0:	10a4      	asrs	r4, r4, #2
 80051c2:	42a6      	cmp	r6, r4
 80051c4:	d105      	bne.n	80051d2 <__libc_init_array+0x2e>
 80051c6:	bd70      	pop	{r4, r5, r6, pc}
 80051c8:	00b3      	lsls	r3, r6, #2
 80051ca:	58eb      	ldr	r3, [r5, r3]
 80051cc:	4798      	blx	r3
 80051ce:	3601      	adds	r6, #1
 80051d0:	e7ee      	b.n	80051b0 <__libc_init_array+0xc>
 80051d2:	00b3      	lsls	r3, r6, #2
 80051d4:	58eb      	ldr	r3, [r5, r3]
 80051d6:	4798      	blx	r3
 80051d8:	3601      	adds	r6, #1
 80051da:	e7f2      	b.n	80051c2 <__libc_init_array+0x1e>
 80051dc:	0800534c 	.word	0x0800534c
 80051e0:	0800534c 	.word	0x0800534c
 80051e4:	0800534c 	.word	0x0800534c
 80051e8:	08005350 	.word	0x08005350

080051ec <memset>:
 80051ec:	0003      	movs	r3, r0
 80051ee:	1812      	adds	r2, r2, r0
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d100      	bne.n	80051f6 <memset+0xa>
 80051f4:	4770      	bx	lr
 80051f6:	7019      	strb	r1, [r3, #0]
 80051f8:	3301      	adds	r3, #1
 80051fa:	e7f9      	b.n	80051f0 <memset+0x4>

080051fc <_init>:
 80051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005202:	bc08      	pop	{r3}
 8005204:	469e      	mov	lr, r3
 8005206:	4770      	bx	lr

08005208 <_fini>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520e:	bc08      	pop	{r3}
 8005210:	469e      	mov	lr, r3
 8005212:	4770      	bx	lr
